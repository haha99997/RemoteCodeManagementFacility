#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR\\ClientCLR.cpp"
#line 1 "<built-in>"
#line 1 "<built-in>"
#line 319 "<built-in>"
#line 1 "<command line>"
#line 1 "<built-in>"
#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR\\ClientCLR.cpp"








#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/ClientCLR.h"
#line 37 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/ClientCLR.h"
using namespace System;
using namespace System::Collections;
using namespace System::Collections::Generic;
using namespace System::Text;
using namespace System::Windows;
using namespace System::Windows::Input;
using namespace System::Windows::Markup;
using namespace System::Windows::Media;
using namespace System::Windows::Controls;
using namespace System::Windows::Controls::Primitives;
using namespace System::Threading;
using namespace System::Threading::Tasks;
using namespace System::Windows::Threading;
using namespace System::ComponentModel;


#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/ChannelFactory.h"
#line 36 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/ChannelFactory.h"
#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../Sender/ISendr.h"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iterator"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ios"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\climits"




#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xkeycheck.h"
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 67 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\sal.h"
#line 2381 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\sal.h"
extern "C" {
#line 2987 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\sal.h"
}



#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ConcurrencySal.h"
#line 22 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ConcurrencySal.h"
extern "C" {
#line 354 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ConcurrencySal.h"
}
#line 2990 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\sal.h"
#line 67 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"





#pragma pack(push,8)


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
#line 28 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
#pragma pack(push,8)


extern "C" {
#line 50 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
typedef __w64 unsigned int uintptr_t;
#line 59 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
typedef char * va_list;
#line 141 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
}


#pragma pack(pop)
#line 74 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"



extern "C" {
#line 496 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
typedef __w64 unsigned int size_t;






typedef size_t rsize_t;
#line 512 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
typedef __w64 int intptr_t;
#line 530 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
typedef __w64 int ptrdiff_t;
#line 541 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
#line 563 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
typedef int errno_t;



typedef __w64 long __time32_t;




typedef __int64 __time64_t;







typedef __time64_t time_t;
#line 637 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
 __declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
 __declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);


__declspec(dllimport) __declspec(noreturn)
void __cdecl _invoke_watson( const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
#line 2072 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct localerefcount {
        char *locale;
        wchar_t *wlocale;
        int *refcount;
        int *wrefcount;
} locrefcount;

typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned int lc_time_cp;
        locrefcount lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
        wchar_t * locale_name[6];
} threadlocinfo;




}
#line 2148 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"


#pragma pack(push,8)
#line 205 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1800")



#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")








#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
#line 367 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\use_ansi.h"
#line 57 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\use_ansi.h"
#pragma comment(lib, "msvcprt" "" "")
#line 367 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#line 568 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
namespace std {
typedef bool _Bool;
}
#line 586 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
typedef __int64 _Longlong;
typedef unsigned __int64 _ULonglong;
#line 605 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
typedef unsigned short char16_t;
typedef unsigned int char32_t;
#line 619 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
namespace std {
enum _Uninitialized
 {
 _Noinit
 };



#pragma warning(push)
#pragma warning(disable: 4412)
class __declspec(dllimport) _Lockit
 {
public:
#line 652 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
 __thiscall _Lockit();
 explicit __thiscall _Lockit(int);
 __thiscall ~_Lockit() throw ();


    static void __cdecl _Lockit_ctor(int);
    static void __cdecl _Lockit_dtor(int);

private:
    static void __cdecl _Lockit_ctor(_Lockit *);
    static void __cdecl _Lockit_ctor(_Lockit *, int);
    static void __cdecl _Lockit_dtor(_Lockit *);

public:
                    _Lockit(const _Lockit&) = delete;
 _Lockit& operator=(const _Lockit&) = delete;

private:
 int _Locktype;
#line 685 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
 };
#line 772 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
class __declspec(dllimport) _Init_locks
 {
public:
#line 788 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
    __thiscall _Init_locks();
 __thiscall ~_Init_locks() throw ();


private:
    static void __cdecl _Init_locks_ctor(_Init_locks *);
    static void __cdecl _Init_locks_dtor(_Init_locks *);
#line 805 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
 };

#pragma warning(pop)
}
#line 817 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef int _Mbstatet;
typedef unsigned long _Uint32t;








#pragma pack(pop)
#line 5 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\climits"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits.h"
#line 17 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 17 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits.h"
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\climits"
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cmath"
#line 16 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cmath"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
#line 18 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 18 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"






#pragma pack(push,8)


extern "C" {
#line 37 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
struct _exception {
        int type;
        char *name;
        double arg1;
        double arg2;
        double retval;
        } ;
#line 54 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
struct _complex {
        double x,y;
        } ;
#line 67 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
typedef float float_t;
typedef double double_t;
#line 90 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
__declspec(dllimport) extern double _HUGE;
#line 184 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
void __cdecl _fperrraise( int _Except);

short __declspec(dllimport) __cdecl _dclass( double _X);
short __declspec(dllimport) __cdecl _ldclass( long double _X);
short __declspec(dllimport) __cdecl _fdclass( float _X);

int __declspec(dllimport) __cdecl _dsign( double _X);
int __declspec(dllimport) __cdecl _ldsign( long double _X);
int __declspec(dllimport) __cdecl _fdsign( float _X);

int __declspec(dllimport) __cdecl _dpcomp( double _X, double _Y);
int __declspec(dllimport) __cdecl _ldpcomp( long double _X, long double _Y);
int __declspec(dllimport) __cdecl _fdpcomp( float _X, float _Y);

short __declspec(dllimport) __cdecl _dtest( double *_Px);
short __declspec(dllimport) __cdecl _ldtest( long double *_Px);
short __declspec(dllimport) __cdecl _fdtest( float *_Px);

short __declspec(dllimport) __cdecl _d_int( double *_Px, short _Xexp);
short __declspec(dllimport) __cdecl _ld_int( long double *_Px, short _Xexp);
short __declspec(dllimport) __cdecl _fd_int( float *_Px, short _Xexp);

short __declspec(dllimport) __cdecl _dscale( double *_Px, long _Lexp);
short __declspec(dllimport) __cdecl _ldscale( long double *_Px, long _Lexp);
short __declspec(dllimport) __cdecl _fdscale( float *_Px, long _Lexp);

short __declspec(dllimport) __cdecl _dunscale( short *_Pex, double *_Px);
short __declspec(dllimport) __cdecl _ldunscale( short *_Pex, long double *_Px);
short __declspec(dllimport) __cdecl _fdunscale( short *_Pex, float *_Px);

short __declspec(dllimport) __cdecl _dexp( double *_Px, double _Y, long _Eoff);
short __declspec(dllimport) __cdecl _ldexp( long double *_Px, long double _Y, long _Eoff);
short __declspec(dllimport) __cdecl _fdexp( float *_Px, float _Y, long _Eoff);

short __declspec(dllimport) __cdecl _dnorm( unsigned short *_Ps);
short __declspec(dllimport) __cdecl _fdnorm( unsigned short *_Ps);

double __cdecl _dpoly( double _X, const double *_Tab, int _N);
long double __cdecl _ldpoly( long double _X, const long double *_Tab, int _N);
float __cdecl _fdpoly( float _X, const float *_Tab, int _N);

double __declspec(dllimport) __cdecl _dlog( double _X, int _Baseflag);
long double __declspec(dllimport) __cdecl _ldlog( long double _X, int _Baseflag);
float __declspec(dllimport) __cdecl _fdlog( float _X, int _Baseflag);

double __declspec(dllimport) __cdecl _dsin( double _X, unsigned int _Qoff);
long double __declspec(dllimport) __cdecl _ldsin( long double _X, unsigned int _Qoff);
float __declspec(dllimport) __cdecl _fdsin( float _X, unsigned int _Qoff);


typedef union
{
    unsigned short _Sh[8];
    double _Val;
} _double_val;


typedef union
{
    unsigned short _Sh[8];
    float _Val;
} _float_val;


typedef union
{
    unsigned short _Sh[8];
    long double _Val;
} _ldouble_val;

typedef union
{
    unsigned short _Word[8];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
#line 302 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C++" {

inline __declspec(nothrow) int fpclassify(float _X)
{
    return (_fdtest(&_X));
}

inline __declspec(nothrow) int fpclassify(double _X)
{
    return (_dtest(&_X));
}

inline __declspec(nothrow) int fpclassify(long double _X)
{
    return (_ldtest(&_X));
}

inline __declspec(nothrow) bool signbit(float _X)
{
    return (_fdsign(_X) != 0);
}

inline __declspec(nothrow) bool signbit(double _X)
{
    return (_dsign(_X) != 0);
}

inline __declspec(nothrow) bool signbit(long double _X)
{
    return (_ldsign(_X) != 0);
}

inline __declspec(nothrow) int _fpcomp(float _X, float _Y)
{
    return (_fdpcomp(_X, _Y));
}

inline __declspec(nothrow) int _fpcomp(double _X, double _Y)
{
    return (_dpcomp(_X, _Y));
}

inline __declspec(nothrow) int _fpcomp(long double _X, long double _Y)
{
    return (_ldpcomp(_X, _Y));
}

template<class _Trc, class _Tre> struct _Combined_type
{
    typedef float _Type;
};

template<> struct _Combined_type<float, double>
{
    typedef double _Type;
};

template<> struct _Combined_type<float, long double>
{
    typedef long double _Type;
};

template<class _Ty, class _T2> struct _Real_widened
{
    typedef long double _Type;
};

template<> struct _Real_widened<float, float>
{
    typedef float _Type;
};

template<> struct _Real_widened<float, double>
{
    typedef double _Type;
};

template<> struct _Real_widened<double, float>
{
    typedef double _Type;
};

template<> struct _Real_widened<double, double>
{
    typedef double _Type;
};

template<class _Ty> struct _Real_type
{
    typedef double _Type;
};

template<> struct _Real_type<float>
{
    typedef float _Type;
};

template<> struct _Real_type<long double>
{
    typedef long double _Type;
};

template<class _T1, class _T2> inline __declspec(nothrow) int _fpcomp(_T1 _X, _T2 _Y)
{
    typedef typename _Combined_type<float,
        typename _Real_widened<
        typename _Real_type<_T1>::_Type,
        typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
    return (_fpcomp((_Tw)_X, (_Tw)_Y));
}

template<class _Ty> inline __declspec(nothrow) bool isfinite(_Ty _X)
{
    return (fpclassify(_X) <= 0);
}

template<class _Ty> inline __declspec(nothrow) bool isinf(_Ty _X)
{
    return (fpclassify(_X) == 1);
}

template<class _Ty> inline __declspec(nothrow) bool isnan(_Ty _X)
{
    return (fpclassify(_X) == 2);
}

template<class _Ty> inline __declspec(nothrow) bool isnormal(_Ty _X)
{
    return (fpclassify(_X) == (-1));
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isgreater(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & 4) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isgreaterequal(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (2 | 4)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isless(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & 1) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool islessequal(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (1 | 2)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool islessgreater(_Ty1 _X, _Ty2 _Y)
{
    return ((_fpcomp(_X, _Y) & (1 | 4)) != 0);
}

template<class _Ty1, class _Ty2> inline __declspec(nothrow) bool isunordered(_Ty1 _X, _Ty2 _Y)
{
    return (_fpcomp(_X, _Y) == 0);
}

}






int __cdecl abs( int _X);
long __cdecl labs( long _X);
long long __cdecl llabs( long long _X);

double __cdecl acos( double _X);
__declspec(dllimport) double __cdecl acosh( double _X);
double __cdecl asin( double _X);
__declspec(dllimport) double __cdecl asinh( double _X);
double __cdecl atan( double _X);
__declspec(dllimport) double __cdecl atanh( double _X);
double __cdecl atan2( double _Y, double _X);

__declspec(dllimport) double __cdecl cbrt( double _X);
__declspec(dllimport) double __cdecl copysign( double _X, double _Y);
double __cdecl cos( double _X);
double __cdecl cosh( double _X);
__declspec(dllimport) double __cdecl erf( double _X);
__declspec(dllimport) double __cdecl erfc( double _X);
double __cdecl exp( double _X);
__declspec(dllimport) double __cdecl exp2( double _X);
__declspec(dllimport) double __cdecl expm1( double _X);
                   double __cdecl fabs( double _X);
__declspec(dllimport) double __cdecl fdim( double _X, double _Y);
__declspec(dllimport) double __cdecl fma( double _X, double _Y, double _Z);
__declspec(dllimport) double __cdecl fmax( double _X, double _Y);
__declspec(dllimport) double __cdecl fmin( double _X, double _Y);
double __cdecl fmod( double _X, double _Y);
__declspec(dllimport) int __cdecl ilogb( double _X);
__declspec(dllimport) double __cdecl lgamma( double _X);
__declspec(dllimport) long long __cdecl llrint( double _X);
__declspec(dllimport) long long __cdecl llround( double _X);
double __cdecl log( double _X);
double __cdecl log10( double _X);
__declspec(dllimport) double __cdecl log1p( double _X);
__declspec(dllimport) double __cdecl log2( double _X);
__declspec(dllimport) double __cdecl logb( double _X);
__declspec(dllimport) long __cdecl lrint( double _X);
__declspec(dllimport) long __cdecl lround( double _X);
__declspec(dllimport) double __cdecl nan( const char *);
__declspec(dllimport) double __cdecl nearbyint( double _X);
__declspec(dllimport) double __cdecl nextafter( double _X, double _Y);
__declspec(dllimport) double __cdecl nexttoward( double _X, long double _Y);
double __cdecl pow( double _X, double _Y);
__declspec(dllimport) double __cdecl remainder( double _X, double _Y);
__declspec(dllimport) double __cdecl remquo( double _X, double _Y, int *_Z);
__declspec(dllimport) double __cdecl rint( double _X);
__declspec(dllimport) double __cdecl round( double _X);
__declspec(dllimport) double __cdecl scalbln( double _X, long _Y);
__declspec(dllimport) double __cdecl scalbn( double _X, int _Y);
double __cdecl sin( double _X);
double __cdecl sinh( double _X);
                    double __cdecl sqrt( double _X);
double __cdecl tan( double _X);
double __cdecl tanh( double _X);
__declspec(dllimport) double __cdecl tgamma( double _X);
__declspec(dllimport) double __cdecl trunc( double _X);

               __declspec(dllimport) double __cdecl atof( const char *_String);
               __declspec(dllimport) double __cdecl _atof_l( const char *_String, _locale_t _Locale);

__declspec(dllimport) double __cdecl _cabs( struct _complex _Complex_value);
__declspec(dllimport) double __cdecl ceil( double _X);

               __declspec(dllimport) double __cdecl _chgsign ( double _X);
               __declspec(dllimport) double __cdecl _copysign ( double _Number, double _Sign);

__declspec(dllimport) double __cdecl floor( double _X);
__declspec(dllimport) double __cdecl frexp( double _X, int * _Y);
__declspec(dllimport) double __cdecl _hypot( double _X, double _Y);
__declspec(dllimport) double __cdecl _j0( double _X );
__declspec(dllimport) double __cdecl _j1( double _X );
__declspec(dllimport) double __cdecl _jn(int _X, double _Y);
__declspec(dllimport) double __cdecl ldexp( double _X, int _Y);




int __cdecl _matherr( struct _exception * _Except);


__declspec(dllimport) double __cdecl modf( double _X, double * _Y);
__declspec(dllimport) double __cdecl _y0( double _X);
__declspec(dllimport) double __cdecl _y1( double _X);
__declspec(dllimport) double __cdecl _yn( int _X, double _Y);

__inline double __cdecl hypot( double _X, double _Y)
{
    return _hypot(_X, _Y);
}


__declspec(dllimport) float __cdecl acoshf( float _X);
__declspec(dllimport) float __cdecl asinhf( float _X);
__declspec(dllimport) float __cdecl atanhf( float _X);
__declspec(dllimport) float __cdecl cbrtf( float _X);
__declspec(dllimport) float __cdecl _chgsignf( float _X);
__declspec(dllimport) float __cdecl copysignf( float _X, float _Y);
__declspec(dllimport) float __cdecl _copysignf( float _Number, float _Sign);
__declspec(dllimport) float __cdecl erff( float _X);
__declspec(dllimport) float __cdecl erfcf( float _X);
__declspec(dllimport) float __cdecl expm1f( float _X);
__declspec(dllimport) float __cdecl exp2f( float _X);
__declspec(dllimport) float __cdecl fdimf( float _X, float _Y);
__declspec(dllimport) float __cdecl fmaf( float _X, float _Y, float _Z);
__declspec(dllimport) float __cdecl fmaxf( float _X, float _Y);
__declspec(dllimport) float __cdecl fminf( float _X, float _Y);
__declspec(dllimport) float __cdecl _hypotf( float _X, float _Y);
__declspec(dllimport) int __cdecl ilogbf( float _X);
__declspec(dllimport) float __cdecl lgammaf( float _X);
__declspec(dllimport) long long __cdecl llrintf( float _X);
__declspec(dllimport) long long __cdecl llroundf( float _X);
__declspec(dllimport) float __cdecl log1pf( float _X);
__declspec(dllimport) float __cdecl log2f( float _X);
__declspec(dllimport) float __cdecl logbf( float _X);
__declspec(dllimport) long __cdecl lrintf( float _X);
__declspec(dllimport) long __cdecl lroundf( float _X);
__declspec(dllimport) float __cdecl nanf( const char *);
__declspec(dllimport) float __cdecl nearbyintf( float _X);
__declspec(dllimport) float __cdecl nextafterf( float _X, float _Y);
__declspec(dllimport) float __cdecl nexttowardf( float _X, long double _Y);
__declspec(dllimport) float __cdecl remainderf( float _X, float _Y);
__declspec(dllimport) float __cdecl remquof( float _X, float _Y, int *_Z);
__declspec(dllimport) float __cdecl rintf( float _X);
__declspec(dllimport) float __cdecl roundf( float _X);
__declspec(dllimport) float __cdecl scalblnf( float _X, long _Y);
__declspec(dllimport) float __cdecl scalbnf( float _X, int _Y);
__declspec(dllimport) float __cdecl tgammaf( float _X);
__declspec(dllimport) float __cdecl truncf( float _X);



__declspec(dllimport) int __cdecl _set_SSE2_enable( int _Flag);
#line 637 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
__inline float __cdecl acosf( float _X)
{
    return (float)acos(_X);
}

__inline float __cdecl asinf( float _X)
{
    return (float)asin(_X);
}

__inline float __cdecl atan2f( float _Y, float _X)
{
    return (float)atan2(_Y, _X);
}

__inline float __cdecl atanf( float _X)
{
    return (float)atan(_X);
}

__inline float __cdecl ceilf( float _X)
{
    return (float)ceil(_X);
}

__inline float __cdecl cosf( float _X)
{
    return (float)cos(_X);
}

__inline float __cdecl coshf( float _X)
{
    return (float)cosh(_X);
}

__inline float __cdecl expf( float _X)
{
    return (float)exp(_X);
}
#line 685 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
__inline float __cdecl fabsf( float _X)
{
    return (float)fabs(_X);
}
#line 699 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
__inline float __cdecl floorf( float _X)
{
    return (float)floor(_X);
}

__inline float __cdecl fmodf( float _X, float _Y)
{
    return (float)fmod(_X, _Y);
}



__inline float __cdecl frexpf( float _X, int *_Y)
{
    return (float)frexp(_X, _Y);
}

__inline float __cdecl hypotf( float _X, float _Y)
{
    return _hypotf(_X, _Y);
}

__inline float __cdecl ldexpf( float _X, int _Y)
{
    return (float)ldexp(_X, _Y);
}
#line 740 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
__inline float __cdecl log10f( float _X)
{
    return (float)log10(_X);
}

__inline float __cdecl logf( float _X)
{
    return (float)log(_X);
}

__inline float __cdecl modff( float _X, float *_Y)
{
    double _F, _I;
    _F = modf(_X, &_I);
    *_Y = (float)_I;
    return (float)_F;
}

__inline float __cdecl powf( float _X, float _Y)
{
    return (float)pow(_X, _Y);
}

__inline float __cdecl sinf( float _X)
{
    return (float)sin(_X);
}

__inline float __cdecl sinhf( float _X)
{
    return (float)sinh(_X);
}

__inline float __cdecl sqrtf( float _X)
{
    return (float)sqrt(_X);
}

__inline float __cdecl tanf( float _X)
{
    return (float)tan(_X);
}

__inline float __cdecl tanhf( float _X)
{
    return (float)tanh(_X);
}



__declspec(dllimport) long double __cdecl acoshl( long double _X);

__inline long double __cdecl acosl( long double _X)
{
    return acos((double)_X);
}

__declspec(dllimport) long double __cdecl asinhl( long double _X);

__inline long double __cdecl asinl( long double _X)
{
    return asin((double)_X);
}

__inline long double __cdecl atan2l( long double _Y, long double _X)
{
    return atan2((double)_Y, (double)_X);
}

__declspec(dllimport) long double __cdecl atanhl( long double _X);

__inline long double __cdecl atanl( long double _X)
{
    return atan((double)_X);
}

__declspec(dllimport) long double __cdecl cbrtl( long double _X);

__inline long double __cdecl ceill( long double _X)
{
    return ceil((double)_X);
}

__inline long double __cdecl _chgsignl( long double _X)
{
    return _chgsign((double)_X);
}

__declspec(dllimport) long double __cdecl copysignl( long double _X, long double _Y);

__inline long double __cdecl _copysignl( long double _X, long double _Y)
{
    return _copysign((double)_X, (double)_Y);
}

__inline long double __cdecl coshl( long double _X)
{
    return cosh((double)_X);
}

__inline long double __cdecl cosl( long double _X)
{
    return cos((double)_X);
}

__declspec(dllimport) long double __cdecl erfl( long double _X);
__declspec(dllimport) long double __cdecl erfcl( long double _X);

__inline long double __cdecl expl( long double _X)
{
    return exp((double)_X);
}

__declspec(dllimport) long double __cdecl exp2l( long double _X);
__declspec(dllimport) long double __cdecl expm1l( long double _X);

__inline long double __cdecl fabsl( long double _X)
{
    return fabs((double)_X);
}

__declspec(dllimport) long double __cdecl fdiml( long double _X, long double _Y);

__inline long double __cdecl floorl( long double _X)
{
    return floor((double)_X);
}

__declspec(dllimport) long double __cdecl fmal( long double _X, long double _Y, long double _Z);
__declspec(dllimport) long double __cdecl fmaxl( long double _X, long double _Y);
__declspec(dllimport) long double __cdecl fminl( long double _X, long double _Y);

__inline long double __cdecl fmodl( long double _X, long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

__inline long double __cdecl frexpl( long double _X, int *_Y)
{
    return frexp((double)_X, _Y);
}

__declspec(dllimport) int __cdecl ilogbl( long double _X);

__inline long double __cdecl _hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

__inline long double __cdecl hypotl( long double _X, long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

__inline long double __cdecl ldexpl( long double _X, int _Y)
{
    return ldexp((double)_X, _Y);
}

__declspec(dllimport) long double __cdecl lgammal( long double _X);
__declspec(dllimport) long long __cdecl llrintl( long double _X);
__declspec(dllimport) long long __cdecl llroundl( long double _X);

__inline long double __cdecl logl( long double _X)
{
    return log((double)_X);
}

__inline long double __cdecl log10l( long double _X)
{
    return log10((double)_X);
}

__declspec(dllimport) long double __cdecl log1pl( long double _X);
__declspec(dllimport) long double __cdecl log2l( long double _X);
__declspec(dllimport) long double __cdecl logbl( long double _X);
__declspec(dllimport) long __cdecl lrintl( long double _X);
__declspec(dllimport) long __cdecl lroundl( long double _X);

__inline long double __cdecl modfl( long double _X, long double *_Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}
__declspec(dllimport) long double __cdecl nanl( const char *);
__declspec(dllimport) long double __cdecl nearbyintl( long double _X);
__declspec(dllimport) long double __cdecl nextafterl( long double _X, long double _Y);
__declspec(dllimport) long double __cdecl nexttowardl( long double _X, long double _Y);

__inline long double __cdecl powl( long double _X, long double _Y)
{
    return pow((double)_X, (double)_Y);
}

__declspec(dllimport) long double __cdecl remainderl( long double _X, long double _Y);
__declspec(dllimport) long double __cdecl remquol( long double _X, long double _Y, int *_Z);
__declspec(dllimport) long double __cdecl rintl( long double _X);
__declspec(dllimport) long double __cdecl roundl( long double _X);
__declspec(dllimport) long double __cdecl scalblnl( long double _X, long _Y);
__declspec(dllimport) long double __cdecl scalbnl( long double _X, int _Y);

__inline long double __cdecl sinhl( long double _X)
{
    return sinh((double)_X);
}

__inline long double __cdecl sinl( long double _X)
{
    return sin((double)_X);
}

__inline long double __cdecl sqrtl( long double _X)
{
    return sqrt((double)_X);
}

__inline long double __cdecl tanhl( long double _X)
{
    return tanh((double)_X);
}

__inline long double __cdecl tanl( long double _X)
{
    return tan((double)_X);
}

__declspec(dllimport) long double __cdecl tgammal( long double _X);
__declspec(dllimport) long double __cdecl truncl( long double _X);
#line 992 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
__declspec(dllimport) extern double HUGE;




__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j0" ". See online help for details.")) __declspec(dllimport) double __cdecl j0( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_j1" ". See online help for details.")) __declspec(dllimport) double __cdecl j1( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_jn" ". See online help for details.")) __declspec(dllimport) double __cdecl jn( int _X, double _Y);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y0" ". See online help for details.")) __declspec(dllimport) double __cdecl y0( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_y1" ". See online help for details.")) __declspec(dllimport) double __cdecl y1( double _X);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_yn" ". See online help for details.")) __declspec(dllimport) double __cdecl yn( int _X, double _Y);





}

extern "C++" {

template<class _Ty> inline
        _Ty _Pow_int(_Ty _X, int _Y) throw()
        {unsigned int _N;
        if (_Y >= 0)
                _N = (unsigned int)_Y;
        else
                _N = (unsigned int)(-_Y);
        for (_Ty _Z = _Ty(1); ; _X *= _X)
                {if ((_N & 1) != 0)
                        _Z *= _X;
                if ((_N >>= 1) == 0)
                        return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

inline double __cdecl abs( double _X) throw()
        {return (fabs(_X)); }
inline double __cdecl pow( double _X, int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl abs( float _X) throw()
        {return (fabsf(_X)); }
inline float __cdecl acos( float _X) throw()
        {return (acosf(_X)); }
inline float __cdecl acosh( float _X) throw()
        {return (acoshf(_X)); }
inline float __cdecl asin( float _X) throw()
        {return (asinf(_X)); }
inline float __cdecl asinh( float _X) throw()
        {return (asinhf(_X)); }
inline float __cdecl atan( float _X) throw()
        {return (atanf(_X)); }
inline float __cdecl atanh( float _X) throw()
        {return (atanhf(_X)); }
inline float __cdecl atan2( float _Y, float _X) throw()
        {return (atan2f(_Y, _X)); }
inline float __cdecl cbrt( float _X) throw()
        {return (cbrtf(_X)); }
inline float __cdecl ceil( float _X) throw()
        {return (ceilf(_X)); }
inline float __cdecl copysign( float _X, float _Y) throw()
        {return (copysignf(_X, _Y)); }
inline float __cdecl cos( float _X) throw()
        {return (cosf(_X)); }
inline float __cdecl cosh( float _X) throw()
        {return (coshf(_X)); }
inline float __cdecl erf( float _X) throw()
        {return (erff(_X)); }
inline float __cdecl erfc( float _X) throw()
        {return (erfcf(_X)); }
inline float __cdecl exp( float _X) throw()
        {return (expf(_X)); }
inline float __cdecl exp2( float _X) throw()
        {return (exp2f(_X)); }
inline float __cdecl expm1( float _X) throw()
        {return (expm1f(_X)); }
inline float __cdecl fabs( float _X) throw()
        {return (fabsf(_X)); }
inline float __cdecl fdim( float _X, float _Y) throw()
        {return (fdimf(_X, _Y)); }
inline float __cdecl floor( float _X) throw()
        {return (floorf(_X)); }
inline float __cdecl fma( float _X, float _Y, float _Z) throw()
        {return (fmaf(_X, _Y, _Z)); }
inline float __cdecl fmax( float _X, float _Y) throw()
        {return (fmaxf(_X, _Y)); }
inline float __cdecl fmin( float _X, float _Y) throw()
        {return (fminf(_X, _Y)); }
inline float __cdecl fmod( float _X, float _Y) throw()
        {return (fmodf(_X, _Y)); }
inline float __cdecl frexp( float _X, int * _Y) throw()
        {return (frexpf(_X, _Y)); }
inline float __cdecl hypot( float _X, float _Y) throw()
        {return (hypotf(_X, _Y)); }
inline int __cdecl ilogb( float _X) throw()
        {return (ilogbf(_X)); }
inline float __cdecl ldexp( float _X, int _Y) throw()
        {return (ldexpf(_X, _Y)); }
inline float __cdecl lgamma( float _X) throw()
        {return (lgammaf(_X)); }
inline long long __cdecl llrint( float _X) throw()
        {return (llrintf(_X)); }
inline long long __cdecl llround( float _X) throw()
        {return (llroundf(_X)); }
inline float __cdecl log( float _X) throw()
        {return (logf(_X)); }
inline float __cdecl log10( float _X) throw()
        {return (log10f(_X)); }
inline float __cdecl log1p( float _X) throw()
        {return (log1pf(_X)); }
inline float __cdecl log2( float _X) throw()
        {return (log2f(_X)); }
inline float __cdecl logb( float _X) throw()
        {return (logbf(_X)); }
inline long __cdecl lrint( float _X) throw()
        {return (lrintf(_X)); }
inline long __cdecl lround( float _X) throw()
        {return (lroundf(_X)); }
inline float __cdecl modf( float _X, float * _Y) throw()
        {return (modff(_X, _Y)); }
inline float __cdecl nearbyint( float _X) throw()
        {return (nearbyintf(_X)); }
inline float __cdecl nextafter( float _X, float _Y) throw()
        {return (nextafterf(_X, _Y)); }
inline float __cdecl nexttoward( float _X, long double _Y) throw()
        {return (nexttowardf(_X, _Y)); }
inline float __cdecl pow( float _X, float _Y) throw()
        {return (powf(_X, _Y)); }
inline float __cdecl pow( float _X, int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl remainder( float _X, float _Y) throw()
        {return (remainderf(_X, _Y)); }
inline float __cdecl remquo( float _X, float _Y, int *_Z) throw()
        {return (remquof(_X, _Y, _Z)); }
inline float __cdecl rint( float _X) throw()
        {return (rintf(_X)); }
inline float __cdecl round( float _X) throw()
        {return (roundf(_X)); }
inline float __cdecl scalbln( float _X, long _Y) throw()
        {return (scalblnf(_X, _Y)); }
inline float __cdecl scalbn( float _X, int _Y) throw()
        {return (scalbnf(_X, _Y)); }
inline float __cdecl sin( float _X) throw()
        {return (sinf(_X)); }
inline float __cdecl sinh( float _X) throw()
        {return (sinhf(_X)); }
inline float __cdecl sqrt( float _X) throw()
        {return (sqrtf(_X)); }
inline float __cdecl tan( float _X) throw()
        {return (tanf(_X)); }
inline float __cdecl tanh( float _X) throw()
        {return (tanhf(_X)); }
inline float __cdecl tgamma( float _X) throw()
        {return (tgammaf(_X)); }
inline float __cdecl trunc( float _X) throw()
        {return (truncf(_X)); }
inline long double __cdecl abs( long double _X) throw()
        {return (fabsl(_X)); }
inline long double __cdecl acos( long double _X) throw()
        {return (acosl(_X)); }
inline long double __cdecl acosh( long double _X) throw()
        {return (acoshl(_X)); }
inline long double __cdecl asin( long double _X) throw()
        {return (asinl(_X)); }
inline long double __cdecl asinh( long double _X) throw()
        {return (asinhl(_X)); }
inline long double __cdecl atan( long double _X) throw()
        {return (atanl(_X)); }
inline long double __cdecl atanh( long double _X) throw()
        {return (atanhl(_X)); }
inline long double __cdecl atan2( long double _Y, long double _X) throw()
        {return (atan2l(_Y, _X)); }
inline long double __cdecl cbrt( long double _X) throw()
        {return (cbrtl(_X)); }
inline long double __cdecl ceil( long double _X) throw()
        {return (ceill(_X)); }
inline long double __cdecl copysign( long double _X, long double _Y) throw()
        {return (copysignl(_X, _Y)); }
inline long double __cdecl cos( long double _X) throw()
        {return (cosl(_X)); }
inline long double __cdecl cosh( long double _X) throw()
        {return (coshl(_X)); }
inline long double __cdecl erf( long double _X) throw()
        {return (erfl(_X)); }
inline long double __cdecl erfc( long double _X) throw()
        {return (erfcl(_X)); }
inline long double __cdecl exp( long double _X) throw()
        {return (expl(_X)); }
inline long double __cdecl exp2( long double _X) throw()
        {return (exp2l(_X)); }
inline long double __cdecl expm1( long double _X) throw()
        {return (expm1l(_X)); }
inline long double __cdecl fabs( long double _X) throw()
        {return (fabsl(_X)); }
inline long double __cdecl fdim( long double _X, long double _Y) throw()
        {return (fdiml(_X, _Y)); }
inline long double __cdecl floor( long double _X) throw()
        {return (floorl(_X)); }
inline long double __cdecl fma( long double _X, long double _Y, long double _Z) throw()
        {return (fmal(_X, _Y, _Z)); }
inline long double __cdecl fmax( long double _X, long double _Y) throw()
        {return (fmaxl(_X, _Y)); }
inline long double __cdecl fmin( long double _X, long double _Y) throw()
        {return (fminl(_X, _Y)); }
inline long double __cdecl fmod( long double _X, long double _Y) throw()
        {return (fmodl(_X, _Y)); }
inline long double __cdecl frexp( long double _X, int * _Y) throw()
        {return (frexpl(_X, _Y)); }
inline long double __cdecl hypot( long double _X, long double _Y) throw()
        {return (hypotl(_X, _Y)); }
inline int __cdecl ilogb( long double _X) throw()
        {return (ilogbl(_X)); }
inline long double __cdecl ldexp( long double _X, int _Y) throw()
        {return (ldexpl(_X, _Y)); }
inline long double __cdecl lgamma( long double _X) throw()
        {return (lgammal(_X)); }
inline long long __cdecl llrint( long double _X) throw()
        {return (llrintl(_X)); }
inline long long __cdecl llround( long double _X) throw()
        {return (llroundl(_X)); }
inline long double __cdecl log( long double _X) throw()
        {return (logl(_X)); }
inline long double __cdecl log10( long double _X) throw()
        {return (log10l(_X)); }
inline long double __cdecl log1p( long double _X) throw()
        {return (log1pl(_X)); }
inline long double __cdecl log2( long double _X) throw()
        {return (log2l(_X)); }
inline long double __cdecl logb( long double _X) throw()
        {return (logbl(_X)); }
inline long __cdecl lrint( long double _X) throw()
        {return (lrintl(_X)); }
inline long __cdecl lround( long double _X) throw()
        {return (lroundl(_X)); }
inline long double __cdecl modf( long double _X, long double * _Y) throw()
        {return (modfl(_X, _Y)); }
inline long double __cdecl nearbyint( long double _X) throw()
        {return (nearbyintl(_X)); }
inline long double __cdecl nextafter( long double _X, long double _Y) throw()
        {return (nextafterl(_X, _Y)); }
inline long double __cdecl nexttoward( long double _X, long double _Y) throw()
        {return (nexttowardl(_X, _Y)); }
inline long double __cdecl pow( long double _X, long double _Y) throw()
        {return (powl(_X, _Y)); }
inline long double __cdecl pow( long double _X, int _Y) throw()
        {return (_Pow_int(_X, _Y)); }
inline long double __cdecl remainder( long double _X, long double _Y) throw()
        {return (remainderl(_X, _Y)); }
inline long double __cdecl remquo( long double _X, long double _Y, int *_Z) throw()
        {return (remquol(_X, _Y, _Z)); }
inline long double __cdecl rint( long double _X) throw()
        {return (rintl(_X)); }
inline long double __cdecl round( long double _X) throw()
        {return (roundl(_X)); }
inline long double __cdecl scalbln( long double _X, long _Y) throw()
        {return (scalblnl(_X, _Y)); }
inline long double __cdecl scalbn( long double _X, int _Y) throw()
        {return (scalbnl(_X, _Y)); }
inline long double __cdecl sin( long double _X) throw()
        {return (sinl(_X)); }
inline long double __cdecl sinh( long double _X) throw()
        {return (sinhl(_X)); }
inline long double __cdecl sqrt( long double _X) throw()
        {return (sqrtl(_X)); }
inline long double __cdecl tan( long double _X) throw()
        {return (tanl(_X)); }
inline long double __cdecl tanh( long double _X) throw()
        {return (tanhl(_X)); }
inline long double __cdecl tgamma( long double _X) throw()
        {return (tgammal(_X)); }
inline long double __cdecl trunc( long double _X) throw()
        {return (truncl(_X)); }

}


#pragma pack(pop)
#line 16 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cmath"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h"







#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _T1,
 class _Ret>
 struct unary_function;


template<class _T1,
 class _T2,
 class _Ret>
 struct binary_function;


struct _Nil
 {
 };
static _Nil _Nil_obj;


template<class _Ty,
 _Ty _Val>
 struct integral_constant
 {
 static const _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant<_Ty, _Val> type;

 operator value_type() const
  {
  return (value);
  }
 };

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;


template<bool>
 struct _Cat_base
  : false_type
 {
 };

template<>
 struct _Cat_base<true>
  : true_type
 {
 };


template<bool _Test,
 class _Ty = void>
 struct enable_if
 {
 };

template<class _Ty>
 struct enable_if<true, _Ty>
 {
 typedef _Ty type;
 };


template<bool _Test,
 class _Ty1,
 class _Ty2>
 struct conditional
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct conditional<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };


template<class _Ty1, class _Ty2>
 struct is_same
  : false_type
 {
 };

template<class _Ty1>
 struct is_same<_Ty1, _Ty1>
  : true_type
 {
 };


template<class _Ty>
 struct remove_const
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_const<const _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_const<const _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_volatile
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_volatile<volatile _Ty[]>
 {
 typedef _Ty type[];
 };

template<class _Ty, unsigned int _Nx>
 struct remove_volatile<volatile _Ty[_Nx]>
 {
 typedef _Ty type[_Nx];
 };


template<class _Ty>
 struct remove_cv
 {
 typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
  type;
 };


template<class _Ty>
 struct _Is_integral
  : false_type
 {
 };

template<>
 struct _Is_integral<bool>
  : true_type
 {
 };

template<>
 struct _Is_integral<char>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned char>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed char>
  : true_type
 {
 };


template<>
 struct _Is_integral<wchar_t>
  : true_type
 {
 };


template<>
 struct _Is_integral<unsigned short>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed short>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned int>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed int>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned long>
  : true_type
 {
 };

template<>
 struct _Is_integral<signed long>
  : true_type
 {
 };
#line 253 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
template<>
 struct _Is_integral<__int64>
  : true_type
 {
 };

template<>
 struct _Is_integral<unsigned __int64>
  : true_type
 {
 };



template<class _Ty>
 struct is_integral
  : _Is_integral<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct _Is_floating_point
  : false_type
 {
 };

template<>
 struct _Is_floating_point<float>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<double>
  : true_type
 {
 };

template<>
 struct _Is_floating_point<long double>
  : true_type
 {
 };


template<class _Ty>
 struct is_floating_point
  : _Is_floating_point<typename remove_cv<_Ty>::type>
 {
 };

template<class _Ty>
 struct _Is_numeric
  : _Cat_base<is_integral<_Ty>::value
   || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 struct remove_reference
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_reference<_Ty&&>
 {
 typedef _Ty type;
 };


template<class _Tgt,
 class _Src>
 struct _Copy_cv
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const _Src>
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef const _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, volatile _Src>
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef volatile _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, const volatile _Src>
 {
 typedef typename remove_reference<_Tgt>::type _Tgtx;
 typedef const volatile _Tgtx& type;
 };

template<class _Tgt,
 class _Src>
 struct _Copy_cv<_Tgt, _Src&>
 {
 typedef typename _Copy_cv<_Tgt, _Src>::type type;
 };


struct _Wrap_int
 {
 _Wrap_int(int)
  {
  }
 };

template<class _Ty>
 struct _Identity
 {
 typedef _Ty type;
 };
#line 419 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
template<class _Ty>
 struct _Has_result_type
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };
}

#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
template<class _Ty>
 struct _Promote_to_float
 {
 typedef typename conditional<is_integral<_Ty>::value,
  double, _Ty>::type type;
 };

template<class _Ty1,
 class _Ty2>
 struct _Common_float_type
 {
 typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
 typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
 typedef typename conditional<is_same<_Ty1f, long double>::value
  || is_same<_Ty2f, long double>::value, long double,
  typename conditional<is_same<_Ty1f, double>::value
   || is_same<_Ty2f, double>::value, double,
   float>::type>::type type;
 };
}
#line 75 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl pow( double, double);
float __cdecl pow( float, float) throw ();
long double __cdecl pow( long double, long double) throw ();

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value
  && ::std:: _Is_numeric<_Ty2>::value,
  typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
 pow(const _Ty1 _Left, const _Ty2 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (:: pow(type(_Left), type(_Right)));
 }


extern "C" double __cdecl acos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C" double __cdecl asin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C" double __cdecl atan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C" double __cdecl atan2( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl ceil( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C" double __cdecl cos( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C" double __cdecl cosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C" double __cdecl exp( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl floor( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C" double __cdecl fmod( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl frexp( double, int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left, int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl ldexp( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left, int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C" double __cdecl log( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C" double __cdecl log10( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C" double __cdecl sin( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C" double __cdecl sinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C" double __cdecl sqrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C" double __cdecl tan( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C" double __cdecl tanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }
#line 124 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h"
inline float _Fma(float _Left, float _Middle, float _Right)
 {
 return (:: fmaf(_Left, _Middle, _Right));
 }

inline double _Fma(double _Left, double _Middle, double _Right)
 {
 return (:: fma(_Left, _Middle, _Right));
 }

inline long double _Fma(long double _Left, long double _Middle, long double _Right)
 {
 return (:: fmal(_Left, _Middle, _Right));
 }

template<class _Ty1,
 class _Ty2,
 class _Ty3> inline
 typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
 fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
 {
 typedef typename ::std:: _Common_float_type<_Ty1,
  typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
 return (_Fma((type)_Left, (type)_Middle, (type)_Right));
 }


inline float _Remquo(float _Left, float _Right, int *_Pquo)
 {
 return (:: remquof(_Left, _Right, _Pquo));
 }

inline double _Remquo(double _Left, double _Right, int *_Pquo)
 {
 return (:: remquo(_Left, _Right, _Pquo));
 }

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
 {
 return (:: remquol(_Left, _Right, _Pquo));
 }

template<class _Ty1,
 class _Ty2> inline
 typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
 remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
 {
 typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
 return (_Remquo((type)_Left, (type)_Right, _Pquo));
 }

extern "C" __declspec(dllimport) double __cdecl acosh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl asinh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl atanh( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl cbrt( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl copysign( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl erf( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl erfc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl expm1( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl exp2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }

extern "C" __declspec(dllimport) double __cdecl fdim( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl fmax( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl fmin( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C" double __cdecl hypot( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) int __cdecl ilogb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl lgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C" __declspec(dllimport) long long __cdecl llround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log1p( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl log2( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl logb( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lrint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C" __declspec(dllimport) long __cdecl lround( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nearbyint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl nextafter( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C" __declspec(dllimport) double __cdecl nexttoward( double, long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left, long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl remainder( double, double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: _Is_numeric<_Ty1>::value && ::std:: _Is_numeric<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C" __declspec(dllimport) double __cdecl rint( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl round( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl scalbln( double, long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left, long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl scalbn( double, int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left, int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C" __declspec(dllimport) double __cdecl tgamma( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C" __declspec(dllimport) double __cdecl trunc( double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }




#pragma warning(pop)
#pragma pack(pop)
#line 18 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cmath"




namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdio"
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdio"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"






#pragma pack(push,8)


extern "C" {
#line 63 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
struct _iobuf {
        char *_ptr;
        int _cnt;
        char *_base;
        int _flag;
        int _file;
        int _charbuf;
        int _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;
#line 137 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
__declspec(dllimport) FILE * __cdecl __iob_func(void);






typedef __int64 fpos_t;
#line 175 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
               __declspec(dllimport) int __cdecl _filbuf( FILE * _File );
                   __declspec(dllimport) int __cdecl _flsbuf( int _Ch, FILE * _File);

               __declspec(dllimport) FILE * __cdecl _fsopen( const char * _Filename, const char * _Mode, int _ShFlag);

__declspec(dllimport) void __cdecl clearerr( FILE * _File);

                   __declspec(dllimport) errno_t __cdecl clearerr_s( FILE * _File );

                   __declspec(dllimport) int __cdecl fclose( FILE * _File);
                   __declspec(dllimport) int __cdecl _fcloseall(void);

               __declspec(dllimport) FILE * __cdecl _fdopen( int _FileHandle, const char * _Mode);

               __declspec(dllimport) int __cdecl feof( FILE * _File);
               __declspec(dllimport) int __cdecl ferror( FILE * _File);
                   __declspec(dllimport) int __cdecl fflush( FILE * _File);
                   __declspec(dllimport) int __cdecl fgetc( FILE * _File);
                   __declspec(dllimport) int __cdecl _fgetchar(void);
                   __declspec(dllimport) int __cdecl fgetpos( FILE * _File , fpos_t * _Pos);
                   __declspec(dllimport) char * __cdecl fgets( char * _Buf, int _MaxCount, FILE * _File);

               __declspec(dllimport) int __cdecl _fileno( FILE * _File);






               __declspec(dllimport) char * __cdecl _tempnam( const char * _DirName, const char * _FilePrefix);





                   __declspec(dllimport) int __cdecl _flushall(void);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl fopen( const char * _Filename, const char * _Mode);

                   __declspec(dllimport) errno_t __cdecl fopen_s( FILE ** _File, const char * _Filename, const char * _Mode);

                   __declspec(dllimport) int __cdecl fprintf( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl fprintf_s( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl fputc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl _fputchar( int _Ch);
                   __declspec(dllimport) int __cdecl fputs( const char * _Str, FILE * _File);
                   __declspec(dllimport) size_t __cdecl fread( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);

                   __declspec(dllimport) size_t __cdecl fread_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl freopen( const char * _Filename, const char * _Mode, FILE * _File);

                   __declspec(dllimport) errno_t __cdecl freopen_s( FILE ** _File, const char * _Filename, const char * _Mode, FILE * _OldFile);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl fscanf( FILE * _File, const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _fscanf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(dllimport) int __cdecl fscanf_s( FILE * _File, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _fscanf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl fsetpos( FILE * _File, const fpos_t * _Pos);
                   __declspec(dllimport) int __cdecl fseek( FILE * _File, long _Offset, int _Origin);
               __declspec(dllimport) long __cdecl ftell( FILE * _File);

                   __declspec(dllimport) int __cdecl _fseeki64( FILE * _File, __int64 _Offset, int _Origin);
               __declspec(dllimport) __int64 __cdecl _ftelli64( FILE * _File);

                   __declspec(dllimport) size_t __cdecl fwrite( const void * _Str, size_t _Size, size_t _Count, FILE * _File);
               __declspec(dllimport) int __cdecl getc( FILE * _File);
               __declspec(dllimport) int __cdecl getchar(void);
               __declspec(dllimport) int __cdecl _getmaxstdio(void);

__declspec(dllimport) char * __cdecl gets_s( char * _Buf, rsize_t _Size);

extern "C++" { template <size_t _Size> inline char * __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "gets_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl gets( char *_Buffer);
               int __cdecl _getw( FILE * _File);


__declspec(dllimport) void __cdecl perror( const char * _ErrMsg);


                   __declspec(dllimport) int __cdecl _pclose( FILE * _File);
               __declspec(dllimport) FILE * __cdecl _popen( const char * _Command, const char * _Mode);

                   __declspec(dllimport) int __cdecl printf( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl printf_s( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl putc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl putchar( int _Ch);
                   __declspec(dllimport) int __cdecl puts( const char * _Str);
                   __declspec(dllimport) int __cdecl _putw( int _Word, FILE * _File);


__declspec(dllimport) int __cdecl remove( const char * _Filename);
               __declspec(dllimport) int __cdecl rename( const char * _OldFilename, const char * _NewFilename);
__declspec(dllimport) int __cdecl _unlink( const char * _Filename);

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_unlink" ". See online help for details.")) __declspec(dllimport) int __cdecl unlink( const char * _Filename);


__declspec(dllimport) void __cdecl rewind( FILE * _File);
                   __declspec(dllimport) int __cdecl _rmtmp(void);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl scanf( const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _scanf_l( const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(dllimport) int __cdecl scanf_s( const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _scanf_s_l( const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl setbuf( FILE * _File, char * _Buffer);
                   __declspec(dllimport) int __cdecl _setmaxstdio( int _Max);
                   __declspec(dllimport) unsigned int __cdecl _set_output_format( unsigned int _Format);
                   __declspec(dllimport) unsigned int __cdecl _get_output_format(void);
                   __declspec(dllimport) int __cdecl setvbuf( FILE * _File, char * _Buf, int _Mode, size_t _Size);
                   __declspec(dllimport) int __cdecl _snprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, ...);
extern "C++" {
#line 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(push)
#line 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
;
#line 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(disable: 4793)
#line 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; template <size_t _Size> inline int __cdecl _snprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _ArgList); }
#line 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(pop)
#line 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; }

                   __declspec(dllimport) int __cdecl sprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, ...);

extern "C++" {
#line 302 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(push)
#line 302 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
;
#line 302 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(disable: 4793)
#line 302 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; template <size_t _Size> inline int __cdecl sprintf_s(char (&_Dest)[_Size], const char * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vsprintf_s(_Dest, _Size, _Format, _ArgList); }
#line 302 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(pop)
#line 302 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; }
               __declspec(dllimport) int __cdecl _scprintf( const char * _Format, ...);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl sscanf( const char * _Src, const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _sscanf_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(dllimport) int __cdecl sscanf_s( const char * _Src, const char * _Format, ...);

                   __declspec(dllimport) int __cdecl _sscanf_s_l( const char * _Src, const char * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snscanf( const char * _Src, size_t _MaxCount, const char * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snscanf_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snscanf_s( const char * _Src, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _snscanf_s_l( const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl tmpfile(void);

                   __declspec(dllimport) errno_t __cdecl tmpfile_s( FILE ** _File);
                   __declspec(dllimport) errno_t __cdecl tmpnam_s( char * _Buf, rsize_t _Size);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(char (&_Buf)[_Size]) throw() { return tmpnam_s(_Buf, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl tmpnam( char *_Buffer);
                   __declspec(dllimport) int __cdecl ungetc( int _Ch, FILE * _File);
                   __declspec(dllimport) int __cdecl vfprintf( FILE * _File, const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfscanf( FILE * _File, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vfprintf_s( FILE * _File, const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfscanf_s( FILE * _File, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vprintf( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vscanf( const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vprintf_s( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vscanf_s( const char * _Format, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl vsnprintf( char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vsnprintf_s( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, va_list _Args) throw() { return vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }

                   __declspec(dllimport) int __cdecl _vsnprintf_s( char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Dest)[_Size], size_t _MaxCount, const char * _Format, va_list _Args) throw() { return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable: 4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snprintf( char *_Dest, size_t _Count, const char * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnprintf( char *_Dest, size_t _Count, const char * _Format, va_list _Args);
#pragma warning(pop)

__declspec(dllimport) int __cdecl vsprintf_s( char * _DstBuf, size_t _SizeInBytes, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(char (&_Dest)[_Size], const char * _Format, va_list _Args) throw() { return vsprintf_s(_Dest, _Size, _Format, _Args); } }
                   __declspec(dllimport) int __cdecl vsscanf_s(const char * _Src, const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(const char (&_Src)[_Size], const char * _Format, va_list _Args) throw() { return vsscanf_s(_Src, _Size, _Format, _Args); } }

#pragma warning(push)
#pragma warning(disable: 4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl sprintf( char *_Dest, const char * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl vsprintf( char *_Dest, const char * _Format, va_list _Args);
                   __declspec(dllimport) int __cdecl vsscanf(const char * _srcBuf, const char * _Format, va_list _ArgList);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl _vscprintf( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _snprintf_c( char * _DstBuf, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _vsnprintf_c( char *_DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fprintf_p( FILE * _File, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _printf_p( const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _sprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, ...);
                   __declspec(dllimport) int __cdecl _vfprintf_p( FILE * _File, const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_p( const char * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_p( char * _Dst, size_t _MaxCount, const char * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _scprintf_p( const char * _Format, ...);
               __declspec(dllimport) int __cdecl _vscprintf_p( const char * _Format, va_list _ArgList);
__declspec(dllimport) int __cdecl _set_printf_count_output( int _Value);
__declspec(dllimport) int __cdecl _get_printf_count_output(void);

                   __declspec(dllimport) int __cdecl _printf_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _printf_p_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _printf_s_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vprintf_s_l( const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vfprintf_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfprintf_p_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfprintf_s_l( FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _sprintf_l( char * _DstBuf, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _sprintf_p_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _sprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsprintf_l( char * _DstBuf, const char * _Format, _locale_t, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_p_l( char * _DstBuf, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsprintf_s_l( char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _scprintf_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _scprintf_p_l( const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vscprintf_l( const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vscprintf_p_l( const char * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snprintf_c_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnprintf_l( char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnprintf_c_l( char * _DstBuf, size_t _MaxCount, const char *, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnprintf_s_l( char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char* _Format, _locale_t _Locale, va_list _ArgList);
#line 415 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
               __declspec(dllimport) FILE * __cdecl _wfsopen( const wchar_t * _Filename, const wchar_t * _Mode, int _ShFlag);

                   __declspec(dllimport) wint_t __cdecl fgetwc( FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fgetwchar(void);
                   __declspec(dllimport) wint_t __cdecl fputwc( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fputwchar( wchar_t _Ch);
               __declspec(dllimport) wint_t __cdecl getwc( FILE * _File);
               __declspec(dllimport) wint_t __cdecl getwchar(void);
                   __declspec(dllimport) wint_t __cdecl putwc( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl putwchar( wchar_t _Ch);
                   __declspec(dllimport) wint_t __cdecl ungetwc( wint_t _Ch, FILE * _File);

                   __declspec(dllimport) wchar_t * __cdecl fgetws( wchar_t * _Dst, int _SizeInWords, FILE * _File);
                   __declspec(dllimport) int __cdecl fputws( const wchar_t * _Str, FILE * _File);
                   __declspec(dllimport) wchar_t * __cdecl _getws_s( wchar_t * _Str, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline wchar_t * __cdecl _getws_s(wchar_t (&_String)[_Size]) throw() { return _getws_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_getws_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _getws( wchar_t *_String);
                   __declspec(dllimport) int __cdecl _putws( const wchar_t * _Str);

                   __declspec(dllimport) int __cdecl fwprintf( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl fwprintf_s( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl wprintf( const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl wprintf_s( const wchar_t * _Format, ...);

               __declspec(dllimport) int __cdecl _scwprintf( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl vfwprintf( FILE * _File, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfwscanf( FILE * _File, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vfwprintf_s( FILE * _File, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vfwscanf_s( FILE * _File, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vwprintf( const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vwscanf( const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl vwprintf_s( const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vwscanf_s( const wchar_t * _Format, va_list _ArgList);



__declspec(dllimport) int __cdecl swprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, ...);

extern "C++" {
#line 459 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(push)
#line 459 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
;
#line 459 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(disable: 4793)
#line 459 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; template <size_t _Size> inline int __cdecl swprintf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return vswprintf_s(_Dest, _Size, _Format, _ArgList); }
#line 459 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(pop)
#line 459 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; }

__declspec(dllimport) int __cdecl vswprintf_s( wchar_t * _Dst, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl vswscanf_s(const wchar_t * _Src, const wchar_t * _Format, va_list _ArgList);

extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, va_list _Args) throw() { return vswprintf_s(_Dest, _Size, _Format, _Args); } }
extern "C++" { template <size_t _Size> inline int __cdecl vswscanf_s(wchar_t (&_Dest)[_Size], const wchar_t * _Format, va_list _Args) throw() { return vswscanf_s(_Dest, _Size, _Format, _Args); } }
                   __declspec(dllimport) int __cdecl vswscanf(const wchar_t * _srcBuf, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _swprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_c( wchar_t * _DstBuf, size_t _SizeInWords, const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _snwprintf_s( wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const wchar_t * _Format, ...);
extern "C++" {
#line 472 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(push)
#line 472 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
;
#line 472 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(disable: 4793)
#line 472 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; template <size_t _Size> inline int __cdecl _snwprintf_s(wchar_t (&_Dest)[_Size], size_t _Count, const wchar_t * _Format, ...) throw() { va_list _ArgList; ( _ArgList = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) ); return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _ArgList); }
#line 472 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(pop)
#line 472 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
; }
                   __declspec(dllimport) int __cdecl _vsnwprintf_s( wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(wchar_t (&_Dest)[_Size], size_t _Count, const wchar_t * _Format, va_list _Args) throw() { return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable: 4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnwprintf( wchar_t *_Dest, size_t _Count, const wchar_t * _Format, va_list _Args);
#pragma warning(pop)

 __declspec(dllimport) int __cdecl _fwprintf_p( FILE * _File, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _wprintf_p( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vfwprintf_p( FILE * _File, const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_p( const wchar_t * _Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _swprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_p( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _scwprintf_p( const wchar_t * _Format, ...);
               __declspec(dllimport) int __cdecl _vscwprintf_p( const wchar_t * _Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _wprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _wprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _wprintf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _fwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _fwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vfwprintf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfwprintf_p_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vfwprintf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _swprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _swprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _swprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vswprintf_c_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vswprintf_p_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vswprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

               __declspec(dllimport) int __cdecl _scwprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(dllimport) int __cdecl _scwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(dllimport) int __cdecl _vscwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _vsnwprintf_l( wchar_t * _DstBuf, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vsnwprintf_s_l( wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
#line 531 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996 4793)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _swprintf( wchar_t *_Dest, const wchar_t * _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _vswprintf( wchar_t *_Dest, const wchar_t * _Format, va_list _Args);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __swprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __vswprintf_l( wchar_t *_Dest, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#pragma warning(pop)



#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\swprintf.inl"
#line 34 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\swprintf.inl"
#pragma warning(push)
#pragma warning(disable: 4793 4412)
static __inline int swprintf( wchar_t * _String, size_t _Count, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4412)
static __inline int __cdecl vswprintf( wchar_t * _String, size_t _Count, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap);
}
#pragma warning(pop)




#pragma warning(push)
#pragma warning(disable: 4793 4412)
static __inline int _swprintf_l( wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4412)
static __inline int __cdecl _vswprintf_l( wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#pragma warning(pop)


#pragma warning(push)
#pragma warning(disable: 4996)

#pragma warning(push)
#pragma warning(disable: 4793 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int swprintf( wchar_t * _String, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Format) ) + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = _vswprintf(_String, _Format, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int __cdecl vswprintf( wchar_t * _String, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf(_String, _Format, _Ap);
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4793 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int _swprintf_l( wchar_t * _String, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    ( _Arglist = (va_list)( &reinterpret_cast<const char &>(_Plocinfo) ) + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) ) );
    int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning(pop)

#pragma warning(push)
#pragma warning(disable: 4141)
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline int __cdecl _vswprintf_l( wchar_t * _String, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return __vswprintf_l(_String, _Format, _Plocinfo, _Ap);
}
#pragma warning(pop)

#pragma warning(pop)
#line 538 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#line 555 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
               __declspec(dllimport) wchar_t * __cdecl _wtempnam( const wchar_t * _Directory, const wchar_t * _FilePrefix);





               __declspec(dllimport) int __cdecl _vscwprintf( const wchar_t * _Format, va_list _ArgList);
               __declspec(dllimport) int __cdecl _vscwprintf_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl fwscanf( FILE * _File, const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _fwscanf_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable: 6530)

 __declspec(dllimport) int __cdecl fwscanf_s( FILE * _File, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _fwscanf_s_l( FILE * _File, const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl swscanf( const wchar_t * _Src, const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _swscanf_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);

                   __declspec(dllimport) int __cdecl swscanf_s( const wchar_t *_Src, const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _swscanf_s_l( const wchar_t * _Src, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwscanf( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _snwscanf_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _snwscanf_s( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _snwscanf_s_l( const wchar_t * _Src, size_t _MaxCount, const wchar_t * _Format, _locale_t _Locale, ...);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl wscanf( const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wscanf_l( const wchar_t * _Format, _locale_t _Locale, ...);

                   __declspec(dllimport) int __cdecl wscanf_s( const wchar_t * _Format, ...);

                   __declspec(dllimport) int __cdecl _wscanf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
#pragma warning(pop)

 __declspec(dllimport) FILE * __cdecl _wfdopen( int _FileHandle , const wchar_t * _Mode);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl _wfopen( const wchar_t * _Filename, const wchar_t * _Mode);
                   __declspec(dllimport) errno_t __cdecl _wfopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) FILE * __cdecl _wfreopen( const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);
                   __declspec(dllimport) errno_t __cdecl _wfreopen_s( FILE ** _File, const wchar_t * _Filename, const wchar_t * _Mode, FILE * _OldFile);



__declspec(dllimport) void __cdecl _wperror( const wchar_t * _ErrMsg);


               __declspec(dllimport) FILE * __cdecl _wpopen( const wchar_t *_Command, const wchar_t * _Mode);

__declspec(dllimport) int __cdecl _wremove( const wchar_t * _Filename);
                   __declspec(dllimport) errno_t __cdecl _wtmpnam_s( wchar_t * _DstBuf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wtmpnam( wchar_t *_Buffer);

                   __declspec(dllimport) wint_t __cdecl _fgetwc_nolock( FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _fputwc_nolock( wchar_t _Ch, FILE * _File);
                   __declspec(dllimport) wint_t __cdecl _ungetwc_nolock( wint_t _Ch, FILE * _File);
#line 621 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
inline wint_t __cdecl getwchar()
        {return (fgetwc((&__iob_func()[0]))); }
inline wint_t __cdecl putwchar( wchar_t _C)
        {return (fputwc(_C, (&__iob_func()[1]))); }
#line 670 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
__declspec(dllimport) void __cdecl _lock_file( FILE * _File);
__declspec(dllimport) void __cdecl _unlock_file( FILE * _File);

                   __declspec(dllimport) int __cdecl _fclose_nolock( FILE * _File);
                   __declspec(dllimport) int __cdecl _fflush_nolock( FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fread_nolock( void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fread_nolock_s( void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File);
                   __declspec(dllimport) int __cdecl _fseek_nolock( FILE * _File, long _Offset, int _Origin);
               __declspec(dllimport) long __cdecl _ftell_nolock( FILE * _File);
                   __declspec(dllimport) int __cdecl _fseeki64_nolock( FILE * _File, __int64 _Offset, int _Origin);
               __declspec(dllimport) __int64 __cdecl _ftelli64_nolock( FILE * _File);
                   __declspec(dllimport) size_t __cdecl _fwrite_nolock( const void * _DstBuf, size_t _Size, size_t _Count, FILE * _File);
                   __declspec(dllimport) int __cdecl _ungetc_nolock( int _Ch, FILE * _File);
#line 709 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tempnam" ". See online help for details.")) __declspec(dllimport) char * __cdecl tempnam( const char * _Directory, const char * _FilePrefix);





                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int __cdecl fcloseall(void);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fdopen" ". See online help for details.")) __declspec(dllimport) FILE * __cdecl fdopen( int _FileHandle, const char * _Format);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fgetchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fgetchar(void);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fileno" ". See online help for details.")) __declspec(dllimport) int __cdecl fileno( FILE * _File);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_flushall" ". See online help for details.")) __declspec(dllimport) int __cdecl flushall(void);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fputchar" ". See online help for details.")) __declspec(dllimport) int __cdecl fputchar( int _Ch);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_getw" ". See online help for details.")) __declspec(dllimport) int __cdecl getw( FILE * _File);
                   __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putw" ". See online help for details.")) __declspec(dllimport) int __cdecl putw( int _Ch, FILE * _File);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_rmtmp" ". See online help for details.")) __declspec(dllimport) int __cdecl rmtmp(void);




}


#pragma pack(pop)
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdio"
#line 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdio"
typedef FILE _iobuf;


namespace std {
using :: _iobuf; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: gets; using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

                            using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdlib"
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdlib"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"







#pragma pack(push,8)


extern "C" {
#line 52 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
typedef int (__cdecl * _onexit_t)(void);
#line 75 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;
#line 102 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()
#line 122 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {



        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()
#line 170 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
__declspec(dllimport) extern int __mb_cur_max;




__declspec(dllimport) int __cdecl ___mb_cur_max_func(void);
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 215 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void);


__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler( _purecall_handler _Handler);
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);



extern "C++"
{





}




typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);


__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler( _invalid_parameter_handler _Handler);
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);





__declspec(dllimport) extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno( int _Value);
errno_t __cdecl _get_errno( int * _Value);


__declspec(dllimport) unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno( unsigned long _Value);
errno_t __cdecl _get_doserrno( unsigned long * _Value);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char ** __cdecl __sys_errlist(void);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int * __cdecl __sys_nerr(void);





__declspec(dllimport) int * __cdecl __p___argc(void);
__declspec(dllimport) char *** __cdecl __p___argv(void);
__declspec(dllimport) wchar_t *** __cdecl __p___wargv(void);
__declspec(dllimport) char *** __cdecl __p__environ(void);
__declspec(dllimport) wchar_t *** __cdecl __p__wenviron(void);


__declspec(dllimport) char ** __cdecl __p__pgmptr(void);
__declspec(dllimport) wchar_t ** __cdecl __p__wpgmptr(void);
#line 288 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
__declspec(dllimport) extern int __argc;
__declspec(dllimport) extern char ** __argv;
__declspec(dllimport) extern wchar_t ** __wargv;
#line 306 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
__declspec(dllimport) extern char ** _environ;
__declspec(dllimport) extern wchar_t ** _wenviron;



__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern char * _pgmptr;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern wchar_t * _wpgmptr;
#line 339 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
errno_t __cdecl _get_pgmptr( char ** _Value);
errno_t __cdecl _get_wpgmptr( wchar_t ** _Value);





__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern int _fmode;






__declspec(dllimport) errno_t __cdecl _set_fmode( int _Mode);
__declspec(dllimport) errno_t __cdecl _get_fmode( int * _PMode);






extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}
#line 376 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl exit( int _Code);

__declspec(dllimport) __declspec(noreturn) void __cdecl _exit( int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);


__declspec(dllimport) unsigned int __cdecl _set_abort_behavior( unsigned int _Flags, unsigned int _Mask);

int __cdecl abs( int _X);
long __cdecl labs( long _X);
long long __cdecl llabs( long long _X);

        __int64 __cdecl _abs64(__int64);
#line 426 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
        int __cdecl atexit(void (__cdecl *)(void));

               __declspec(dllimport) double __cdecl atof( const char *_String);
               __declspec(dllimport) double __cdecl _atof_l( const char *_String, _locale_t _Locale);
               __declspec(dllimport) int __cdecl atoi( const char *_Str);
               __declspec(dllimport) int __cdecl _atoi_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) long __cdecl atol( const char *_Str);
               __declspec(dllimport) long __cdecl _atol_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl atoll( const char *_Str);
               __declspec(dllimport) long long __cdecl _atoll_l( const char *_Str, _locale_t _Locale);



               __declspec(dllimport) void * __cdecl bsearch_s( const void * _Key, const void * _Base,
             rsize_t _NumOfElements, rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);

               __declspec(dllimport) void * __cdecl bsearch( const void * _Key, const void * _Base,
             size_t _NumOfElements, size_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(const void *, const void *));


__declspec(dllimport) void __cdecl qsort_s( void * _Base,
             rsize_t _NumOfElements, rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);

__declspec(dllimport) void __cdecl qsort( void * _Base,
             size_t _NumOfElements, size_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(const void *, const void *));

                       unsigned short __cdecl _byteswap_ushort( unsigned short _Short);
                       unsigned long __cdecl _byteswap_ulong ( unsigned long _Long);
                       unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64 _Int64);
               __declspec(dllimport) div_t __cdecl div( int _Numerator, int _Denominator);


               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl getenv( const char * _VarName);

                   __declspec(dllimport) errno_t __cdecl getenv_s( size_t * _ReturnSize, char * _DstBuf, rsize_t _DstSize, const char * _VarName);

extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(size_t * _ReturnSize, char (&_Dest)[_Size], const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }





                   __declspec(dllimport) errno_t __cdecl _dupenv_s( char **_PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName);






                   __declspec(dllimport) errno_t __cdecl _itoa_s( int _Value, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(int _Value, char (&_Dest)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _itoa(int _Value, char *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _i64toa_s( __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _i64toa( __int64 _Val, char * _DstBuf, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ui64toa_s( unsigned __int64 _Val, char * _DstBuf, size_t _Size, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ui64toa( unsigned __int64 _Val, char * _DstBuf, int _Radix);
               __declspec(dllimport) __int64 __cdecl _atoi64( const char * _String);
               __declspec(dllimport) __int64 __cdecl _atoi64_l( const char * _String, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _strtoi64( const char * _String, char ** _EndPtr, int _Radix);
               __declspec(dllimport) __int64 __cdecl _strtoi64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned __int64 __cdecl _strtoui64( const char * _String, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l( const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) ldiv_t __cdecl ldiv( long _Numerator, long _Denominator);
               __declspec(dllimport) lldiv_t __cdecl lldiv( long long _Numerator, long long _Denominator);

extern "C++"
{
    inline long abs(long _X) throw()
    {
        return labs(_X);
    }
    inline long long abs(long long _X) throw()
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2) throw()
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}

                   __declspec(dllimport) errno_t __cdecl _ltoa_s( long _Val, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(long _Value, char (&_Dest)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _ltoa(long _Value, char *_Dest, int _Radix);
               __declspec(dllimport) int __cdecl mblen( const char * _Ch, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _mblen_l( const char * _Ch, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl _mbstrlen( const char * _Str);
               __declspec(dllimport) size_t __cdecl _mbstrlen_l( const char *_Str, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl _mbstrnlen( const char *_Str, size_t _MaxCount);
               __declspec(dllimport) size_t __cdecl _mbstrnlen_l( const char *_Str, size_t _MaxCount, _locale_t _Locale);
__declspec(dllimport) int __cdecl mbtowc( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes);
__declspec(dllimport) int __cdecl _mbtowc_l( wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl mbstowcs_s( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], const char * _Source, size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, const char * _Source, size_t _MaxCount);

                   __declspec(dllimport) errno_t __cdecl _mbstowcs_s_l( size_t * _PtNumOfCharConverted, wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size], const char * _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l( wchar_t *_Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale);

               __declspec(dllimport) int __cdecl rand(void);




                   __declspec(dllimport) int __cdecl _set_error_mode( int _Mode);

__declspec(dllimport) void __cdecl srand( unsigned int _Seed);
               __declspec(dllimport) double __cdecl strtod( const char * _Str, char ** _EndPtr);
               __declspec(dllimport) double __cdecl _strtod_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) long __cdecl strtol( const char * _Str, char ** _EndPtr, int _Radix );
               __declspec(dllimport) long __cdecl _strtol_l( const char *_Str, char **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl strtoll( const char * _Str, char ** _EndPtr, int _Radix );
               __declspec(dllimport) long long __cdecl _strtoll_l( const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale );
               __declspec(dllimport) unsigned long __cdecl strtoul( const char * _Str, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _Str, char **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long long __cdecl strtoull( const char * _Str, char ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long long __cdecl _strtoull_l( const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long double __cdecl strtold( const char * _Str, char ** _EndPtr);
               __declspec(dllimport) long double __cdecl _strtold_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) float __cdecl strtof( const char * _Str, char ** _EndPtr);
               __declspec(dllimport) float __cdecl _strtof_l( const char * _Str, char ** _EndPtr, _locale_t _Locale);




__declspec(dllimport) int __cdecl system( const char * _Command);



                   __declspec(dllimport) errno_t __cdecl _ultoa_s( unsigned long _Val, char * _DstBuf, size_t _Size, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Dest)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _ultoa(unsigned long _Value, char *_Dest, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int __cdecl wctomb( char * _MbCh, wchar_t _WCh);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int __cdecl _wctomb_l( char * _MbCh, wchar_t _WCh, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl wctomb_s( int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, wchar_t _WCh);

                   __declspec(dllimport) errno_t __cdecl _wctomb_s_l( int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl wcstombs_s( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char (&_Dest)[_Size], const wchar_t * _Source, size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, const wchar_t * _Source, size_t _MaxCount);
                   __declspec(dllimport) errno_t __cdecl _wcstombs_s_l( size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char (&_Dest)[_Size], const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l( char *_Dest, const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale);
#line 640 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl calloc( size_t _Count, size_t _Size);
__declspec(dllimport) __declspec(noalias) void __cdecl free( void * _Memory);
                                                                __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl malloc( size_t _Size);

                                                                   __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl realloc( void * _Memory, size_t _NewSize);

                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _recalloc( void * _Memory, size_t _Count, size_t _Size);
__declspec(dllimport) __declspec(noalias) void __cdecl _aligned_free( void * _Memory);
                                                                __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_malloc( size_t _Size, size_t _Alignment);
                                                                __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_malloc( size_t _Size, size_t _Alignment, size_t _Offset);

                                                                   __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_realloc( void * _Memory, size_t _NewSize, size_t _Alignment);

                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment);

                                                                   __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_realloc( void * _Memory, size_t _NewSize, size_t _Alignment, size_t _Offset);

                                                                       __declspec(dllimport) __declspec(noalias) __declspec(restrict) void * __cdecl _aligned_offset_recalloc( void * _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset);
               __declspec(dllimport) size_t __cdecl _aligned_msize( void * _Memory, size_t _Alignment, size_t _Offset);
#line 685 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
                   __declspec(dllimport) errno_t __cdecl _itow_s ( int _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(int _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _itow(int _Value, wchar_t *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ltow_s ( long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(long _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _ltow(long _Value, wchar_t *_Dest, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ultow_s ( unsigned long _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(unsigned long _Value, wchar_t (&_Dest)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _ultow(unsigned long _Value, wchar_t *_Dest, int _Radix);
               __declspec(dllimport) double __cdecl wcstod( const wchar_t * _Str, wchar_t ** _EndPtr);
               __declspec(dllimport) double __cdecl _wcstod_l( const wchar_t *_Str, wchar_t ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) long __cdecl wcstol( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) long __cdecl _wcstol_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl wcstoll( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix);
               __declspec(dllimport) long long __cdecl _wcstoll_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long __cdecl wcstoul( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long __cdecl _wcstoul_l( const wchar_t *_Str, wchar_t **_EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned long long __cdecl wcstoull( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned long long __cdecl _wcstoull_l( const wchar_t *_Str, wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) long double __cdecl wcstold( const wchar_t * _Str, wchar_t ** _EndPtr);
               __declspec(dllimport) long double __cdecl _wcstold_l( const wchar_t * _Str, wchar_t ** _EndPtr, _locale_t _Locale);
               __declspec(dllimport) float __cdecl wcstof( const wchar_t * _Str, wchar_t ** _EndPtr);
               __declspec(dllimport) float __cdecl _wcstof_l( const wchar_t * _Str, wchar_t ** _EndPtr, _locale_t _Locale);



               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _wgetenv( const wchar_t * _VarName);
                   __declspec(dllimport) errno_t __cdecl _wgetenv_s( size_t * _ReturnSize, wchar_t * _DstBuf, size_t _DstSizeInWords, const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(size_t * _ReturnSize, wchar_t (&_Dest)[_Size], const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }






                   __declspec(dllimport) errno_t __cdecl _wdupenv_s( wchar_t **_Buffer, size_t *_BufferSizeInWords, const wchar_t *_VarName);







__declspec(dllimport) int __cdecl _wsystem( const wchar_t * _Command);




               __declspec(dllimport) double __cdecl _wtof( const wchar_t *_Str);
               __declspec(dllimport) double __cdecl _wtof_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wtoi( const wchar_t *_Str);
               __declspec(dllimport) int __cdecl _wtoi_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) long __cdecl _wtol( const wchar_t *_Str);
               __declspec(dllimport) long __cdecl _wtol_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) long long __cdecl _wtoll( const wchar_t *_Str);
               __declspec(dllimport) long long __cdecl _wtoll_l( const wchar_t *_Str, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl _i64tow_s( __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _i64tow( __int64 _Val, wchar_t * _DstBuf, int _Radix);
                   __declspec(dllimport) errno_t __cdecl _ui64tow_s( unsigned __int64 _Val, wchar_t * _DstBuf, size_t _SizeInWords, int _Radix);
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _ui64tow( unsigned __int64 _Val, wchar_t * _DstBuf, int _Radix);
               __declspec(dllimport) __int64 __cdecl _wtoi64( const wchar_t *_Str);
               __declspec(dllimport) __int64 __cdecl _wtoi64_l( const wchar_t *_Str, _locale_t _Locale);
               __declspec(dllimport) __int64 __cdecl _wcstoi64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) __int64 __cdecl _wcstoi64_l( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
               __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64( const wchar_t * _Str, wchar_t ** _EndPtr, int _Radix);
               __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l( const wchar_t *_Str , wchar_t ** _EndPtr, int _Radix, _locale_t _Locale);
#line 770 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
               __declspec(dllimport) char * __cdecl _fullpath( char * _FullPath, const char * _Path, size_t _SizeInBytes);







                   __declspec(dllimport) errno_t __cdecl _ecvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDights, int * _PtDec, int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ecvt( double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign);
                   __declspec(dllimport) errno_t __cdecl _fcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
               __declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _fcvt( double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
__declspec(dllimport) errno_t __cdecl _gcvt_s( char * _DstBuf, size_t _Size, double _Val, int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size], double _Value, int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _gcvt( double _Val, int _NumOfDigits, char * _DstBuf);

               __declspec(dllimport) int __cdecl _atodbl( _CRT_DOUBLE * _Result, char * _Str);
               __declspec(dllimport) int __cdecl _atoldbl( _LDOUBLE * _Result, char * _Str);
               __declspec(dllimport) int __cdecl _atoflt( _CRT_FLOAT * _Result, const char * _Str);
               __declspec(dllimport) int __cdecl _atodbl_l( _CRT_DOUBLE * _Result, char * _Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoldbl_l( _LDOUBLE * _Result, char * _Str, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _atoflt_l( _CRT_FLOAT * _Result, const char * _Str, _locale_t _Locale);
                       unsigned long __cdecl _lrotl( unsigned long _Val, int _Shift);
                       unsigned long __cdecl _lrotr( unsigned long _Val, int _Shift);
                   __declspec(dllimport) errno_t __cdecl _makepath_s( char * _PathResult, size_t _SizeInWords, const char * _Drive, const char * _Dir, const char * _Filename,
                   const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size], const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _makepath( char *_Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext);
#line 826 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
        _onexit_t __cdecl _onexit( _onexit_t _Func);







#pragma warning(push)
#pragma warning(disable: 6540)


 __declspec(dllimport) int __cdecl _putenv( const char * _EnvString);
                   __declspec(dllimport) errno_t __cdecl _putenv_s( const char * _Name, const char * _Value);


        unsigned int __cdecl _rotl( unsigned int _Val, int _Shift);
        unsigned __int64 __cdecl _rotl64( unsigned __int64 _Val, int _Shift);
        unsigned int __cdecl _rotr( unsigned int _Val, int _Shift);
        unsigned __int64 __cdecl _rotr64( unsigned __int64 _Val, int _Shift);
#pragma warning(pop)


__declspec(dllimport) errno_t __cdecl _searchenv_s( const char * _Filename, const char * _EnvVar, char * _ResultPath, size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(const char * _Filename, const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _EnvVar, char *_ResultPath);


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _splitpath( const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext);
                   __declspec(dllimport) errno_t __cdecl _splitpath_s( const char * _FullPath,
                                               char * _Drive, size_t _DriveSize,
                                             char * _Dir, size_t _DirSize,
                                                  char * _Filename, size_t _FilenameSize,
                                             char * _Ext, size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s( const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

__declspec(dllimport) void __cdecl _swab( char * _Buf1, char * _Buf2, int _SizeInBytes);
#line 873 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
               __declspec(dllimport) wchar_t * __cdecl _wfullpath( wchar_t * _FullPath, const wchar_t * _Path, size_t _SizeInWords);





                   __declspec(dllimport) errno_t __cdecl _wmakepath_s( wchar_t * _PathResult, size_t _SIZE, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename,
                   const wchar_t * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_ResultPath)[_Size], const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath( wchar_t *_ResultPath, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext);






               __declspec(dllimport) int __cdecl _wputenv( const wchar_t * _EnvString);
                   __declspec(dllimport) errno_t __cdecl _wputenv_s( const wchar_t * _Name, const wchar_t * _Value);
__declspec(dllimport) errno_t __cdecl _wsearchenv_s( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t * _ResultPath, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv(const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t *_ResultPath);


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) void __cdecl _wsplitpath( const wchar_t * _FullPath, wchar_t * _Drive, wchar_t * _Dir, wchar_t * _Filename, wchar_t * _Ext);
__declspec(dllimport) errno_t __cdecl _wsplitpath_s( const wchar_t * _FullPath,
                                               wchar_t * _Drive, size_t _DriveSize,
                                             wchar_t * _Dir, size_t _DirSize,
                                                  wchar_t * _Filename, size_t _FilenameSize,
                                             wchar_t * _Ext, size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s( const wchar_t *_Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }






__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _seterrormode( int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _beep( unsigned _Frequency, unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _sleep( unsigned long _Duration);
#line 932 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
 __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl ecvt( double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl fcvt( double _Val, int _NumOfDec, int * _PtDec, int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl gcvt( double _Val, int _NumOfDigits, char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl itoa( int _Val, char * _DstBuf, int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl ltoa( long _Val, char * _DstBuf, int _Radix);


               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details.")) __declspec(dllimport) int __cdecl putenv( const char * _EnvString);


__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details.")) __declspec(dllimport) void __cdecl swab( char * _Buf1, char * _Buf2, int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl ultoa( unsigned long _Val, char * _Dstbuf, int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit( _onexit_t _Func);





}



#pragma pack(pop)
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdlib"




namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;


using :: getenv;
using :: system;


using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;
}
#line 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\streambuf"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xiosbase"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstring"
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstring"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"



extern "C" {
#line 47 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
__declspec(dllimport) void * __cdecl _memccpy( void * _Dst, const void * _Src, int _Val, size_t _MaxCount);
               __declspec(dllimport) const void * __cdecl memchr( const void * _Buf , int _Val, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);
               __declspec(dllimport) int __cdecl _memicmp_l( const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale);
               int __cdecl memcmp( const void * _Buf1, const void * _Buf2, size_t _Size);



void * __cdecl memcpy( void * _Dst, const void * _Src, size_t _Size);

__declspec(dllimport) errno_t __cdecl memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
#line 94 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
        void * __cdecl memset( void * _Dst, int _Val, size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details.")) __declspec(dllimport) void * __cdecl memccpy( void * _Dst, const void * _Src, int _Val, size_t _Size);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl memicmp( const void * _Buf1, const void * _Buf2, size_t _Size);





                   __declspec(dllimport) errno_t __cdecl _strset_s( char * _Dst, size_t _DstSize, int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(char (&_Dest)[_Size], int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _strset( char *_Dest, int _Value);

                   __declspec(dllimport) errno_t __cdecl strcpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(char (&_Dest)[_Size], const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl strcpy( char *_Dest, const char * _Source);

                   __declspec(dllimport) errno_t __cdecl strcat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Dest)[_Size], const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl strcat( char *_Dest, const char * _Source);

               int __cdecl strcmp( const char * _Str1, const char * _Str2);
               size_t __cdecl strlen( const char * _Str);
               __declspec(dllimport)


size_t __cdecl strnlen( const char * _Str, size_t _MaxCount);

               static __inline


size_t __cdecl strnlen_s( const char * _Str, size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}


                   __declspec(dllimport) errno_t __cdecl memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);


__declspec(dllimport) void * __cdecl memmove( void * _Dst, const void * _Src, size_t _Size);






               __declspec(dllimport) char * __cdecl _strdup( const char * _Src);





               __declspec(dllimport) const char * __cdecl strchr( const char * _Str, int _Val);
               __declspec(dllimport) int __cdecl _stricmp( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _strcmpi( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _stricmp_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl strcoll( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _strcoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _stricoll( const char * _Str1, const char * _Str2);
               __declspec(dllimport) int __cdecl _stricoll_l( const char * _Str1, const char * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _strncoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strncoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _strnicoll ( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicoll_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) size_t __cdecl strcspn( const char * _Str, const char * _Control);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strerror( const char * _ErrMsg);
                   __declspec(dllimport) errno_t __cdecl _strerror_s( char * _Buf, size_t _SizeInBytes, const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strerror( int);

                   __declspec(dllimport) errno_t __cdecl strerror_s( char * _Buf, size_t _SizeInBytes, int _ErrNum);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
                   __declspec(dllimport) errno_t __cdecl _strlwr_s( char * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strlwr( char *_String);
                   __declspec(dllimport) errno_t __cdecl _strlwr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strlwr_l( char *_String, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl strncat_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(char (&_Dest)[_Size], const char * _Source, size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable: 6059)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strncat( char *_Dest, const char * _Source, size_t _Count);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl strncmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicmp( const char * _Str1, const char * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _strnicmp_l( const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl strncpy_s( char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size], const char * _Source, size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strncpy( char *_Dest, const char * _Source, size_t _Count);
                   __declspec(dllimport) errno_t __cdecl _strnset_s( char * _Str, size_t _SizeInBytes, int _Val, size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(char (&_Dest)[_Size], int _Val, size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strnset( char *_Dest, int _Val, size_t _Count);
               __declspec(dllimport) const char * __cdecl strpbrk( const char * _Str, const char * _Control);
               __declspec(dllimport) const char * __cdecl strrchr( const char * _Str, int _Ch);
__declspec(dllimport) char * __cdecl _strrev( char * _Str);
               __declspec(dllimport) size_t __cdecl strspn( const char * _Str, const char * _Control);
                               __declspec(dllimport) const char * __cdecl strstr( const char * _Str, const char * _SubStr);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl strtok( char * _Str, const char * _Delim);

               __declspec(dllimport) char * __cdecl strtok_s( char * _Str, const char * _Delim, char ** _Context);

                   __declspec(dllimport) errno_t __cdecl _strupr_s( char * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strupr( char *_String);
                   __declspec(dllimport) errno_t __cdecl _strupr_s_l( char * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strupr_l( char *_String, _locale_t _Locale);
                   __declspec(dllimport) size_t __cdecl strxfrm ( char * _Dst, const char * _Src, size_t _MaxCount);
                   __declspec(dllimport) size_t __cdecl _strxfrm_l( char * _Dst, const char * _Src, size_t _MaxCount, _locale_t _Locale);


extern "C++" {


               inline char * __cdecl strchr( char * _Str, int _Ch)
        { return (char*)strchr((const char*)_Str, _Ch); }
               inline char * __cdecl strpbrk( char * _Str, const char * _Control)
        { return (char*)strpbrk((const char*)_Str, _Control); }
               inline char * __cdecl strrchr( char * _Str, int _Ch)
        { return (char*)strrchr((const char*)_Str, _Ch); }
                               inline char * __cdecl strstr( char * _Str, const char * _SubStr)
        { return (char*)strstr((const char*)_Str, _SubStr); }



               inline void * __cdecl memchr( void * _Pv, int _C, size_t _N)
        { return (void*)memchr((const void*)_Pv, _C, _N); }

}
#line 245 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details.")) __declspec(dllimport) char * __cdecl strdup( const char * _Src);






               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details.")) __declspec(dllimport) int __cdecl strcmpi( const char * _Str1, const char * _Str2);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details.")) __declspec(dllimport) int __cdecl stricmp( const char * _Str1, const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details.")) __declspec(dllimport) char * __cdecl strlwr( char * _Str);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl strnicmp( const char * _Str1, const char * _Str, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details.")) __declspec(dllimport) char * __cdecl strnset( char * _Str, int _Val, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details.")) __declspec(dllimport) char * __cdecl strrev( char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details.")) char * __cdecl strset( char * _Str, int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details.")) __declspec(dllimport) char * __cdecl strupr( char * _Str);
#line 273 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
               __declspec(dllimport) wchar_t * __cdecl _wcsdup( const wchar_t * _Str);






                   __declspec(dllimport) errno_t __cdecl wcscat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcscat( wchar_t *_Dest, const wchar_t * _Source);



__declspec(dllimport) const wchar_t * __cdecl wcschr( const wchar_t * _Str, wchar_t _Ch);
               __declspec(dllimport) int __cdecl wcscmp( const wchar_t * _Str1, const wchar_t * _Str2);

                   __declspec(dllimport) errno_t __cdecl wcscpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcscpy( wchar_t *_Dest, const wchar_t * _Source);
               __declspec(dllimport) size_t __cdecl wcscspn( const wchar_t * _Str, const wchar_t * _Control);
               __declspec(dllimport) size_t __cdecl wcslen( const wchar_t * _Str);
               __declspec(dllimport)


size_t __cdecl wcsnlen( const wchar_t * _Src, size_t _MaxCount);

               static __inline


size_t __cdecl wcsnlen_s( const wchar_t * _Src, size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}


                   __declspec(dllimport) errno_t __cdecl wcsncat_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable: 6059)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsncat( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl wcsncmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);

                   __declspec(dllimport) errno_t __cdecl wcsncpy_s( wchar_t * _Dst, rsize_t _SizeInWords, const wchar_t * _Src, rsize_t _MaxCount);

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size], const wchar_t * _Source, size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsncpy( wchar_t *_Dest, const wchar_t * _Source, size_t _Count);
               __declspec(dllimport) const wchar_t * __cdecl wcspbrk( const wchar_t * _Str, const wchar_t * _Control);
               __declspec(dllimport) const wchar_t * __cdecl wcsrchr( const wchar_t * _Str, wchar_t _Ch);
               __declspec(dllimport) size_t __cdecl wcsspn( const wchar_t * _Str, const wchar_t * _Control);


__declspec(dllimport) const wchar_t * __cdecl wcsstr( const wchar_t * _Str, const wchar_t * _SubStr);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcstok( wchar_t * _Str, const wchar_t * _Delim);

               __declspec(dllimport) wchar_t * __cdecl wcstok_s( wchar_t * _Str, const wchar_t * _Delim, wchar_t ** _Context);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcserror( int _ErrNum);
                   __declspec(dllimport) errno_t __cdecl _wcserror_s( wchar_t * _Buf, size_t _SizeInWords, int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl __wcserror( const wchar_t * _Str);
                   __declspec(dllimport) errno_t __cdecl __wcserror_s( wchar_t * _Buffer, size_t _SizeInWords, const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size], const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

               __declspec(dllimport) int __cdecl _wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcsicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsnicmp_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl _wcsnset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Val, size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(wchar_t (&_Dst)[_Size], wchar_t _Val, size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsnset( wchar_t *_Str, wchar_t _Val, size_t _MaxCount);
__declspec(dllimport) wchar_t * __cdecl _wcsrev( wchar_t * _Str);
                   __declspec(dllimport) errno_t __cdecl _wcsset_s( wchar_t * _Dst, size_t _SizeInWords, wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsset( wchar_t *_Str, wchar_t _Val);

                   __declspec(dllimport) errno_t __cdecl _wcslwr_s( wchar_t * _Str, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcslwr( wchar_t *_String);
                   __declspec(dllimport) errno_t __cdecl _wcslwr_s_l( wchar_t * _Str, size_t _SizeInWords, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcslwr_l( wchar_t *_String, _locale_t _Locale);
                   __declspec(dllimport) errno_t __cdecl _wcsupr_s( wchar_t * _Str, size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsupr( wchar_t *_String);
                   __declspec(dllimport) errno_t __cdecl _wcsupr_s_l( wchar_t * _Str, size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(wchar_t (&_String)[_Size], _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wcsupr_l( wchar_t *_String, _locale_t _Locale);
                   __declspec(dllimport) size_t __cdecl wcsxfrm( wchar_t * _Dst, const wchar_t * _Src, size_t _MaxCount);
                   __declspec(dllimport) size_t __cdecl _wcsxfrm_l( wchar_t * _Dst, const wchar_t *_Src, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl wcscoll( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcscoll_l( const wchar_t * _Str1, const wchar_t * _Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(dllimport) int __cdecl _wcsicoll_l( const wchar_t * _Str1, const wchar_t *_Str2, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsncoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsncoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);
               __declspec(dllimport) int __cdecl _wcsnicoll( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
               __declspec(dllimport) int __cdecl _wcsnicoll_l( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale);




extern "C++" {


        inline wchar_t * __cdecl wcschr( wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
               inline wchar_t * __cdecl wcspbrk( wchar_t *_Str, const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
               inline wchar_t * __cdecl wcsrchr( wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }


        inline wchar_t * __cdecl wcsstr( wchar_t *_Str, const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 403 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsdup( const wchar_t * _Str);
#line 413 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsicmp( const wchar_t * _Str1, const wchar_t * _Str2);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsnicmp( const wchar_t * _Str1, const wchar_t * _Str2, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsnset( wchar_t * _Str, wchar_t _Val, size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsrev( wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsset( wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcslwr( wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details.")) __declspec(dllimport) wchar_t * __cdecl wcsupr( wchar_t * _Str);
               __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details.")) __declspec(dllimport) int __cdecl wcsicoll( const wchar_t * _Str1, const wchar_t * _Str2);
#line 434 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
}
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstring"




namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstddef"
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstddef"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"



extern "C" {
#line 36 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"
namespace std { typedef decltype(__nullptr) nullptr_t; }
using ::std::nullptr_t;
#line 69 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);


}
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstddef"




namespace std {
using :: ptrdiff_t; using :: size_t;
}



namespace std {
typedef double max_align_t;
}
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\initializer_list"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Elem>
 class initializer_list
 {
public:
 typedef _Elem value_type;
 typedef const _Elem& reference;
 typedef const _Elem& const_reference;
 typedef size_t size_type;

 typedef const _Elem* iterator;
 typedef const _Elem* const_iterator;

 initializer_list() throw ()
  : _First(0), _Last(0)
  {
  }

 initializer_list(const _Elem *_First_arg,
  const _Elem *_Last_arg) throw ()
  : _First(_First_arg), _Last(_Last_arg)
  {
  }

 const _Elem *begin() const throw ()
  {
  return (_First);
  }

 const _Elem *end() const throw ()
  {
  return (_Last);
  }

 size_t size() const throw ()
  {
  return ((size_t)(_Last - _First));
  }

private:
 const _Elem *_First;
 const _Elem *_Last;
 };


template<class _Elem> inline
 const _Elem *begin(initializer_list<_Elem> _Ilist) throw ()
 {
 return (_Ilist.begin());
 }


template<class _Elem> inline
 const _Elem *end(initializer_list<_Elem> _Ilist) throw ()
 {
 return (_Ilist.end());
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef"




#pragma pack(push,8)
#pragma warning(push, 3)
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef"
namespace std {
#line 90 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef"
template<class _Ty> inline
 _Ty *addressof(_Ty& _Val) throw ()
 {
 return (reinterpret_cast<_Ty *>(
  (&const_cast<char&>(
  reinterpret_cast<const volatile char&>(_Val)))));
 }



template<bool,
 class _Ty1,
 class _Ty2>
 struct _If
 {
 typedef _Ty2 type;
 };

template<class _Ty1,
 class _Ty2>
 struct _If<true, _Ty1, _Ty2>
 {
 typedef _Ty1 type;
 };

template<class _Ty>
 struct _Always_false
 {
 static const bool value = false;
 };



template<class _Arg,
 class _Result>
 struct unary_function
 {
 typedef _Arg argument_type;
 typedef _Result result_type;
 };


template<class _Arg1,
 class _Arg2,
 class _Result>
 struct binary_function
 {
 typedef _Arg1 first_argument_type;
 typedef _Arg2 second_argument_type;
 typedef _Result result_type;
 };


template<class _Ty = void>
 struct plus
  : public binary_function<_Ty, _Ty, _Ty>
 {
 _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left + _Right);
  }
 };


template<class _Ty = void>
 struct minus
  : public binary_function<_Ty, _Ty, _Ty>
 {
 _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left - _Right);
  }
 };


template<class _Ty = void>
 struct multiplies
  : public binary_function<_Ty, _Ty, _Ty>
 {
 _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left * _Right);
  }
 };


template<class _Ty = void>
 struct equal_to
  : public binary_function<_Ty, _Ty, bool>
 {
 bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left == _Right);
  }
 };


template<class _Ty = void>
 struct less
  : public binary_function<_Ty, _Ty, bool>
 {
 bool operator()(const _Ty& _Left, const _Ty& _Right) const
  {
  return (_Left < _Right);
  }
 };


template<>
 struct plus<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   + static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct minus<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   - static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct multiplies<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   * static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct equal_to<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   == static_cast<_Ty2&&>(_Right));
  }
 };


template<>
 struct less<void>
 {
 template<class _Ty1,
  class _Ty2>
  auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
  -> decltype(static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right))
  {
  return (static_cast<_Ty1&&>(_Left)
   < static_cast<_Ty2&&>(_Right));
  }
 };


}



namespace std {

inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
 {






 static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
 const size_t _FNV_offset_basis = 2166136261U;
 const size_t _FNV_prime = 16777619U;


 size_t _Val = _FNV_offset_basis;
 for (size_t _Next = 0; _Next < _Count; ++_Next)
  {
  _Val ^= (size_t)_First[_Next];
  _Val *= _FNV_prime;
  }






 static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");


 return (_Val);
 }


template<class _Kty>
 struct _Bitwise_hash
  : public unary_function<_Kty, size_t>
 {
 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
  }
 };


template<class _Kty>
 struct hash
  : public _Bitwise_hash<_Kty>
 {
 static const bool _Value = __is_enum(_Kty);
 static_assert(_Value,
  "The C++ Standard doesn't provide a hash for this type.");
 };
template<>
 struct hash<bool>
  : public _Bitwise_hash<bool>
 {
 };

template<>
 struct hash<char>
  : public _Bitwise_hash<char>
 {
 };

template<>
 struct hash<signed char>
  : public _Bitwise_hash<signed char>
 {
 };

template<>
 struct hash<unsigned char>
  : public _Bitwise_hash<unsigned char>
 {
 };
#line 369 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef"
template<>
 struct hash<wchar_t>
  : public _Bitwise_hash<wchar_t>
 {
 };


template<>
 struct hash<short>
  : public _Bitwise_hash<short>
 {
 };

template<>
 struct hash<unsigned short>
  : public _Bitwise_hash<unsigned short>
 {
 };

template<>
 struct hash<int>
  : public _Bitwise_hash<int>
 {
 };

template<>
 struct hash<unsigned int>
  : public _Bitwise_hash<unsigned int>
 {
 };

template<>
 struct hash<long>
  : public _Bitwise_hash<long>
 {
 };

template<>
 struct hash<unsigned long>
  : public _Bitwise_hash<unsigned long>
 {
 };

template<>
 struct hash<long long>
  : public _Bitwise_hash<long long>
 {
 };

template<>
 struct hash<unsigned long long>
  : public _Bitwise_hash<unsigned long long>
 {
 };

template<>
 struct hash<float>
  : public _Bitwise_hash<float>
 {
 typedef float _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<double>
  : public _Bitwise_hash<double>
 {
 typedef double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<>
 struct hash<long double>
  : public _Bitwise_hash<long double>
 {
 typedef long double _Kty;
 typedef _Bitwise_hash<_Kty> _Mybase;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Mybase::operator()(
   _Keyval == 0 ? 0 : _Keyval));
  }
 };

template<class _Ty>
 struct hash<_Ty *>
  : public _Bitwise_hash<_Ty *>
 {
 };
}


namespace std {
namespace tr1 {
using ::std:: hash;
}
}
#line 568 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstddef"
#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"


#pragma pack(push,8)
#pragma warning(push, 3)
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
namespace std {
#line 36 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
}




#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\eh.h"
#line 15 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\eh.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 15 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\eh.h"
#line 24 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\eh.h"
#pragma pack(push,8)







typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *unexpected_handler)();
#line 50 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\eh.h"
struct _EXCEPTION_POINTERS;

typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);


__declspec(dllimport) __declspec(noreturn) void __cdecl terminate(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl unexpected(void);

__declspec(dllimport) int __cdecl _is_exception_typeof( const type_info &_Type, struct _EXCEPTION_POINTERS * _ExceptionPtr);



__declspec(dllimport) terminate_function __cdecl set_terminate( terminate_function _NewPtFunc);
extern "C" __declspec(dllimport) terminate_function __cdecl _get_terminate(void);
__declspec(dllimport) unexpected_function __cdecl set_unexpected( unexpected_function _NewPtFunc);
extern "C" __declspec(dllimport) unexpected_function __cdecl _get_unexpected(void);




__declspec(dllimport) _se_translator_function __cdecl _set_se_translator( _se_translator_function _NewPtFunc);

__declspec(dllimport) bool __cdecl __uncaught_exception();
#line 82 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\eh.h"
#pragma pack(pop)
#line 40 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"






#pragma pack(push,8)


extern "C" {
#line 58 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;
#line 143 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
__declspec(dllimport) int __cdecl _resetstkoflw (void);




__declspec(dllimport) unsigned long __cdecl _set_malloc_crt_max_wait( unsigned long _NewValue);
#line 158 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
                                                                   __declspec(dllimport) void * __cdecl _expand( void * _Memory, size_t _NewSize);
               __declspec(dllimport) size_t __cdecl _msize( void * _Memory);






                                               void * __cdecl _alloca( size_t _Size);


__declspec(dllimport) int __cdecl _heapwalk( _HEAPINFO * _EntryInfo);
__declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);



               __declspec(dllimport) int __cdecl _heapadd( void * _Memory, size_t _Size);
               __declspec(dllimport) int __cdecl _heapchk(void);
               __declspec(dllimport) int __cdecl _heapmin(void);
__declspec(dllimport) int __cdecl _heapset( unsigned int _Fill);
__declspec(dllimport) size_t __cdecl _heapused(size_t * _Used, size_t * _Commit);
#line 195 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
typedef char __static_assert_t[ (sizeof(unsigned int) <= 8) ];


#pragma warning(push)
#pragma warning(disable: 6540)
__inline void *_MarkAllocaS( void *_Ptr, unsigned int _Marker)
{
    if (_Ptr)
    {
        *((unsigned int*)_Ptr) = _Marker;
        _Ptr = (char*)_Ptr + 8;
    }
    return _Ptr;
}

__inline int _MallocaIsSizeInRange(size_t size)
{
    return size + 8 > size;
}
#pragma warning(pop)
#line 253 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__declspec(noalias) __inline void __cdecl _freea( void * _Memory)
{
    unsigned int _Marker;
    if (_Memory)
    {
        _Memory = (char*)_Memory - 8;
        _Marker = *(unsigned int *)_Memory;
        if (_Marker == 0xDDDD)
        {
            free(_Memory);
        }







    }
}
#pragma warning(pop)
#line 289 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\malloc.h"
}


#pragma pack(pop)
#line 41 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
#line 80 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
 namespace std {
#line 89 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
class __declspec(dllimport) exception
 {
public:
                                      exception();
                   explicit exception(const char * const &);
                                      exception(const char * const &, int);
                                      exception(const exception&);
                   exception& operator=(const exception&);
                   virtual ~exception() throw ();
                   virtual const char * what() const;

private:
                   void _Copy_str(const char *);
                   void _Tidy();

 const char * _Mywhat;
 bool _Mydofree;
 };
#line 188 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);

__declspec(dllimport) bool __cdecl uncaught_exception();


inline terminate_handler __cdecl get_terminate()
 {
 return (_get_terminate());
 }

inline unexpected_handler __cdecl get_unexpected()
 {
 return (_get_unexpected());
 }


}
#line 328 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
namespace std {





class bad_exception : public exception
 {
public:
                    bad_exception(const char *_Message = "bad exception")
  throw ()
  : exception(_Message)
  {
  }

 virtual ~bad_exception() throw ()
  {
  }
#line 355 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
 };


class bad_alloc : public exception
 {
public:
                    bad_alloc() throw ()
  : exception("bad allocation", 1)
  {
  }

 virtual ~bad_alloc() throw ()
  {
  }

private:
 friend class bad_array_new_length;

                    bad_alloc(const char *_Message) throw ()
  : exception(_Message, 1)
  {
  }
#line 386 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
 };


class bad_array_new_length
 : public bad_alloc
 {
public:

 bad_array_new_length() throw ()
  : bad_alloc("bad array new length")
  {
  }
 };


}
#line 413 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\exception"
__declspec(dllimport) void __cdecl __ExceptionPtrCreate( void* );
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy( void* );
__declspec(dllimport) void __cdecl __ExceptionPtrCopy( void*, const void* );
__declspec(dllimport) void __cdecl __ExceptionPtrAssign( void*, const void* );
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare( const void*, const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap( void*, void*);

__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException( void*);
__declspec(dllimport) void __cdecl __ExceptionPtrRethrow( const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException( void*, const void*, const void*);

namespace std {

class exception_ptr
 {
public:
 exception_ptr()
  {
  __ExceptionPtrCreate(this);
  }
 exception_ptr(nullptr_t)
  {
  __ExceptionPtrCreate(this);
  }
 ~exception_ptr() throw ()
  {
  __ExceptionPtrDestroy(this);
  }
 exception_ptr(const exception_ptr& _Rhs)
  {
  __ExceptionPtrCopy(this, &_Rhs);
  }
 exception_ptr& operator=(const exception_ptr& _Rhs)
  {
  __ExceptionPtrAssign(this, &_Rhs);
  return *this;
  }
 exception_ptr& operator=(nullptr_t)
  {
  exception_ptr _Ptr;
  __ExceptionPtrAssign(this, &_Ptr);
  return *this;
  }

 typedef exception_ptr _Myt;

 explicit operator bool() const throw ()
  {
  return __ExceptionPtrToBool(this);
  }

 void _RethrowException() const
  {
  __ExceptionPtrRethrow(this);
  }

 static exception_ptr _Current_exception()
  {
  exception_ptr _Retval;
  __ExceptionPtrCurrentException(&_Retval);
  return _Retval;
  }
 static exception_ptr _Copy_exception( void* _Except, const void* _Ptr)
  {
  exception_ptr _Retval = 0;
  if (!_Ptr)
   {

   return _Retval;
   }
  __ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
  return _Retval;
  }
private:
 void* _Data1;
 void* _Data2;
 };

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs)
 {
 __ExceptionPtrSwap(&_Lhs, &_Rhs);
 }

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs)
 {
 return __ExceptionPtrCompare(&_Lhs, &_Rhs);
 }

inline bool operator==(nullptr_t, const exception_ptr& _Rhs)
 {
 return !_Rhs;
 }

inline bool operator==(const exception_ptr& _Lhs, nullptr_t)
 {
 return !_Lhs;
 }

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs)
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs)
 {
 return !(_Lhs == _Rhs);
 }

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs)
 {
 return !(_Lhs == _Rhs);
 }

inline exception_ptr current_exception()
 {
 return exception_ptr::_Current_exception();
 }

inline void rethrow_exception( exception_ptr _P)
 {
 _P._RethrowException();
 }

template <class _E> void *__GetExceptionInfo(_E);

template<class _E> exception_ptr make_exception_ptr(_E _Except)
 {
 return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
 }
}








#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ymath.h"







#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
#line 33 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ymath.h"
void __cdecl _Feraise(int);

typedef union
 {
 unsigned short _Word[8];
 float _Float;
 double _Double;
 long double _Long_double;
 } _Dconst;


__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) double __cdecl _Divide(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Log(double, int);
__declspec(dllimport) double __cdecl _Recip(double);
__declspec(dllimport) double __cdecl _Sin(double, unsigned int);
__declspec(dllimport) double __cdecl _Sinx(double, unsigned int, int);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport) _Dconst _Denorm, _Hugeval, _Inf,
 _Nan, _Snan;


__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) float __cdecl _FDivide(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FLog(float, int);
__declspec(dllimport) float __cdecl _FRecip(float);
__declspec(dllimport) float __cdecl _FSin(float, unsigned int);
__declspec(dllimport) float __cdecl _FSinx(float, unsigned int, int);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport) _Dconst _FDenorm, _FInf, _FNan, _FSnan;


__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) long double __cdecl _LDivide(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LLog(long double, int);
__declspec(dllimport) long double __cdecl _LRecip(long double);
__declspec(dllimport) long double __cdecl _LSin(long double, unsigned int);
__declspec(dllimport) long double __cdecl _LSinx(long double, unsigned int, int);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport) _Dconst _LDenorm, _LInf, _LNan, _LSnan;



}




#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cfloat"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtwrn.h"
#line 17 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtwrn.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 17 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtwrn.h"
#line 22 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
#line 38 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
extern "C" {
#line 117 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
                          __declspec(dllimport) unsigned int __cdecl _clearfp(void);
#pragma warning(push)
#pragma warning(disable: 4141)
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) unsigned int __cdecl _controlfp( unsigned int _NewValue, unsigned int _Mask);
#pragma warning(pop)
 __declspec(dllimport) void __cdecl _set_controlfp( unsigned int _NewValue, unsigned int _Mask);
                          __declspec(dllimport) errno_t __cdecl _controlfp_s( unsigned int *_CurrentState, unsigned int _NewValue, unsigned int _Mask);
                          __declspec(dllimport) unsigned int __cdecl _statusfp(void);
                          __declspec(dllimport) void __cdecl _fpreset(void);


                          __declspec(dllimport) void __cdecl _statusfp2( unsigned int *_X86_status, unsigned int *_SSE2_status);
#line 202 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
                          __declspec(dllimport) unsigned int __cdecl _control87( unsigned int _NewValue, unsigned int _Mask);

                          __declspec(dllimport) int __cdecl __control87_2( unsigned int _NewValue, unsigned int _Mask,
                                            unsigned int* _X86_cw, unsigned int* _Sse2_cw);




               __declspec(dllimport) extern int * __cdecl __fpecode(void);
#line 241 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
               __declspec(dllimport) double __cdecl _copysign( double _Number, double _Sign);
               __declspec(dllimport) double __cdecl _chgsign( double _X);
               __declspec(dllimport) double __cdecl _scalb( double _X, long _Y);
               __declspec(dllimport) double __cdecl _logb( double _X);
               __declspec(dllimport) double __cdecl _nextafter( double _X, double _Y);
               __declspec(dllimport) int __cdecl _finite( double _X);
               __declspec(dllimport) int __cdecl _isnan( double _X);
               __declspec(dllimport) int __cdecl _fpclass( double _X);
#line 274 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
                          __declspec(dllimport) void __cdecl fpreset(void);
#line 339 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
}
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cfloat"
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"



#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cwchar"
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cwchar"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"


#pragma pack(push,8)


extern "C" {
#line 93 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
typedef unsigned long _fsize_t;





struct _wfinddata32_t {
        unsigned attrib;
        __time32_t time_create;
        __time32_t time_access;
        __time32_t time_write;
        _fsize_t size;
        wchar_t name[260];
};

struct _wfinddata32i64_t {
        unsigned attrib;
        __time32_t time_create;
        __time32_t time_access;
        __time32_t time_write;
        __int64 size;
        wchar_t name[260];
};

struct _wfinddata64i32_t {
        unsigned attrib;
        __time64_t time_create;
        __time64_t time_access;
        __time64_t time_write;
        _fsize_t size;
        wchar_t name[260];
};

struct _wfinddata64_t {
        unsigned attrib;
        __time64_t time_create;
        __time64_t time_access;
        __time64_t time_write;
        __int64 size;
        wchar_t name[260];
};
#line 199 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
__declspec(dllimport) const unsigned short * __cdecl __pctype_func(void);

__declspec(dllimport) extern const unsigned short *_pctype;
#line 212 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
__declspec(dllimport) extern const unsigned short _wctype[];
#line 222 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
__declspec(dllimport) const wctype_t * __cdecl __pwctype_func(void);

__declspec(dllimport) extern const wctype_t *_pwctype;
#line 254 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
               __declspec(dllimport) int __cdecl iswalpha( wint_t _C);
               __declspec(dllimport) int __cdecl _iswalpha_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswupper( wint_t _C);
               __declspec(dllimport) int __cdecl _iswupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswlower( wint_t _C);
               __declspec(dllimport) int __cdecl _iswlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswdigit( wint_t _C);
               __declspec(dllimport) int __cdecl _iswdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswxdigit( wint_t _C);
               __declspec(dllimport) int __cdecl _iswxdigit_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswspace( wint_t _C);
               __declspec(dllimport) int __cdecl _iswspace_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswpunct( wint_t _C);
               __declspec(dllimport) int __cdecl _iswpunct_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswblank( wint_t _C);
               __declspec(dllimport) int __cdecl _iswblank_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswalnum( wint_t _C);
               __declspec(dllimport) int __cdecl _iswalnum_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswprint( wint_t _C);
               __declspec(dllimport) int __cdecl _iswprint_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswgraph( wint_t _C);
               __declspec(dllimport) int __cdecl _iswgraph_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswcntrl( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcntrl_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswascii( wint_t _C);


               __declspec(dllimport) int __cdecl isleadbyte( int _C);
               __declspec(dllimport) int __cdecl _isleadbyte_l( int _C, _locale_t _Locale);


               __declspec(dllimport) wint_t __cdecl towupper( wint_t _C);
               __declspec(dllimport) wint_t __cdecl _towupper_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) wint_t __cdecl towlower( wint_t _C);
               __declspec(dllimport) wint_t __cdecl _towlower_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iswctype( wint_t _C, wctype_t _Type);
               __declspec(dllimport) int __cdecl _iswctype_l( wint_t _C, wctype_t _Type, _locale_t _Locale);

               __declspec(dllimport) int __cdecl __iswcsymf( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcsymf_l( wint_t _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl __iswcsym( wint_t _C);
               __declspec(dllimport) int __cdecl _iswcsym_l( wint_t _C, _locale_t _Locale);


__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype( wint_t _C, wctype_t _Type);
#line 318 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
                                 __declspec(dllimport) wchar_t * __cdecl _wgetcwd( wchar_t * _DstBuf, int _SizeInWords);
                                 __declspec(dllimport) wchar_t * __cdecl _wgetdcwd( int _Drive, wchar_t * _DstBuf, int _SizeInWords);







               __declspec(dllimport) int __cdecl _wchdir( const wchar_t * _Path);



               __declspec(dllimport) int __cdecl _wmkdir( const wchar_t * _Path);
               __declspec(dllimport) int __cdecl _wrmdir( const wchar_t * _Path);






               __declspec(dllimport) int __cdecl _waccess( const wchar_t * _Filename, int _AccessMode);
                   __declspec(dllimport) errno_t __cdecl _waccess_s( const wchar_t * _Filename, int _AccessMode);
               __declspec(dllimport) int __cdecl _wchmod( const wchar_t * _Filename, int _Mode);
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wcreat( const wchar_t * _Filename, int _PermissionMode);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst32( const wchar_t * _Filename, struct _wfinddata32_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext32( intptr_t _FindHandle, struct _wfinddata32_t * _FindData);
__declspec(dllimport) int __cdecl _wunlink( const wchar_t * _Filename);
               __declspec(dllimport) int __cdecl _wrename( const wchar_t * _OldFilename, const wchar_t * _NewFilename);
__declspec(dllimport) errno_t __cdecl _wmktemp_s( wchar_t * _TemplateName, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wmktemp( wchar_t *_TemplateName);

               __declspec(dllimport) intptr_t __cdecl _wfindfirst32i64( const wchar_t * _Filename, struct _wfinddata32i64_t * _FindData);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst64i32( const wchar_t * _Filename, struct _wfinddata64i32_t * _FindData);
               __declspec(dllimport) intptr_t __cdecl _wfindfirst64( const wchar_t * _Filename, struct _wfinddata64_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext32i64( intptr_t _FindHandle, struct _wfinddata32i64_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext64i32( intptr_t _FindHandle, struct _wfinddata64i32_t * _FindData);
               __declspec(dllimport) int __cdecl _wfindnext64( intptr_t _FindHandle, struct _wfinddata64_t * _FindData);

                   __declspec(dllimport) errno_t __cdecl _wsopen_s( int * _FileHandle, const wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionFlag);
#line 368 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wopen( const wchar_t * _Filename, int _OpenFlag, int _PermissionMode = 0);
extern "C++" __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _wsopen( const wchar_t * _Filename, int _OpenFlag, int _ShareFlag, int _PermissionMode = 0);
#line 380 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
                   __declspec(dllimport) wchar_t * __cdecl _wsetlocale( int _Category, const wchar_t * _Locale);
                   __declspec(dllimport) _locale_t __cdecl _wcreate_locale( int _Category, const wchar_t * _Locale);
#line 392 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
__declspec(dllimport) intptr_t __cdecl _wexecl( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecle( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclp( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclpe( const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecv( const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecve( const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wexecvp( const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecvpe( const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnl( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnle( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlp( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlpe( int _Mode, const wchar_t * _Filename, const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnv( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnve( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnvp( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnvpe( int _Mode, const wchar_t * _Filename, const wchar_t * const * _ArgList,
                   const wchar_t * const * _Env);
#line 473 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
typedef unsigned short _ino_t;


typedef unsigned short ino_t;





typedef unsigned int _dev_t;


typedef unsigned int dev_t;





typedef long _off_t;


typedef long off_t;






struct _stat32 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };



struct stat {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };



struct _stat32i64 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        __int64 st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };

struct _stat64i32 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        _off_t st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };

struct _stat64 {
        _dev_t st_dev;
        _ino_t st_ino;
        unsigned short st_mode;
        short st_nlink;
        short st_uid;
        short st_gid;
        _dev_t st_rdev;
        __int64 st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };
#line 607 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
__declspec(dllimport) int __cdecl _wstat32( const wchar_t * _Name, struct _stat32 * _Stat);

__declspec(dllimport) int __cdecl _wstat32i64( const wchar_t * _Name, struct _stat32i64 * _Stat);
__declspec(dllimport) int __cdecl _wstat64i32( const wchar_t * _Name, struct _stat64i32 * _Stat);
__declspec(dllimport) int __cdecl _wstat64( const wchar_t * _Name, struct _stat64 * _Stat);
#line 627 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
                   __declspec(dllimport) errno_t __cdecl _cgetws_s( wchar_t * _Buffer, size_t _SizeInWords, size_t * _SizeRead);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(wchar_t (&_Buffer)[_Size], size_t * _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_cgetws_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _cgetws( wchar_t *_Buffer);
               __declspec(dllimport) wint_t __cdecl _getwch(void);
               __declspec(dllimport) wint_t __cdecl _getwche(void);
               __declspec(dllimport) wint_t __cdecl _putwch(wchar_t _WCh);
               __declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _WCh);
                   __declspec(dllimport) int __cdecl _cputws( const wchar_t * _String);
                   __declspec(dllimport) int __cdecl _cwprintf( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _cwprintf_s( const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _cwscanf( const wchar_t * _Format, ...);
                   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int __cdecl _cwscanf_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _cwscanf_s( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _cwscanf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
                   __declspec(dllimport) int __cdecl _vcwprintf( const wchar_t *_Format, va_list _ArgList);
                   __declspec(dllimport) int __cdecl _vcwprintf_s( const wchar_t *_Format, va_list _ArgList);

                   __declspec(dllimport) int __cdecl _cwprintf_p( const wchar_t * _Format, ...);
                   __declspec(dllimport) int __cdecl _vcwprintf_p( const wchar_t* _Format, va_list _ArgList);

__declspec(dllimport) int __cdecl _cwprintf_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _cwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_l( const wchar_t *_Format, _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _vcwprintf_s_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _cwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_p_l( const wchar_t * _Format, _locale_t _Locale, va_list _ArgList);

                   wint_t __cdecl _putwch_nolock(wchar_t _WCh);
               wint_t __cdecl _getwch_nolock(void);
               wint_t __cdecl _getwche_nolock(void);
                   wint_t __cdecl _ungetwch_nolock(wint_t _WCh);
#line 1170 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"
struct tm {
        int tm_sec;
        int tm_min;
        int tm_hour;
        int tm_mday;
        int tm_mon;
        int tm_year;
        int tm_wday;
        int tm_yday;
        int tm_isdst;
        };







__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wasctime( const struct tm * _Tm);
__declspec(dllimport) errno_t __cdecl _wasctime_s( wchar_t *_Buf, size_t _SizeInWords, const struct tm * _Tm);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(wchar_t (&_Buffer)[_Size], const struct tm * _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wctime32( const __time32_t *_Time);
__declspec(dllimport) errno_t __cdecl _wctime32_s( wchar_t* _Buf, size_t _SizeInWords, const __time32_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(wchar_t (&_Buffer)[_Size], const __time32_t * _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

__declspec(dllimport) size_t __cdecl wcsftime( wchar_t * _Buf, size_t _SizeInWords, const wchar_t * _Format, const struct tm * _Tm);
__declspec(dllimport) size_t __cdecl _wcsftime_l( wchar_t * _Buf, size_t _SizeInWords, const wchar_t *_Format, const struct tm *_Tm, _locale_t _Locale);

__declspec(dllimport) errno_t __cdecl _wstrdate_s( wchar_t * _Buf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wstrdate( wchar_t *_Buffer);

__declspec(dllimport) errno_t __cdecl _wstrtime_s( wchar_t * _Buf, size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wstrtime( wchar_t *_Buffer);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) wchar_t * __cdecl _wctime64( const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _wctime64_s( wchar_t* _Buf, size_t _SizeInWords, const __time64_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(wchar_t (&_Buffer)[_Size], const __time64_t * _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }



#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wtime.inl"
#line 27 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wtime.inl"
#pragma warning(push)
#pragma warning(disable: 4996)
#line 44 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wtime.inl"
static __inline wchar_t * __cdecl _wctime(const time_t * _Time)
{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _wctime64(_Time);
#pragma warning(pop)
}

static __inline errno_t __cdecl _wctime_s( wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}


#pragma warning(pop)
#line 1212 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wchar.h"







typedef int mbstate_t;
typedef wchar_t _Wint_t;

__declspec(dllimport) wint_t __cdecl btowc(int);
__declspec(dllimport) size_t __cdecl mbrlen( const char * _Ch, size_t _SizeInBytes,
                                        mbstate_t * _State);
__declspec(dllimport) size_t __cdecl mbrtowc( wchar_t * _DstCh, const char * _SrcCh,
                                    size_t _SizeInBytes, mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s( size_t* _Retval, wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(size_t * _Retval, wchar_t (&_Dest)[_Size], const char ** _PSource, size_t _Count, mbstate_t * _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State);

__declspec(dllimport) errno_t __cdecl wcrtomb_s( size_t * _Retval, char * _Dst,
             size_t _SizeInBytes, wchar_t _Ch, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(size_t * _Retval, char (&_Dest)[_Size], wchar_t _Source, mbstate_t * _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb( char *_Dest, wchar_t _Source, mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl wcsrtombs_s( size_t * _Retval, char * _Dst,
             size_t _SizeInBytes, const wchar_t ** _Src, size_t _Size, mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(size_t * _Retval, char (&_Dest)[_Size], const wchar_t ** _PSrc, size_t _Count, mbstate_t * _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs( char *_Dest, const wchar_t ** _PSource, size_t _Count, mbstate_t * _State);
__declspec(dllimport) int __cdecl wctob( wint_t _WCh);




__declspec(dllimport) void * __cdecl memmove( void * _Dst, const void * _Src, size_t _Size);



void * __cdecl memcpy( void * _Dst, const void * _Src, size_t _Size);

__declspec(dllimport) errno_t __cdecl memcpy_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);
__declspec(dllimport) errno_t __cdecl memmove_s( void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount);

__inline int __cdecl fwide( FILE * _F, int _M)
        {(void)_F; return (_M); }
__inline int __cdecl mbsinit( const mbstate_t *_P)
        {return (_P == 0 || *_P == 0); }
__inline const wchar_t * __cdecl wmemchr( const wchar_t *_S, wchar_t _C, size_t _N)
        {for (; 0 < _N; ++_S, --_N)
                if (*_S == _C)
                        return (const wchar_t *)(_S);
        return (0); }
__inline int __cdecl wmemcmp( const wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {for (; 0 < _N; ++_S1, ++_S2, --_N)
                if (*_S1 != *_S2)
                        return (*_S1 < *_S2 ? -1 : +1);
        return (0); }



__inline wchar_t * __cdecl wmemcpy( wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
 return (wchar_t *)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }

__inline wchar_t * __cdecl wmemmove( wchar_t *_S1, const wchar_t *_S2, size_t _N)
        {
#pragma warning(push)
#pragma warning(disable: 4996 6386)
#pragma warning(disable: 6387)

 return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning(pop)
 }


errno_t __cdecl wmemcpy_s( wchar_t *_S1, rsize_t _N1, const wchar_t *_S2, rsize_t _N);
errno_t __cdecl wmemmove_s( wchar_t *_S1, rsize_t _N1, const wchar_t *_S2, rsize_t _N);




__inline wchar_t * __cdecl wmemset( wchar_t *_S, wchar_t _C, size_t _N)
        {
            wchar_t *_Su = _S;
            for (; 0 < _N; ++_Su, --_N)
            {
                *_Su = _C;
            }
            return (_S);
        }


extern "C++" {
inline wchar_t * __cdecl wmemchr( wchar_t *_S, wchar_t _C, size_t _N)
        { return (wchar_t *)wmemchr((const wchar_t *)_S, _C, _N); }
}




}


#pragma pack(pop)
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cwchar"



typedef mbstate_t _Mbstatet;


namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
#line 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"



#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#line 30 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"
typedef enum
 {
 denorm_indeterminate = -1,
 denorm_absent = 0,
 denorm_present = 1}
  float_denorm_style;


typedef enum
 {
 round_indeterminate = -1,
 round_toward_zero = 0,
 round_to_nearest = 1,
 round_toward_infinity = 2,
 round_toward_neg_infinity = 3}
  float_round_style;


struct _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
 static const bool has_denorm_loss = (bool)(false);
 static const bool has_infinity = (bool)(false);
 static const bool has_quiet_NaN = (bool)(false);
 static const bool has_signaling_NaN = (bool)(false);
 static const bool is_bounded = (bool)(false);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(false);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const bool is_specialized = (bool)(false);
 static const bool tinyness_before = (bool)(false);
 static const bool traps = (bool)(false);
 static const float_round_style round_style = (float_round_style)(round_toward_zero);
 static const int digits = (int)(0);
 static const int digits10 = (int)(0);

 static const int max_digits10 = (int)(0);

 static const int max_exponent = (int)(0);
 static const int max_exponent10 = (int)(0);
 static const int min_exponent = (int)(0);
 static const int min_exponent10 = (int)(0);
 static const int radix = (int)(0);
 };


template<class _Ty>
 class numeric_limits
  : public _Num_base
 {
public:
 static _Ty (min)() throw ()
  {
  return (_Ty(0));
  }

 static _Ty (max)() throw ()
  {
  return (_Ty(0));
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (_Ty(0));
  }

 static _Ty round_error() throw ()
  {
  return (_Ty(0));
  }

 static _Ty denorm_min() throw ()
  {
  return (_Ty(0));
  }

 static _Ty infinity() throw ()
  {
  return (_Ty(0));
  }

 static _Ty quiet_NaN() throw ()
  {
  return (_Ty(0));
  }

 static _Ty signaling_NaN() throw ()
  {
  return (_Ty(0));
  }
 };

template<class _Ty>
 class numeric_limits<const _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };

template<class _Ty>
 class numeric_limits<const volatile _Ty>
  : public numeric_limits<_Ty>
 {
 };


struct _Num_int_base
 : public _Num_base
 {
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(true);
 static const bool is_integer = (bool)(true);
 static const bool is_modulo = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const int radix = (int)(2);
 };


struct _Num_float_base
 : public _Num_base
 {
 static const float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
 static const bool has_denorm_loss = (bool)(true);
 static const bool has_infinity = (bool)(true);
 static const bool has_quiet_NaN = (bool)(true);
 static const bool has_signaling_NaN = (bool)(true);
 static const bool is_bounded = (bool)(true);
 static const bool is_exact = (bool)(false);
 static const bool is_iec559 = (bool)(true);
 static const bool is_integer = (bool)(false);
 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(true);
 static const bool is_specialized = (bool)(true);
 static const bool tinyness_before = (bool)(true);
 static const bool traps = (bool)(false);
 static const float_round_style round_style = (float_round_style)(round_to_nearest);
 static const int radix = (int)(2);
 };


template<> class numeric_limits<char>
 : public _Num_int_base
 {
public:
 typedef char _Ty;

 static _Ty (min)() throw ()
  {
  return ((-128));
  }

 static _Ty (max)() throw ()
  {
  return (127);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)((-128) != 0);
 static const int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
 static const int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<wchar_t>
 : public _Num_int_base
 {
public:
 typedef wchar_t _Ty;

 static _Ty (min)() throw ()
  {
  return ((_Ty)0x0000);
  }

 static _Ty (max)() throw ()
  {
  return ((_Ty)0xffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(0x0000 != 0);
 static const int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));

 static const int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);

 };


template<> class numeric_limits<_Bool>
 : public _Num_int_base
 {
public:
 typedef bool _Ty;

 static _Ty (min)() throw ()
  {
  return (false);
  }

 static _Ty (max)() throw ()
  {
  return (true);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_modulo = (bool)(false);
 static const bool is_signed = (bool)(false);
 static const int digits = (int)(1);
 static const int digits10 = (int)(0);
 };


template<> class numeric_limits<signed char>
 : public _Num_int_base
 {
public:
 typedef signed char _Ty;

 static _Ty (min)() throw ()
  {
  return ((-128));
  }

 static _Ty (max)() throw ()
  {
  return (127);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 - 1);
 static const int digits10 = (int)((8 - 1) * 301L / 1000);
 };


template<> class numeric_limits<unsigned char>
 : public _Num_int_base
 {
public:
 typedef unsigned char _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8);
 static const int digits10 = (int)(8 * 301L / 1000);
 };


template<> class numeric_limits<short>
 : public _Num_int_base
 {
public:
 typedef short _Ty;

 static _Ty (min)() throw ()
  {
  return ((-32768));
  }

 static _Ty (max)() throw ()
  {
  return (32767);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (short) - 1);
 static const int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);

 };



template<> class numeric_limits<unsigned short>
 : public _Num_int_base
 {
public:
 typedef unsigned short _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned short));
 static const int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);

 };
#line 649 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"
template<> class numeric_limits<int>
 : public _Num_int_base
 {
public:
 typedef int _Ty;

 static _Ty (min)() throw ()
  {
  return ((-2147483647 - 1));
  }

 static _Ty (max)() throw ()
  {
  return (2147483647);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (int) - 1);
 static const int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned int>
 : public _Num_int_base
 {
public:
 typedef unsigned int _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffffffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned int));
 static const int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);

 };


template<> class numeric_limits<long>
 : public _Num_int_base
 {
public:
 typedef long _Ty;

 static _Ty (min)() throw ()
  {
  return ((-2147483647L - 1));
  }

 static _Ty (max)() throw ()
  {
  return (2147483647L);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (long) - 1);
 static const int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned long>
 : public _Num_int_base
 {
public:
 typedef unsigned long _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffffffffUL);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned long));
 static const int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);

 };
#line 942 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"
template<> class numeric_limits<__int64>
 : public _Num_int_base
 {
public:
 typedef __int64 _Ty;

 static _Ty (min)() throw ()
  {
  return (-0x7fffffffffffffff - 1);
  }

 static _Ty (max)() throw ()
  {
  return (0x7fffffffffffffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(true);
 static const int digits = (int)(8 * sizeof (__int64) - 1);
 static const int digits10 = (int)((8 * sizeof (__int64) - 1) * 301L / 1000);

 };


template<> class numeric_limits<unsigned __int64>
 : public _Num_int_base
 {
public:
 typedef unsigned __int64 _Ty;

 static _Ty (min)() throw ()
  {
  return (0);
  }

 static _Ty (max)() throw ()
  {
  return (0xffffffffffffffff);
  }

 static _Ty lowest() throw ()
  {
  return ((min)());
  }

 static _Ty epsilon() throw ()
  {
  return (0);
  }

 static _Ty round_error() throw ()
  {
  return (0);
  }

 static _Ty denorm_min() throw ()
  {
  return (0);
  }

 static _Ty infinity() throw ()
  {
  return (0);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (0);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (0);
  }

 static const bool is_signed = (bool)(false);
 static const int digits = (int)(8 * sizeof (unsigned __int64));
 static const int digits10 = (int)(8 * sizeof (unsigned __int64) * 301L / 1000);

 };



template<> class numeric_limits<float>
 : public _Num_float_base
 {
public:
 typedef float _Ty;

 static _Ty (min)() throw ()
  {
  return (1.175494351e-38F);
  }

 static _Ty (max)() throw ()
  {
  return (3.402823466e+38F);
  }

 static _Ty lowest() throw ()
  {
  return (-(max)());
  }

 static _Ty epsilon() throw ()
  {
  return (1.192092896e-07F);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _FDenorm._Float);
  }

 static _Ty infinity() throw ()
  {
  return (:: _FInf._Float);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _FNan._Float);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _FSnan._Float);
  }

 static const int digits = (int)(24);
 static const int digits10 = (int)(6);

 static const int max_digits10 = (int)(2 + 24 * 301L / 1000);

 static const int max_exponent = (int)((int)128);
 static const int max_exponent10 = (int)((int)38);
 static const int min_exponent = (int)((int)(-125));
 static const int min_exponent10 = (int)((int)(-37));
 };


template<> class numeric_limits<double>
 : public _Num_float_base
 {
public:
 typedef double _Ty;

 static _Ty (min)() throw ()
  {
  return (2.2250738585072014e-308);
  }

 static _Ty (max)() throw ()
  {
  return (1.7976931348623158e+308);
  }

 static _Ty lowest() throw ()
  {
  return (-(max)());
  }

 static _Ty epsilon() throw ()
  {
  return (2.2204460492503131e-016);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _Denorm._Double);
  }

 static _Ty infinity() throw ()
  {
  return (:: _Inf._Double);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _Nan._Double);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _Snan._Double);
  }

 static const int digits = (int)(53);
 static const int digits10 = (int)(15);

 static const int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static const int max_exponent = (int)((int)1024);
 static const int max_exponent10 = (int)((int)308);
 static const int min_exponent = (int)((int)(-1021));
 static const int min_exponent10 = (int)((int)(-307));
 };


template<> class numeric_limits<long double>
 : public _Num_float_base
 {
public:
 typedef long double _Ty;

 static _Ty (min)() throw ()
  {
  return (2.2250738585072014e-308);
  }

 static _Ty (max)() throw ()
  {
  return (1.7976931348623158e+308);
  }

 static _Ty lowest() throw ()
  {
  return (-(max)());
  }

 static _Ty epsilon() throw ()
  {
  return (2.2204460492503131e-016);
  }

 static _Ty round_error() throw ()
  {
  return (0.5);
  }

 static _Ty denorm_min() throw ()
  {
  return (:: _LDenorm._Long_double);
  }

 static _Ty infinity() throw ()
  {
  return (:: _LInf._Long_double);
  }

 static _Ty quiet_NaN() throw ()
  {
  return (:: _LNan._Long_double);
  }

 static _Ty signaling_NaN() throw ()
  {
  return (:: _LSnan._Long_double);
  }

 static const int digits = (int)(53);
 static const int digits10 = (int)(15);

 static const int max_digits10 = (int)(2 + 53 * 301L / 1000);

 static const int max_exponent = (int)((int)1024);
 static const int max_exponent10 = (int)((int)308);
 static const int min_exponent = (int)((int)(-1021));
 static const int min_exponent10 = (int)((int)(-307));
 };
#line 1454 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\limits"
}

#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\new"







#pragma pack(push,8)
#pragma warning(push, 3)
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\new"
namespace std {







typedef void (__cdecl * new_handler) ();




struct nothrow_t
 {
 };

extern const nothrow_t nothrow;



__declspec(dllimport) new_handler __cdecl set_new_handler( new_handler)
 throw ();

__declspec(dllimport) new_handler __cdecl get_new_handler()
 throw ();
}


void __cdecl operator delete(void *) throw ();
#pragma warning(suppress: 4985)
 void *__cdecl operator new(size_t _Size) throw (...);



inline void *__cdecl operator new(size_t, void *_Where) throw ()
 {
 return (_Where);
 }

inline void __cdecl operator delete(void *, void *) throw ()
 {
 }




inline void *__cdecl operator new[](size_t, void *_Where) throw ()
 {
 return (_Where);
 }

inline void __cdecl operator delete[](void *, void *) throw ()
 {
 }


void __cdecl operator delete[](void *) throw ();

                                               void *__cdecl operator new[](size_t _Size)
 throw (...);



                                                 void *__cdecl operator new(size_t _Size, const ::std:: nothrow_t&)
 throw ();

                                                 void *__cdecl operator new[](size_t _Size, const ::std:: nothrow_t&)
 throw ();

void __cdecl operator delete(void *, const ::std:: nothrow_t&)
 throw ();

void __cdecl operator delete[](void *, const ::std:: nothrow_t&)
 throw ();




using ::std:: new_handler;



#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"







#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\utility"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iosfwd"
#line 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iosfwd"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
#line 15 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 15 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"





#pragma pack(push,8)
#line 35 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
extern "C" {
#line 44 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
typedef void *_HFILE;
#line 71 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);
typedef int (__cdecl * _CRT_REPORT_HOOKW)(int, wchar_t *, int *);
#line 103 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);
#line 164 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);







struct _CrtMemBlockHeader;
typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        size_t lCounts[5];
        size_t lSizes[5];
        size_t lHighWaterCount;
        size_t lTotalCount;
} _CrtMemState;
#line 1018 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
}



extern "C++" {
#line 1035 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
#pragma warning(suppress: 4985)
 void * __cdecl operator new[](size_t _Size);


                                               void * __cdecl operator new(
        size_t _Size,
        int,
        const char *,
        int
        );

#pragma warning(suppress: 4985)
 void * __cdecl operator new[](
        size_t _Size,
        int,
        const char *,
        int
        );

void __cdecl operator delete[](void *);
void __cdecl operator delete(void * _P, int, const char *, int);
void __cdecl operator delete[](void * _P, int, const char *, int);
#line 1113 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdbg.h"
}






#pragma pack(pop)
#line 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iosfwd"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {


typedef _Longlong streamoff;
typedef _Longlong streamsize;
#line 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iosfwd"
extern __declspec(dllimport) const streamoff _BADOFF;



template<class _Statetype>
 class fpos
 {
 typedef fpos<_Statetype> _Myt;

public:
                    fpos(streamoff _Off = 0)
  : _Myoff(_Off), _Fpos(0), _Mystate()
  {
  }

                    fpos(_Statetype _State, fpos_t _Fileposition)
  : _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
  {
  }

 _Statetype state() const
  {
  return (_Mystate);
  }

 void state(_Statetype _State)
  {
  _Mystate = _State;
  }

 fpos_t seekpos() const
  {
  return (_Fpos);
  }

                    operator streamoff() const
  {
  return ((streamoff)(_Myoff + ((long long)(_Fpos))));
  }

 streamoff operator-(const _Myt& _Right) const
  {
  return ((streamoff)*this - (streamoff)_Right);
  }

 _Myt& operator+=(streamoff _Off)
  {
  _Myoff += _Off;
  return (*this);
  }

 _Myt& operator-=(streamoff _Off)
  {
  _Myoff -= _Off;
  return (*this);
  }

 _Myt operator+(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt operator-(streamoff _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 bool operator==(const _Myt& _Right) const
  {
  return ((streamoff)*this == (streamoff)_Right);
  }

 bool operator==(streamoff _Right) const
  {
  return ((streamoff)*this == _Right);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

private:
 streamoff _Myoff;
 fpos_t _Fpos;
 _Statetype _Mystate;
 };






typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;


template<class _Elem,
 class _Int_type>
 struct _Char_traits
 {
 typedef _Elem char_type;
 typedef _Int_type int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(
                     const _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  for (; 0 < _Count; --_Count, ++_First1, ++_First2)
   if (!eq(*_First1, *_First2))
    return (lt(*_First1, *_First2) ? -1 : +1);
  return (0);
  }

 static size_t __cdecl length( const _Elem *_First)
  {
  size_t _Count;
  for (_Count = 0; !eq(*_First, _Elem()); ++_First)
   ++_Count;
  return (_Count);
  }

 static _Elem *__cdecl copy(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  for (; 0 < _Count; --_Count, ++_Next, ++_First2)
   assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl _Copy_s(
                           _Elem *_First1, size_t _Dest_size,
                     const _Elem *_First2, size_t _Count)
  {
  { if (!(_Count <= _Dest_size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
  return (copy(_First1, _First2, _Count));
  }

 static const _Elem *__cdecl find(
                     const _Elem *_First,
  size_t _Count, const _Elem& _Ch)
  {
  for (; 0 < _Count; --_Count, ++_First)
   if (eq(*_First, _Ch))
    return (_First);
  return (0);
  }

 static _Elem *__cdecl move(
                       _Elem *_First1,
                     const _Elem *_First2, size_t _Count)
  {
  _Elem *_Next = _First1;
  if (_First2 < _Next && _Next < _First2 + _Count)
   for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
    assign(*--_Next, *--_First2);
  else
   for (; 0 < _Count; --_Count, ++_Next, ++_First2)
    assign(*_Next, *_First2);
  return (_First1);
  }

 static _Elem *__cdecl assign(
                       _Elem *_First,
  size_t _Count, _Elem _Ch)
  {
  _Elem *_Next = _First;
  for (; 0 < _Count; --_Count, ++_Next)
   assign(*_Next, _Ch);
  return (_First);
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(
  const int_type& _Meta) throw ()
  {
  return ((_Elem)_Meta);
  }

 static int_type __cdecl to_int_type(
  const _Elem& _Ch) throw ()
  {
  return ((int_type)_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(
  const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((int_type)(-1));
  }
 };


template<class _Elem>
 struct char_traits
  : public _Char_traits<_Elem, long>
 {
 };
#line 286 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iosfwd"
template<>
 struct char_traits<wchar_t>
 {
 typedef wchar_t _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(
  const int_type& _Meta) throw ()
  {
  return (_Meta);
  }

 static int_type __cdecl to_int_type(
  const _Elem& _Ch) throw ()
  {
  return (_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(
  const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((wint_t)(0xFFFF));
  }
 };



template<>
 struct char_traits<unsigned short>
 {
 typedef unsigned short _Elem;
 typedef _Elem char_type;
 typedef wint_t int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: wmemcmp((const wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: wcslen((const wchar_t *)_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemcpy((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_words,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));

  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: wmemchr((const wchar_t *)_First,
    _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: wmemmove((wchar_t *)_First1,
    (const wchar_t *)_First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left < _Right);
  }

 static _Elem __cdecl to_char_type(const int_type& _Meta) throw ()
  {
  return (_Meta);
  }

 static int_type __cdecl to_int_type(const _Elem& _Ch) throw ()
  {
  return (_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((wint_t)(0xFFFF));
  }
 };



template<> struct char_traits<char>
 {
 typedef char _Elem;
 typedef _Elem char_type;
 typedef int int_type;
 typedef streampos pos_type;
 typedef streamoff off_type;
 typedef _Mbstatet state_type;

 static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? 0
   : :: memcmp(_First1, _First2, _Count));
  }

 static size_t __cdecl length(const _Elem *_First)
  {
  return (*_First == 0 ? 0
   : :: strlen(_First));
  }

 static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memcpy(_First1, _First2, _Count));
  }

 static _Elem *__cdecl _Copy_s(
                               _Elem *_First1, size_t _Size_in_bytes,
                     const _Elem *_First2, size_t _Count)
  {
  if (0 < _Count)
   ::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
  return (_First1);
  }

 static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
  const _Elem& _Ch)
  {
  return (_Count == 0 ? (const _Elem *)0
   : (const _Elem *):: memchr(_First, _Ch, _Count));
  }

 static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
  size_t _Count)
  {
  return (_Count == 0 ? _First1
   : (_Elem *):: memmove(_First1, _First2, _Count));
  }

 static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
  _Elem _Ch)
  {
  return ((_Elem *):: memset(_First, _Ch, _Count));
  }

 static void __cdecl assign(_Elem& _Left, const _Elem& _Right) throw ()
  {
  _Left = _Right;
  }

 static bool __cdecl eq(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static bool __cdecl lt(const _Elem& _Left,
  const _Elem& _Right) throw ()
  {
  return ((unsigned char)_Left < (unsigned char)_Right);
  }

 static _Elem __cdecl to_char_type(
  const int_type& _Meta) throw ()
  {
  return ((_Elem)_Meta);
  }

 static int_type __cdecl to_int_type(
  const _Elem& _Ch) throw ()
  {
  return ((unsigned char)_Ch);
  }

 static bool __cdecl eq_int_type(const int_type& _Left,
  const int_type& _Right) throw ()
  {
  return (_Left == _Right);
  }

 static int_type __cdecl not_eof(
  const int_type& _Meta) throw ()
  {
  return (_Meta != eof() ? _Meta : !eof());
  }

 static int_type __cdecl eof() throw ()
  {
  return ((-1));
  }
 };


template<class _Ty>
 class allocator;
class ios_base;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ios;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class istreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class ostreambuf_iterator;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_streambuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_istream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ostream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_iostream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringbuf;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_istringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_ostringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Alloc = allocator<_Elem> >
 class basic_stringstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_filebuf;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ifstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_ofstream;
template<class _Elem,
 class _Traits = char_traits<_Elem> >
 class basic_fstream;


template<class _Elem,
 class _InIt >
 class num_get;
template<class _Elem,
 class _OutIt >
 class num_put;
template<class _Elem>
 class collate;



typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
 allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
 allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
 allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
 allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
 wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
 allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;
#line 736 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iosfwd"
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
 numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
 numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
 wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;

}


#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\utility"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"







#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4180 4296)
#line 66 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"
namespace std {

template<class _Ty>
 struct _Ptr_traits
 {
 };

template<class _Ty>
 struct _Ptr_traits<_Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<const _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = false;
 };

template<class _Ty>
 struct _Ptr_traits<volatile _Ty *>
 {
 static const bool _Is_const = false;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Ptr_traits<const volatile _Ty *>
 {
 static const bool _Is_const = true;
 static const bool _Is_volatile = true;
 };

template<class _Ty>
 struct _Is_funptr
  : false_type
 {
 };

template<class _Ty>
 struct _Is_memfunptr
  : false_type
 {
 };
#line 121 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"
template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__cdecl *)(_Types...)> : true_type { }; template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__stdcall *)(_Types...)> : true_type { }; template<class _Ret, class... _Types> struct _Is_funptr<_Ret (__fastcall *)(_Types...)> : true_type { };
#line 133 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile> : true_type { };


template<class _Ret,
 class... _Types>
 struct _Is_funptr<_Ret (*)(_Types..., ...)>
  : true_type
 {
 };
#line 152 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"
template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> : true_type { }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> : true_type { };




template<class _Ty>
 struct add_const
 {
 typedef const _Ty type;
 };


template<class _Ty>
 struct add_volatile
 {
 typedef volatile _Ty type;
 };


template<class _Ty>
 struct add_cv
 {
 typedef const volatile _Ty type;
 };


template<class _Ty>
 struct add_reference
 {
 typedef _Ty& type;
 };
#line 191 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"
template<> struct add_reference< void> { typedef void type; }; template<> struct add_reference<const void> { typedef const void type; }; template<> struct add_reference<volatile void> { typedef volatile void type; }; template<> struct add_reference<const volatile void> { typedef const volatile void type; };



template<class _Ty>
 struct add_lvalue_reference
 {
 typedef typename add_reference<_Ty>::type type;
 };



template<class _Ty>
 struct add_rvalue_reference
 {
 typedef _Ty&& type;
 };
#line 216 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"
template<> struct add_rvalue_reference< void> { typedef void type; }; template<> struct add_rvalue_reference<const void> { typedef const void type; }; template<> struct add_rvalue_reference<volatile void> { typedef volatile void type; }; template<> struct add_rvalue_reference<const volatile void> { typedef const volatile void type; };



template<class _Ty>
 typename add_rvalue_reference<_Ty>::type
  declval() throw ();


template<class _Ty>
 struct remove_extent
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_extent<_Ty[_Ix]>
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct remove_extent<_Ty[]>
 {
 typedef _Ty type;
 };


template<class _Ty>
 struct remove_all_extents
 {
 typedef _Ty type;
 };

template<class _Ty, unsigned int _Ix>
 struct remove_all_extents<_Ty[_Ix]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };

template<class _Ty>
 struct remove_all_extents<_Ty[]>
 {
 typedef typename remove_all_extents<_Ty>::type type;
 };


template<class _Ty>
 struct remove_pointer
 {
 typedef _Ty type;
 };
#line 276 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"
template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };



template<class _Ty>
 struct add_pointer
 {
 typedef typename remove_reference<_Ty>::type *type;
 };



template<class _Ty>
 struct _Is_void
  : false_type
 {
 };

template<>
 struct _Is_void<void>
  : true_type
 {
 };

template<class _Ty>
 struct is_void
  : _Is_void<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_array
  : false_type
 {
 };

template<class _Ty, size_t _Nx>
 struct is_array<_Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_array<_Ty[]>
  : true_type
 {
 };


template<class _Ty>
 struct is_lvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_lvalue_reference<_Ty&>
  : true_type
 {
 };


template<class _Ty>
 struct is_rvalue_reference
  : false_type
 {
 };

template<class _Ty>
 struct is_rvalue_reference<_Ty&&>
  : true_type
 {
 };


template<class _Ty>
 struct is_reference
  : _Cat_base<is_lvalue_reference<_Ty>::value
  || is_rvalue_reference<_Ty>::value>
 {
 };



template<class _Ty>
 struct _Is_member_object_pointer
  : false_type
 {
 };

template<class _Ty1, class _Ty2>
 struct _Is_member_object_pointer<_Ty1 _Ty2::*>
  : _Cat_base<!_Is_memfunptr<_Ty1 _Ty2::*>::value>
 {
 };

template<class _Ty>
 struct is_member_object_pointer
  : _Is_member_object_pointer<typename remove_cv<_Ty>::type>
 {
 };


template<class _Ty>
 struct is_member_function_pointer
  : _Cat_base<_Is_memfunptr<typename remove_cv<_Ty>::type>::value>
 {
 };


template<class _Ty>
 struct _Is_pointer
  : false_type
 {
 };

template<class _Ty>
 struct _Is_pointer<_Ty *>
  : _Cat_base<!is_member_object_pointer<_Ty *>::value
  && !is_member_function_pointer<_Ty *>::value>
 {
 };

template<class _Ty>
 struct is_pointer
  : _Is_pointer<typename remove_cv<_Ty>::type>
 {
 };



template<class _Ty>
 struct _Is_nullptr_t
  : _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
 {
 };


template<class _Ty>
 struct is_union : _Cat_base<__is_union(_Ty)>
 {
 };


template<class _Ty>
 struct is_class : _Cat_base<__is_class(_Ty)>
 {
 };


template<class _Ty>
 struct is_function
  : _Cat_base<_Is_funptr<typename remove_cv<_Ty>::type *>::value>
 {
 };

template<class _Ty>
 struct is_function<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_function<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_arithmetic
  : _Cat_base<is_integral<_Ty>::value
  || is_floating_point<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_fundamental
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_void<_Ty>::value
  || _Is_nullptr_t<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_object
  : _Cat_base<!is_function<_Ty>::value
  && !is_reference<_Ty>::value
  && !is_void<_Ty>::value>
 {
 };



template<class _From, class _To>
 struct is_convertible
  : _Cat_base<__is_convertible_to(_From, _To)>
 {
 };


template<class _Ty>
 struct is_enum
  : _Cat_base<__is_enum(_Ty)>
 {
 };


template<class _Ty>
 struct is_compound
  : _Cat_base<!is_fundamental<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_member_pointer
  : _Cat_base<is_member_object_pointer<_Ty>::value
  || is_member_function_pointer<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_scalar
  : _Cat_base<is_arithmetic<_Ty>::value
  || is_enum<_Ty>::value
  || is_pointer<_Ty>::value
  || is_member_pointer<_Ty>::value
  || _Is_nullptr_t<_Ty>::value>
 {
 };


template<class _Ty>
 struct is_const
  : _Cat_base<_Ptr_traits<_Ty *>::_Is_const
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<_Ty[_Nx]>
  : false_type
 {
 };

template<class _Ty, unsigned int _Nx>
 struct is_const<const _Ty[_Nx]>
  : true_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_const<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_volatile
  : _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
  && !is_function<_Ty>::value>
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&>
  : false_type
 {
 };

template<class _Ty>
 struct is_volatile<_Ty&&>
  : false_type
 {
 };


template<class _Ty>
 struct is_pod : _Cat_base<__is_pod(_Ty)>
 {
 };


template<class _Ty>
 struct is_empty : _Cat_base<__is_empty(_Ty)>
 {
 };


template<class _Ty>
 struct is_polymorphic : _Cat_base<__is_polymorphic(_Ty)>
 {
 };


template<class _Ty>
 struct is_abstract : _Cat_base<__is_abstract(_Ty)>
 {
 };


template<class _Ty>
 struct is_standard_layout : _Cat_base<__is_standard_layout(_Ty)>
 {
 };


template<class _Ty>
 struct is_literal_type : _Cat_base<__is_literal_type(_Ty)>
 {
 };


template<class _Ty>
 struct is_trivial : _Cat_base<__is_trivial(_Ty)>
 {
 };


template<class _Ty>
 struct has_virtual_destructor
  : _Cat_base<__has_virtual_destructor(_Ty)>
 {
 };





template<class _Ty,
 class... _Args>
 struct is_constructible
  : _Cat_base<__is_constructible(_Ty, _Args...)>
 {
 };




template<class _Ty>
 struct is_copy_constructible
  : is_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct has_copy_constructor
  : is_copy_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_default_constructible
  : is_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_default_constructor
  : is_default_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_move_constructible
  : is_constructible<

   _Ty,

   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct has_move_constructor
  : is_move_constructible<_Ty>::type
 {
 };



template<class _To,
 class _From>
 struct _Is_assignable
 {
 template<class _Dest,
  class _Src>
  static auto _Fn(int)
   -> decltype((::std:: declval<_Dest>() = ::std:: declval<_Src>()),
    true_type());

 template<class _Dest,
  class _Src>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_To, _From>(0)) type;
 };

template<class _To,
 class _From>
 struct is_assignable
  : _Is_assignable<_To, _From>::type

 {
 };



template<class _Ty>
 struct is_copy_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct has_copy_assign
  : is_copy_assignable<_Ty>::type
 {
 };



template<class _Ty>
 struct is_move_assignable
  : is_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };

template<class _Ty>
 struct has_move_assign
  : is_move_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_destructible
  : _Cat_base<__is_destructible(_Ty)>
 {
 };





template<class _Ty,
 class... _Args>
 struct is_trivially_constructible
  : _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
 {
 };



template<class _Ty>
 struct is_trivially_copy_constructible

  : is_trivially_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct is_trivially_copyable
  : is_trivially_copy_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_trivial_copy_constructor
  : is_trivially_copy_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_default_constructible
  : is_trivially_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_trivial_default_constructor
  : is_trivially_default_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_constructible

  : is_trivially_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct has_trivial_move_constructor
  : is_trivially_move_constructible<_Ty>::type
 {
 };


template<class _To,
 class _From>
 struct is_trivially_assignable

  : _Cat_base<__is_trivially_assignable(_To, _From)>

 {
 };


template<class _Ty>
 struct is_trivially_copy_assignable

  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct has_trivial_copy_assign
  : is_trivially_copy_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_move_assignable

  : is_trivially_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct has_trivial_move_assign
  : is_trivially_move_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_trivially_destructible
  : _Cat_base<__has_trivial_destructor(_Ty)>
 {
 };





template<class _Ty,
 class... _Args>
 struct is_nothrow_constructible
  : _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
 {
 };




template<class _Ty>
 struct is_nothrow_copy_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type
 {
 };


template<class _Ty>
 struct has_nothrow_copy_constructor

  : is_nothrow_copy_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct is_nothrow_default_constructible
  : is_nothrow_constructible<_Ty>::type
 {
 };


template<class _Ty>
 struct has_nothrow_default_constructor
  : is_nothrow_default_constructible<_Ty>::type
 {
 };



template<class _Ty>
 struct is_nothrow_move_constructible
  : is_nothrow_constructible<
   _Ty,
   typename add_rvalue_reference<_Ty>::type
  >::type
 {
 };


template<class _Ty>
 struct has_nothrow_move_constructor
  : is_nothrow_move_constructible<_Ty>::type
 {
 };


template<class _To,
 class _From>
 struct is_nothrow_assignable

  : _Cat_base<__is_nothrow_assignable(_To, _From)>

 {
 };


template<class _Ty>
 struct is_nothrow_copy_assignable

  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_lvalue_reference<
    typename add_const<_Ty>::type
   >::type
  >::type

 {
 };


template<class _Ty>
 struct has_nothrow_copy_assign
  : is_nothrow_copy_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_move_assignable

  : is_nothrow_assignable<
   typename add_lvalue_reference<_Ty>::type,
   typename add_rvalue_reference<_Ty>::type
  >::type

 {
 };


template<class _Ty>
 struct has_nothrow_move_assign
  : is_nothrow_move_assignable<_Ty>::type
 {
 };


template<class _Ty>
 struct is_nothrow_destructible

  : _Cat_base<__is_nothrow_destructible(_Ty)>

 {
 };


template<class _Ty>
 struct has_trivial_constructor

  : is_trivially_default_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_trivial_copy

  : is_trivially_copy_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_trivial_assign

  : is_trivially_copy_assignable<_Ty>::type

 {
 };


template<class _Ty>
 struct has_trivial_destructor

  : is_trivially_destructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_nothrow_constructor

  : is_nothrow_default_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_nothrow_copy

  : is_nothrow_copy_constructible<_Ty>::type

 {
 };


template<class _Ty>
 struct has_nothrow_assign

  : is_nothrow_copy_assignable<_Ty>::type

 {
 };


template<class _Ty>
 struct _Has_signed_vals
  : _Cat_base<(typename remove_cv<_Ty>::type)(-1)
  < (typename remove_cv<_Ty>::type)(0)>
 {
 };

template<class _Ty>
 struct is_signed
  : _Cat_base<is_floating_point<_Ty>::value || (is_integral<_Ty>::value
  && _Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::type>::value)>
 {
 };


template<class _Ty>
 struct is_unsigned
  : _Cat_base<is_integral<_Ty>::value
  && !_Has_signed_vals<
   typename _If<is_integral<_Ty>::value, _Ty, int>::type>::value>
 {
 };


template<class _Ty>
 struct _Change_sign
 {
 static_assert(
  ((is_integral<_Ty>::value || is_enum<_Ty>::value)
   && !is_same<_Ty, bool>::value),
  "make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
  "cv-qualified) integral type or enumeration but not a bool type.");

 typedef
  typename _If<is_same<_Ty, signed char>::value
   || is_same<_Ty, unsigned char >::value, signed char,
  typename _If<is_same<_Ty, short >::value
   || is_same<_Ty, unsigned short >::value, short,
  typename _If<is_same<_Ty, int >::value
   || is_same<_Ty, unsigned int >::value, int,
  typename _If<is_same<_Ty, long >::value
   || is_same<_Ty, unsigned long >::value, long,
  typename _If<is_same<_Ty, long long >::value
   || is_same<_Ty, unsigned long long>::value, long long,
  typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
  typename _If<sizeof (_Ty) == sizeof (short ), short,
  typename _If<sizeof (_Ty) == sizeof (int ), int,
  typename _If<sizeof (_Ty) == sizeof (long ), long,
   long long
  >::type>::type>::type>::type>::type>::type>::type>::type>::type
   _Signed;

 typedef
  typename _If<is_same<_Signed, signed char>::value, unsigned char,
  typename _If<is_same<_Signed, short >::value, unsigned short,
  typename _If<is_same<_Signed, int >::value, unsigned int,
  typename _If<is_same<_Signed, long >::value, unsigned long,
   unsigned long long
  >::type>::type>::type>::type
   _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const _Ty>
 {
 typedef const typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<volatile _Ty>
 {
 typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };

template<class _Ty>
 struct _Change_sign<const volatile _Ty>
 {
 typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
 typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
 };


template<class _Ty>
 struct make_signed
 {
 typedef typename _Change_sign<_Ty>::_Signed type;
 };


template<class _Ty>
 struct make_unsigned
 {
 typedef typename _Change_sign<_Ty>::_Unsigned type;
 };



template<class _Ty>
 struct _Get_align
 {
 _Ty _Elt0;
 char _Elt1;
 _Ty _Elt2;

 _Get_align();
 ~_Get_align();
 };




template<class _Ty>
 struct alignment_of
  : integral_constant<size_t, (sizeof (_Get_align<typename remove_reference<_Ty>::type>) - 2 * sizeof (typename remove_reference<_Ty>::type))>
 {
 };






template<class _Ty,
 size_t _Len>
 union _Align_type
 {
 _Ty _Val;
 char _Pad[_Len];
 };

template<size_t _Len,
 size_t _Align,
 class _Ty,
 bool _Ok>
 struct _Aligned;

template<size_t _Len,
 size_t _Align,
 class _Ty>
 struct _Aligned<_Len, _Align, _Ty, true>
 {
 typedef _Align_type<_Ty, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, double, false>
 {
 typedef _Align_type<max_align_t, _Len> type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, int, false>
 {
 typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, short, false>
 {
 typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
 };

template<size_t _Len,
 size_t _Align>
 struct _Aligned<_Len, _Align, char, false>
 {
 typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
 };

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 struct aligned_storage
 {
 typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
 };





template<size_t... _Vals>
 struct _Maximum;

template<>
 struct _Maximum<>
 {
 static const size_t value = 0;
 };

template<size_t _Val>
 struct _Maximum<_Val>
 {
 static const size_t value = _Val;
 };

template<size_t _First,
 size_t _Second,
 size_t... _Rest>
 struct _Maximum<_First, _Second, _Rest...>
  : _Maximum<(_First < _Second ? _Second : _First), _Rest...>
 {
 };

template<size_t _Len,
 class... _Types>
 struct aligned_union
 {
 static const size_t _Max_len = _Maximum<
  _Len, sizeof(_Types)...>::value;
 static const size_t alignment_value = _Maximum<
  alignment_of<_Types>::value...>::value;
 typedef typename aligned_storage<_Max_len, alignment_value>::type type;
 };


template<class _Ty>
 struct underlying_type
 {
 typedef __underlying_type(_Ty) type;
 };


template<class _Ty>
 struct rank
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct rank<_Ty[_Ix]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };

template<class _Ty>
 struct rank<_Ty[]>
  : integral_constant<size_t, rank<_Ty>::value + 1>
 {
 };


template<class _Ty, unsigned int _Nx>
 struct _Extent
  : integral_constant<size_t, 0>
 {
 };

template<class _Ty, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], 0>
  : integral_constant<size_t, _Ix>
 {
 };

template<class _Ty, unsigned int _Nx, unsigned int _Ix>
 struct _Extent<_Ty[_Ix], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx>
 struct _Extent<_Ty[], _Nx>
  : _Extent<_Ty, _Nx - 1>
 {
 };

template<class _Ty, unsigned int _Nx = 0>
 struct extent
  : _Extent<_Ty, _Nx>
 {
 };


template<class _Base, class _Der>
 struct is_base_of : _Cat_base<__is_base_of(_Base, _Der)>
 {
 };


template<class _Ty>
 struct decay
 {
 typedef typename remove_reference<_Ty>::type _Ty1;

 typedef typename _If<is_array<_Ty1>::value,
  typename remove_extent<_Ty1>::type *,
  typename _If<is_function<_Ty1>::value,
   typename add_pointer<_Ty1>::type,
   typename remove_cv<_Ty1>::type>::type>::type type;
 };

namespace tr1 {
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_reference;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_nothrow_assign;
using ::std:: has_nothrow_constructor;
using ::std:: has_nothrow_copy;
using ::std:: has_trivial_assign;
using ::std:: has_trivial_constructor;
using ::std:: has_trivial_copy;
using ::std:: has_trivial_destructor;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
 }


template<class... _Ty>
 struct common_type;

template<class _Ty>
 struct common_type<_Ty>
 {
 typedef typename decay<_Ty>::type type;
 };

template<class _Ty0,
 class _Ty1>
 struct common_type<_Ty0, _Ty1>
 {
 typedef typename decay<
  decltype(_Always_false<_Ty0>::value
   ? ::std:: declval<_Ty0>()
   : ::std:: declval<_Ty1>())
 >::type type;
 };

template<class _Ty0,
 class _Ty1,
 class... _Ty>
 struct common_type<_Ty0, _Ty1, _Ty...>
 {
 typedef typename common_type<
  typename common_type<_Ty0, _Ty1>::type, _Ty...
 >::type type;
 };


template<size_t... _Indexes>
 struct _Arg_idx
 {
 };


template<class _Ty>
 class reference_wrapper;

template<class _Ty>
 struct _Unrefwrap_helper
 {
 typedef _Ty type;
 };

template<class _Ty>
 struct _Unrefwrap_helper<reference_wrapper<_Ty> >
 {
 typedef _Ty& type;
 };

template<class _Ty>
 struct _Unrefwrap
 {
 typedef typename decay<_Ty>::type _Ty1;
 typedef typename _Unrefwrap_helper<_Ty1>::type type;
 };


template<class _Ty>
 struct identity
 {
 typedef _Ty type;

 const _Ty& operator()(const _Ty& _Left) const
  {
  return (_Left);
  }
 };


template<class _Ty> inline
 _Ty&& forward(typename remove_reference<_Ty>::type& _Arg)
 {
 return (static_cast<_Ty&&>(_Arg));
 }

template<class _Ty> inline
 _Ty&& forward(typename remove_reference<_Ty>::type&& _Arg) throw ()
 {
 static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
 return (static_cast<_Ty&&>(_Arg));
 }


template<class _Ty> inline
 typename remove_reference<_Ty>::type&&
  move(_Ty&& _Arg) throw ()
 {
 return ((typename remove_reference<_Ty>::type&&)_Arg);
 }


template<class _Ty> inline
 typename remove_reference<_Ty>::type&&
  _Move(_Ty&& _Arg) throw ()
 {
 return ((typename remove_reference<_Ty>::type&&)_Arg);
 }


template<class _Ty> inline
 typename _If<!has_nothrow_move_constructor<_Ty>::value
  && has_copy_constructor<_Ty>::value,
   const _Ty&, _Ty&&>::type
 move_if_noexcept(_Ty& _Arg) throw ()
 {
 return (::std:: move(_Arg));
 }


template<class _Ty> inline
 typename decay<_Ty>::type _Decay_copy(_Ty&& _Arg)
 {
 return (::std:: forward<_Ty>(_Arg));
 }
}


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xrefwrap"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180)

namespace std {
template<class _Ty>
 class reference_wrapper;


template<class _Ret,
 class... _Types>
 struct _Fun_class_base
 {
 };

template<class _Ret,
 class _Farg0>
 struct _Fun_class_base<_Ret, _Farg0>
  : public unary_function<_Farg0, _Ret>
 {
 };

template<class _Ret,
 class _Farg0,
 class _Farg1>
 struct _Fun_class_base<_Ret, _Farg0, _Farg1>
  : public binary_function<_Farg0, _Farg1, _Ret>
 {
 };

template<class _Ret,
 class _Farg0,
 class _Farg1,
 class... _Types>
 struct _Fun_class_base<_Ret, _Farg0, _Farg1, _Types...>
 {
 };




template<class _Fty,
 class... _Args>
 struct _Result_of
 {
 typedef decltype(
  ::std:: declval<_Fty>()(::std:: declval<_Args>()...)) type;
 };
#line 74 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xrefwrap"
template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* )(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) , _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) const, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__thiscall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__cdecl _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__stdcall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; }; template<class _Ret, class _Ty, class... _Mfargs, class _Obj, class... _Args> struct _Result_of<_Ret (__fastcall _Ty::* const)(_Mfargs...) const volatile, _Obj, _Args...> { typedef _Ret type; };


template<class _Ret,
 class _Ty,
 class _Obj,
 class... _Args>
 struct _Result_of<_Ret _Ty::*, _Obj, _Args...>
 {

 typedef typename _Copy_cv<_Ret,
  typename remove_pointer<
   typename remove_reference<_Obj>::type>::type>::type type;
 };

template<class _Ret,
 class _Ty,
 class _Obj,
 class... _Args>
 struct _Result_of<_Ret _Ty::*const, _Obj, _Args...>
 {

 typedef typename _Copy_cv<_Ret,
  typename remove_pointer<
   typename remove_reference<_Obj>::type>::type>::type const type;
 };

template<class _Fty>
 struct result_of;
#line 118 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xrefwrap"
template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __cdecl (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<_Fty __stdcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __stdcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<_Fty __fastcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; }; template<class _Fty, class... _Args> struct result_of<reference_wrapper<_Fty> __fastcall (_Args...)> { typedef typename _Result_of<_Fty, _Args...>::type type; };






template<class _Ret,
 class _Arg0>
 struct _Pmd_caller
 {
 template<class _Pmd,
  class _Farg0>
  static _Ret& _Call_pmd(_Pmd _Pm, _Farg0&& _Fx0, true_type)
  {
  return ((_Ret&)(_Fx0.*_Pm));
  }

 template<class _Pmd,
  class _Farg0>
  static _Ret& _Call_pmd(_Pmd _Pm, _Farg0&& _Fx0, false_type)
  {
  return ((_Ret&)((*_Fx0).*_Pm));
  }

 template<class _Pmd,
  class _Farg0>
  static _Ret& _Apply_pmd(_Pmd _Pm, _Farg0&& _Fx0)
  {
  typedef typename remove_cv<
   typename remove_reference<_Arg0>::type>::type _Arg0_bare;
  typedef typename remove_cv<
   typename remove_reference<_Farg0>::type>::type _Farg0_bare;
  typedef _Cat_base<is_same<_Arg0_bare, _Farg0_bare>::value
   || (is_base_of<_Arg0_bare, _Farg0_bare>::value
    && is_same<typename add_reference<_Farg0_bare>::type,
     _Farg0>::value)> _Is_obj;

  return (_Call_pmd<_Pmd, _Farg0>(_Pm,
   ::std:: forward<_Farg0>(_Fx0), _Is_obj()));
  }
 };


template<class _Ty,
 bool _Indirect>
 struct _Callable_base;

template<class _Ty>
 struct _Callable_base<_Ty, false>
 {
 enum {_EEN_INDIRECT = 0};
 typedef _Ty _MyTy;
 typedef const _Ty& _MyCnstTy;

 _Callable_base(const _Ty& _Val)
  : _Object(_Val)
  {
  }

 const _Ty& _Get() const
  {
  return (_Object);
  }

 _Ty& _Get()
  {
  return (_Object);
  }

 void _Reset(_Ty& _Val)
  {
  static_assert(_Always_false<_Ty>::value,
   "can't assign to reference_wrapper<T&>");
  }

private:
 _Callable_base& operator=(const _Callable_base&);

 _Ty _Object;
};

template<class _Ty>
 struct _Callable_base<_Ty, true>
 {

 enum {_EEN_INDIRECT = 1};
 typedef _Ty _MyTy;
 typedef _Ty& _MyCnstTy;

 _Callable_base(_Ty& _Val)
  : _Ptr(::std:: addressof(_Val))
  {
  }

 _MyCnstTy _Get() const
  {
  return (*_Ptr);
  }

 _Ty& _Get()
  {
  return (*_Ptr);
  }

 void _Reset(_Ty& _Val)
  {
  _Ptr = ::std:: addressof(_Val);
  }

private:
 _Ty *_Ptr;
};


template<class _Ty,
 class _Memty,
 bool _Indirect = false>
 struct _Callable_pmd
  : _Callable_base<_Ty, _Indirect>
 {
 _Callable_pmd(const _Callable_pmd& _Right)
  : _Callable_base<_Ty, _Indirect>(_Right._Get())
  {
  }

 _Callable_pmd(_Ty& _Val)
  : _Callable_base<_Ty, _Indirect>(_Val)
  {
  }

 template<class _Ret,
  class _Arg0>
  _Ret& _ApplyX(_Arg0&& _A0) const
  {
  return (_Pmd_caller<_Ret, _Memty>::
   _Apply_pmd(this->_Get(), ::std:: forward<_Arg0>(_A0)));
  }
 };


template<class _Ty,
 bool _Indirect = false>
 struct _Callable_obj
  : _Callable_base<_Ty, _Indirect>
 {
 typedef _Callable_base<_Ty, _Indirect> _Mybase;

 template<class _Ty2>
  _Callable_obj(_Ty2&& _Val)
  : _Mybase(::std:: forward<_Ty2>(_Val))
  {
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args) const
  {
  return (this->_Get()(::std:: forward<_Types>(_Args)...));
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args)
  {
  return (this->_Get()(::std:: forward<_Types>(_Args)...));
  }

 };



template<class _Ret,
 class _Arg0>
 struct _Pmf_caller
 {
 template<class _Pmf,
  class _Farg0,
  class... _Ftypes>
  static _Ret _Call_pmf(_Pmf _Pm, _Farg0&& _Fx0, true_type,
   _Ftypes&&... _Fargs)
  {
  typedef typename _Copy_cv<_Arg0, _Farg0>::type
   _Funobj_cv;
  return (((_Funobj_cv)_Fx0.*_Pm)(::std:: forward<_Ftypes>(_Fargs)...));
  }

 template<class _Pmf,
  class _Farg0,
  class... _Ftypes>
  static _Ret _Call_pmf(_Pmf _Pm, _Farg0&& _Fx0, false_type,
   _Ftypes&&... _Fargs)
  {
  return (((*_Fx0).*_Pm)(::std:: forward<_Ftypes>(_Fargs)...));
  }

 template<class _Pmf,
  class _Farg0,
  class... _Ftypes>
  static _Ret _Apply_pmf(_Pmf _Pm, _Farg0&& _Fx0,
   _Ftypes&&... _Fargs)
  {
  typedef typename remove_reference<_Arg0>::type _Arg0_bare0;
  typedef typename remove_cv<_Arg0_bare0>::type _Arg0_bare;
  typedef typename remove_reference<_Farg0>::type _Farg0_bare;
  typedef _Cat_base<is_same<_Arg0_bare, _Farg0_bare>::value
   || (is_base_of<_Arg0_bare, _Farg0_bare>::value
    && is_same<typename add_reference<_Farg0_bare>::type,
     _Farg0>::value)> _Is_obj;

  return (_Call_pmf<_Pmf, _Farg0&&, _Ftypes&&...>(_Pm,
   ::std:: forward<_Farg0>(_Fx0), _Is_obj(),
    ::std:: forward<_Ftypes>(_Fargs)...));
  }
 };



template<class _Ty,
 class _Memty,
 bool _Indirect = false>
 struct _Callable_pmf
  : _Callable_base<_Ty, _Indirect>
 {
 _Callable_pmf(const _Callable_pmf& _Right)
  : _Callable_base<_Ty, _Indirect>(_Right._Get())
  {
  }

 _Callable_pmf(_Ty& _Val)
  : _Callable_base<_Ty, _Indirect>(_Val)
  {
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args) const
  {
  return (_Pmf_caller<_Ret, _Memty>::
   _Apply_pmf(this->_Get(), ::std:: forward<_Types>(_Args)...));
  }

 };


template<class _Ty,
 bool _Indirect = false>
 struct _Callable_fun
  : _Callable_base<_Ty, _Indirect>
 {
 _Callable_fun(const _Callable_fun& _Right)
  : _Callable_base<_Ty, _Indirect>(_Right._Get())
  {
  }

 _Callable_fun(_Ty& _Val)
  : _Callable_base<_Ty, _Indirect>(_Val)
  {
  }

 template<class _Ret,
  class... _Types>
  _Ret _ApplyX(_Types&&... _Args) const
  {
  return (this->_Get()(::std:: forward<_Types>(_Args)...));
  }

 };


template<class _Callable>
 struct _Call_wrapper_base
 {
 typedef typename _Callable::_MyTy _MyTy;
 typedef typename _Callable::_MyCnstTy _MyCnstTy;

 _Call_wrapper_base(_MyTy& _Val)
  : _Callee(_Val)
  {
  }

 void _Reset(_MyTy& _Val)
  {
  _Callee._Reset(_Val);
  }

 _MyCnstTy _Get() const
  {
  return (_Callee._Get());
  }

 _MyCnstTy _Get()
  {
  return (_Callee._Get());
  }

 _Callable _Callee;
 };


template<class _Callable,
 bool _Is_abstract = false>
 struct _Call_wrapper
 : _Call_wrapper_base<_Callable>
 {
 typedef _Call_wrapper_base<_Callable> _Mybase;

 _Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
  : _Call_wrapper_base<_Callable>(_Val)
  {
  }

 template<class... _Types>
  typename result_of<
   typename _Callable::_MyTy(_Types...)>::type
   operator()(_Types&&... _Args) const
  {
  typedef typename result_of<
   typename _Callable::_MyTy(_Types...)>::type _Ret;
  return (this->_Callee.template _ApplyX<_Ret>(
   ::std:: forward<_Types>(_Args)...));
  }

 };

template<class _Callable>
 struct _Call_wrapper<_Callable, true>
 : _Call_wrapper_base<_Callable>
 {
 typedef _Call_wrapper_base<_Callable> _Mybase;

 _Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
  : _Call_wrapper_base<_Callable>(_Val)
  {
  }
 };


template<class _Ty>
 struct _Has_result_and_arg_type
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::argument_type> * = 0, _Identity<typename _Uty::result_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };


template<class _Ty>
 struct _Has_result_and_2arg_type
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::first_argument_type> * = 0, _Identity<typename _Uty::second_argument_type> * = 0, _Identity<typename _Uty::result_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };


template<class _Ty,
 bool>
 struct _Refwrap_result0
 {
 typedef typename _Ty::result_type result_type;
 };

template<class _Ty>
 struct _Refwrap_result0<_Ty, false>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result1_helper
  : _Refwrap_result0<_Ty, _Has_result_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result1_helper<_Ty, true>
  : unary_function<typename _Ty::argument_type,
   typename _Ty::result_type>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result1
  : _Refwrap_result0<_Ty, _Has_result_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result1<_Ty, true>
  : _Refwrap_result1_helper<_Ty,
   is_base_of<unary_function<
    typename _Ty::argument_type,
    typename _Ty::result_type>, _Ty>::value>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result2_helper
  : _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result2_helper<_Ty, true>
  : binary_function<typename _Ty::first_argument_type,
   typename _Ty::second_argument_type,
   typename _Ty::result_type>,
  _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
 {
 };


template<class _Ty,
 bool>
 struct _Refwrap_result2
  : _Refwrap_result1<_Ty, _Has_result_and_arg_type<_Ty>::type::value>
 {
 };

template<class _Ty>
 struct _Refwrap_result2<_Ty, true>
  : _Refwrap_result2_helper<_Ty,
   is_base_of<binary_function<
    typename _Ty::first_argument_type,
    typename _Ty::second_argument_type,
    typename _Ty::result_type>, _Ty>::value>
 {
 };


template<class _Ty>
 struct _Refwrap_impl
  : _Call_wrapper<_Callable_obj<_Ty, true>,
   is_abstract<_Ty>::value>,
   _Refwrap_result2<_Ty, _Has_result_and_2arg_type<_Ty>::type::value>
 {
 _Refwrap_impl(_Ty& _Val)
  : _Call_wrapper<_Callable_obj<_Ty, true>,
   is_abstract<_Ty>::value>(_Val)
  {
  }
 };

template<class _Rx,
 class _Arg0>
 struct _Refwrap_impl<_Rx _Arg0::*>
  : _Call_wrapper<_Callable_pmd<_Rx _Arg0::*, _Arg0, false> >
 {
 typedef _Rx _Arg0::* _Fty;
 typedef _Rx result_type;

 _Refwrap_impl(_Fty& _Val)
  : _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
  {
  }
 };

template<class _Rx,
 class _Arg0>
 struct _Refwrap_impl<_Rx _Arg0::*const>
  : _Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0, false> >
 {
 typedef _Rx _Arg0::*const _Fty;
 typedef _Rx result_type;
 _Refwrap_impl(_Fty& _Val)
  : _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
  {
  }
 };
#line 603 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xrefwrap"
template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __cdecl (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __stdcall (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx __fastcall (_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *)(_Types...), false> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall *_Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty _Val) : _Call_wrapper<_Callable_fun<_Fty, false> >(_Val) { } };
#line 623 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xrefwrap"
template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__cdecl *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__stdcall *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__fastcall *)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall * _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__cdecl *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__cdecl *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__cdecl *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__stdcall *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__stdcall *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__stdcall *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } }; template<class _Rx, class... _Types> struct _Refwrap_impl<_Rx(__fastcall *const)(_Types...)> : _Call_wrapper<_Callable_fun< _Rx(__fastcall *const)(_Types...), true> >, _Fun_class_base<_Rx, _Types...> { typedef _Rx(__fastcall *const _Fty)(_Types...); typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_fun<_Fty, true> >(_Val) { } };
#line 645 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xrefwrap"
template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* )(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* )(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) > : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) , _Arg0, true> >, _Fun_class_base<_Rx, _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) ; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) const> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) const, _Arg0, true> >, _Fun_class_base<_Rx, const _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) const; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) volatile, _Arg0, true> >, _Fun_class_base<_Rx, volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__thiscall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__thiscall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__thiscall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__cdecl _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__cdecl _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__cdecl _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__stdcall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__stdcall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__stdcall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } }; template<class _Rx, class _Arg0, class... _Types> struct _Refwrap_impl<_Rx(__fastcall _Arg0::* const)(_Types...) const volatile> : _Call_wrapper<_Callable_pmf< _Rx(__fastcall _Arg0::* const)(_Types...) const volatile, _Arg0, true> >, _Fun_class_base<_Rx, const volatile _Arg0 *, _Types...> { typedef _Rx(__fastcall _Arg0::* const _Fty)(_Types...) const volatile; typedef _Rx result_type; _Refwrap_impl(_Fty& _Val) : _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val) { } };




template<class _Ty>
 class reference_wrapper
 : public _Refwrap_impl<_Ty>
 {
public:
 typedef reference_wrapper<_Ty> _Myt;
 typedef _Refwrap_impl<_Ty> _Mybase;
 typedef _Ty type;

 reference_wrapper(_Ty& _Val) throw ()
  : _Mybase(_Val)
  {
  }

 reference_wrapper(const _Myt& _Right) throw ()
  : _Mybase(_Right.get())
  {
  }

 _Myt& operator=(const _Myt& _Right) throw ()
  {
  this->_Reset(_Right.get());
  return (*this);
  }

 operator _Ty&() const throw ()
  {
  return (this->_Get());
  }

 _Ty& get() const throw ()
  {
  return (this->_Get());
  }

 reference_wrapper(_Ty&&) = delete;
 };


template<class _Ty>
 reference_wrapper<_Ty>
  ref(_Ty& _Val) throw ()
 {
 return (reference_wrapper<_Ty>(_Val));
 }

template<class _Ty>
 void ref(const _Ty&&) = delete;

template<class _Ty>
 reference_wrapper<_Ty>
  ref(reference_wrapper<_Ty> _Val) throw ()
 {
 return (_Val);
 }

template<class _Ty>
 reference_wrapper<const _Ty>
  cref(const _Ty& _Val) throw ()
 {
 return (reference_wrapper<const _Ty>(_Val));
 }

template<class _Ty>
 void cref(const _Ty&&) = delete;

template<class _Ty>
 reference_wrapper<const _Ty>
  cref(reference_wrapper<_Ty> _Val) throw ()
 {
 return (reference_wrapper<const _Ty>(_Val.get()));
 }

namespace tr1 {
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 1549 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\type_traits"


namespace std {

template<class _Ty>
 using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
 using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
 using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
 using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
 using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
 using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
 using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
 using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
 using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
 using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
 using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
 using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
 using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
 using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
 using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
 size_t _Align = alignment_of<max_align_t>::value>
 using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
 class... _Types>
 using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
 using decay_t = typename decay<_Ty>::type;

template<bool _Test,
 class _Ty = void>
 using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
 class _Ty1,
 class _Ty2>
 using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
 using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
 using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
 using result_of_t = typename result_of<_Ty>::type;
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\utility"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4180 4512)

namespace std {

template<class _Ty> inline
 void swap(_Ty&, _Ty&)

                                             ;

template<class _FwdIt1,
 class _FwdIt2> inline
 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
 {
 swap(*_Left, *_Right);
 }


template<class _Ty,
 size_t _Size> inline
 void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])

 {
 if (&_Left != &_Right)
  {
  _Ty *_First1 = _Left;
  _Ty *_Last1 = _First1 + _Size;
  _Ty *_First2 = _Right;
  for (; _First1 != _Last1; ++_First1, ++_First2)
   ::std:: iter_swap(_First1, _First2);
  }
 }

template<class _Ty> inline
 void swap(_Ty& _Left, _Ty& _Right)


 {
 _Ty _Tmp = _Move(_Left);
 _Left = _Move(_Right);
 _Right = _Move(_Tmp);
 }


template<class _Ty> inline
 void _Swap_adl(_Ty& _Left, _Ty& _Right)
 {
 swap(_Left, _Right);
 }


struct piecewise_construct_t
 {
 };

const piecewise_construct_t piecewise_construct =
 piecewise_construct_t();



template<class...>
 class tuple;


template<class _Ty1,
 class _Ty2>
 struct pair
 {
 typedef pair<_Ty1, _Ty2> _Myt;
 typedef _Ty1 first_type;
 typedef _Ty2 second_type;

 pair()
  : first(), second()
  {
  }

 pair(const _Ty1& _Val1, const _Ty2& _Val2)
  : first(_Val1), second(_Val2)
  {
  }

 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<const _Other1&, _Ty1>::value
   && is_convertible<const _Other2&, _Ty2>::value,
   void>::type>
  pair(const pair<_Other1, _Other2>& _Right)
  : first(_Right.first), second(_Right.second)
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(const pair<_Other1, _Other2>& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }


 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   _Arg_idx<_Indexes1...>,
   _Arg_idx<_Indexes2...>);

 template<class... _Types1,
  class... _Types2> inline
  pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)

                                                            ;


 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<_Other1, _Ty1>::value
   && is_convertible<_Other2, _Ty2>::value,
   void>::type>
  pair(_Other1&& _Val1, _Other2&& _Val2)


  : first(::std:: forward<_Other1>(_Val1)),
    second(::std:: forward<_Other2>(_Val2))
  {
  }

 template<class _Other1,
  class _Other2,
  class = typename enable_if<is_convertible<_Other1, _Ty1>::value
   && is_convertible<_Other2, _Ty2>::value,
   void>::type>
  pair(pair<_Other1, _Other2>&& _Right)


  : first(::std:: forward<_Other1>(_Right.first)),
   second(::std:: forward<_Other2>(_Right.second))
  {
  }

 template<class _Other1,
  class _Other2>
  _Myt& operator=(pair<_Other1, _Other2>&& _Right)


  {
  first = ::std:: forward<_Other1>(_Right.first);
  second = ::std:: forward<_Other2>(_Right.second);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right)


  {
  first = ::std:: forward<_Ty1>(_Right.first);
  second = ::std:: forward<_Ty2>(_Right.second);
  return (*this);
  }

 void swap(_Myt& _Right)


  {
  if (this != &_Right)
   {
   _Swap_adl(first, _Right.first);
   _Swap_adl(second, _Right.second);
   }
  }

 _Myt& operator=(const _Myt& _Right)
  {
  first = _Right.first;
  second = _Right.second;
  return (*this);
  }

 _Ty1 first;
 _Ty2 second;
 };



template<class _Ty1,
 class _Ty2> inline
 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)

 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator==(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first == _Right.first && _Left.second == _Right.second);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator!=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Left.first < _Right.first ||
  (!(_Right.first < _Left.first) && _Left.second < _Right.second));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator<=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty1,
 class _Ty2> inline
 bool operator>=(const pair<_Ty1, _Ty2>& _Left,
  const pair<_Ty1, _Ty2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Ty1,
 class _Ty2> inline
 pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type>
  make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
 {
 typedef pair<typename _Unrefwrap<_Ty1>::type,
  typename _Unrefwrap<_Ty2>::type> _Mypair;
 return (_Mypair(::std:: forward<_Ty1>(_Val1),
  ::std:: forward<_Ty2>(_Val2)));
 }


 namespace rel_ops
  {
template<class _Ty> inline
 bool operator!=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty> inline
 bool operator>(const _Ty& _Left, const _Ty& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty> inline
 bool operator<=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty> inline
 bool operator>=(const _Ty& _Left, const _Ty& _Right)
 {
 return (!(_Left < _Right));
 }
  }
}

namespace std {

template<class _Tuple>
 struct tuple_size
 {
 static_assert(_Always_false<_Tuple>::value,
  "The C++ Standard doesn't define tuple_size for this type.");
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_size<pair<_Ty1, _Ty2> >
 : integral_constant<size_t, 2>
 {
 };

template<class... _Types>
 struct tuple_size<tuple<_Types...> >
 : integral_constant<size_t, sizeof...(_Types)>
 {
 };


template<class _Tuple>
 struct tuple_size<const _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };

template<class _Tuple>
 struct tuple_size<const volatile _Tuple>
 : tuple_size<_Tuple>
 {
 };


template<size_t _Idx,
 class _Tuple>
 struct tuple_element;

template<int _Idx,
 class _Ty>
 struct _Pair_data;

template<class _Ty1,
 class _Ty2>
 struct _Pair_data<0, pair<_Ty1, _Ty2> >
 {
 typedef typename add_lvalue_reference<const _Ty1>::type _Ctype;
 typedef typename add_lvalue_reference<_Ty1>::type _Rtype;
 typedef typename add_rvalue_reference<_Ty1>::type _RRtype;

 static _Rtype _Val(pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }

 static _Ctype _Val(const pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.first);
  }

 static _RRtype _Val(pair<_Ty1, _Ty2>&& _Pr)
  {
  return (::std:: forward<_Ty1>(_Pr.first));
  }
 };

template<class _Ty1,
 class _Ty2>
 struct _Pair_data<1, pair<_Ty1, _Ty2> >
 {
 typedef typename add_lvalue_reference<const _Ty2>::type _Ctype;
 typedef typename add_lvalue_reference<_Ty2>::type _Rtype;
 typedef typename add_rvalue_reference<_Ty2>::type _RRtype;

 static _Rtype _Val(pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }

 static _Ctype _Val(const pair<_Ty1, _Ty2>& _Pr)
  {
  return (_Pr.second);
  }

 static _RRtype _Val(pair<_Ty1, _Ty2>&& _Pr)
  {
  return (::std:: forward<_Ty2>(_Pr.second));
  }
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<0, pair<_Ty1, _Ty2> >
 {
 typedef _Ty1 type;
 };

template<class _Ty1,
 class _Ty2>
 struct tuple_element<1, pair<_Ty1, _Ty2> >
 {
 typedef _Ty2 type;
 };

template<int _Idx,
 class _Ty1,
 class _Ty2> inline
 typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Rtype
  get(pair<_Ty1, _Ty2>& _Pr) throw ()
 {
 return (_Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr));
 }

template<int _Idx,
 class _Ty1,
 class _Ty2> inline
 typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Ctype
  get(const pair<_Ty1, _Ty2>& _Pr) throw ()
 {
 return (_Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr));
 }

template<int _Idx,
 class _Ty1,
 class _Ty2> inline
 typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_RRtype
  get(pair<_Ty1, _Ty2>&& _Pr) throw ()
 {
 typedef typename _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_RRtype
  _RRtype;
 return (::std:: forward<_RRtype>(
  _Pair_data<_Idx, pair<_Ty1, _Ty2> >::_Val(_Pr)));
 }
}

namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}
}


#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#line 36 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct __declspec(dllimport) _Container_base0
 {
 void _Orphan_all()
  {
  }

 void _Swap_all(_Container_base0&)
  {
  }
 };

struct _Iterator_base0
 {
 void _Adopt(const void *)
  {
  }

 const _Container_base0 *_Getcont() const
  {
  return (0);
  }
 };


struct _Container_proxy
 {
 _Container_proxy()
  : _Mycont(0), _Myfirstiter(0)
  {
  }

 const _Container_base12 *_Mycont;
 _Iterator_base12 *_Myfirstiter;
 };

struct __declspec(dllimport) _Container_base12
 {
public:
 _Container_base12()
  : _Myproxy(0)
  {
  }

 _Container_base12(const _Container_base12&)
  : _Myproxy(0)
  {
  }

 _Container_base12& operator=(const _Container_base12&)
  {
  return (*this);
  }

 ~_Container_base12() throw ()
  {
  _Orphan_all();
  }

 _Iterator_base12 **_Getpfirst() const
  {
  return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
  }

 void _Orphan_all();
 void _Swap_all(_Container_base12&);

 _Container_proxy *_Myproxy;
 };

struct _Iterator_base12
 {
public:
 _Iterator_base12()
  : _Myproxy(0), _Mynextiter(0)
  {
  }

 _Iterator_base12(const _Iterator_base12& _Right)
  : _Myproxy(0), _Mynextiter(0)
  {
  *this = _Right;
  }

 _Iterator_base12& operator=(const _Iterator_base12& _Right)
  {
  if (_Myproxy == _Right._Myproxy)
   ;
  else if (_Right._Myproxy != 0)
   _Adopt(_Right._Myproxy->_Mycont);
  else
   {




   }
  return (*this);
  }

 ~_Iterator_base12() throw ()
  {




  }

 void _Adopt(const _Container_base12 *_Parent)
  {
  if (_Parent == 0)
   {




   }
  else
   {
   _Container_proxy *_Parent_proxy = _Parent->_Myproxy;
#line 171 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
   _Myproxy = _Parent_proxy;

   }
  }

 void _Clrcont()
  {
  _Myproxy = 0;
  }

 const _Container_base12 *_Getcont() const
  {
  return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
  }

 _Iterator_base12 **_Getpnext()
  {
  return (&_Mynextiter);
  }

 void _Orphan_me()
  {
#line 206 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
  }

 _Container_proxy *_Myproxy;
 _Iterator_base12 *_Mynextiter;
 };


inline void _Container_base12::_Orphan_all()
 {
#line 226 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
 }

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
 {




 _Container_proxy *_Temp = _Myproxy;
 _Myproxy = _Right._Myproxy;
 _Right._Myproxy = _Temp;

 if (_Myproxy != 0)
  _Myproxy->_Mycont = (_Container_base12 *)this;
 if (_Right._Myproxy != 0)
  _Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
 }


typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;
#line 260 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _Ty>
 struct _Get_unchecked_type
  { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::_Unchecked_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Ty>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Is_checked_helper
  { template<class _Uty> static auto _Fn(int, _Identity<typename _Uty::_Unchecked_type> * = 0, _Identity<typename _Uty::_Unchecked_type> * = 0, _Identity<typename _Uty::_Unchecked_type> * = 0) -> true_type; template<class _Uty> static auto _Fn(_Wrap_int) -> false_type; typedef decltype(_Fn<_Ty>(0)) type; };


template<class _Iter> inline
 typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
 {
 return (typename _Is_checked_helper<_Iter>::type());
 }


template<class _Iter> inline
 _Iter _Unchecked(_Iter _Src)
 {
 return (_Src);
 }


template<class _Iter,
 class _UIter> inline
 _Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
 {
 _Dest = _Src;
 return (_Dest);
 }



struct input_iterator_tag
 {
 };

struct _Mutable_iterator_tag
 {
 };

struct output_iterator_tag
 : _Mutable_iterator_tag
 {
 };

struct forward_iterator_tag
 : input_iterator_tag, _Mutable_iterator_tag
 {
 };

struct bidirectional_iterator_tag
 : forward_iterator_tag
 {
 };

struct random_access_iterator_tag
 : bidirectional_iterator_tag
 {
 };


struct _Nonscalar_ptr_iterator_tag
 {
 };
struct _Scalar_ptr_iterator_tag
 {
 };


template<class _Category,
 class _Ty,
 class _Diff = ptrdiff_t,
 class _Pointer = _Ty *,
 class _Reference = _Ty&>
 struct iterator
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };

template<class _Category,
 class _Ty,
 class _Diff,
 class _Pointer,
 class _Reference,
 class _Base>
 struct _Iterator012
  : public _Base
 {
 typedef _Category iterator_category;
 typedef _Ty value_type;
 typedef _Diff difference_type;
 typedef _Diff distance_type;
 typedef _Pointer pointer;
 typedef _Reference reference;
 };


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;


template<class _Iter>
 struct iterator_traits
 {
 typedef typename _Iter::iterator_category iterator_category;
 typedef typename _Iter::value_type value_type;
 typedef typename _Iter::difference_type difference_type;
 typedef difference_type distance_type;
 typedef typename _Iter::pointer pointer;
 typedef typename _Iter::reference reference;
 };

template<class _Ty>
 struct iterator_traits<_Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;
 };

template<class _Ty>
 struct iterator_traits<const _Ty *>
 {
 typedef random_access_iterator_tag iterator_category;
 typedef _Ty value_type;
 typedef ptrdiff_t difference_type;
 typedef ptrdiff_t distance_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 };


template<class _Iter> inline
 typename iterator_traits<_Iter>::iterator_category
  _Iter_cat(const _Iter&)
 {
 typename iterator_traits<_Iter>::iterator_category _Cat;
 return (_Cat);
 }


template<class _Iter1,
 class _Iter2> inline
 _Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
 {
 _Nonscalar_ptr_iterator_tag _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2>
 struct _Ptr_cat_helper
 {
 typedef _Nonscalar_ptr_iterator_tag type;
 };

template<class _Elem>
 struct _Ptr_cat_helper<_Elem, _Elem>
 {
 typedef typename _If<is_scalar<_Elem>::value,
  _Scalar_ptr_iterator_tag,
  _Nonscalar_ptr_iterator_tag>::type type;
 };

template<class _Anything>
 struct _Ptr_cat_helper<_Anything *, const _Anything *>
 {
 typedef _Scalar_ptr_iterator_tag type;
 };

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type
  _Ptr_cat(_Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
 return (_Cat);
 }

template<class _Elem1,
 class _Elem2> inline
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type
  _Ptr_cat(const _Elem1 *, _Elem2 *)
 {
 typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
 return (_Cat);
 }
#line 643 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _Iter> inline
 typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
 void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
 {





 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _FwdIt,
 class _Diff> inline
 void _Advance(_FwdIt& _Where, _Diff _Off, forward_iterator_tag)
 {





 for (; 0 < _Off; --_Off)
  ++_Where;
 }

template<class _BidIt,
 class _Diff> inline
 void _Advance(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
 {
 for (; 0 < _Off; --_Off)
  ++_Where;
 for (; _Off < 0; ++_Off)
  --_Where;
 }

template<class _RanIt,
 class _Diff> inline
 void _Advance(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
 {
 _Where += _Off;
 }

template<class _InIt,
 class _Diff> inline
 void advance(_InIt& _Where, _Diff _Off)
 {
 _Advance(_Where, _Off, _Iter_cat(_Where));
 }



template<class _Iter> inline
 typename iterator_traits<_Iter>::difference_type
  *_Dist_type(_Iter)
 {
 return (0);
 }


template<class _InIt,
 class _Diff> inline
  void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
   input_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _FwdIt,
 class _Diff> inline
  void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
   forward_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _BidIt,
 class _Diff> inline
  void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
   bidirectional_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  ++_Off;
 }

template<class _RanIt,
 class _Diff> inline
  void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
   random_access_iterator_tag)
 {
#line 750 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
 _Off += _Last - _First;
 }

template<class _InIt> inline
 typename iterator_traits<_InIt>::difference_type
  distance(_InIt _First, _InIt _Last)
 {
 typename iterator_traits<_InIt>::difference_type _Off = 0;
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 return (_Off);
 }

template<class _InIt,
 class _Diff> inline
  void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
 {
 _Distance2(_First, _Last, _Off, _Iter_cat(_First));
 }


template<class _FwdIt> inline
 _FwdIt next(_FwdIt _First,
  typename iterator_traits<_FwdIt>::difference_type _Off = 1)
 {
 static_assert((is_base_of<forward_iterator_tag,
  typename iterator_traits<_FwdIt>::iterator_category>::value),
  "next requires forward iterator");

 ::std:: advance(_First, _Off);
 return (_First);
 }


template<class _BidIt> inline
 _BidIt prev(_BidIt _First,
  typename iterator_traits<_BidIt>::difference_type _Off = 1)
 {
 static_assert((is_base_of<bidirectional_iterator_tag,
  typename iterator_traits<_BidIt>::iterator_category>::value),
  "prev requires bidirectional iterator");

 ::std:: advance(_First, -_Off);
 return (_First);
 }



template<class _Ty>
 struct pointer_traits;

template<class _RanIt,
 class _Base>
 class _Revranit
  : public _Base
 {
public:
 typedef _Revranit<_RanIt, _Base> _Myt;
 typedef typename _Base::difference_type difference_type;
 typedef typename _Base::pointer pointer;
 typedef typename _Base::reference reference;
 typedef _RanIt iterator_type;

 _Revranit()
  {
  }

 explicit _Revranit(_RanIt _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2,
  class _Base2>
  _Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
  : current(_Right.base())
  {
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  _RanIt _Tmp = current;
  return (*--_Tmp);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  --current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  ++current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 template<class _RanIt2,
  class _Base2>
  bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 template<class _RanIt2,
  class _Base2>
  bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
  {
  return (_Right.base() < current);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Right.base() - current);
  }

protected:
 _RanIt current;
 };


template<class _RanIt,
 class _Base,
 class _Diff> inline
 _Revranit<_RanIt, _Base>
  operator+(_Diff _Off,
  const _Revranit<_RanIt, _Base>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2>
 auto inline operator-(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator==(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator!=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator<=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _Base1,
 class _RanIt2,
 class _Base2> inline
 bool operator>=(
  const _Revranit<_RanIt1, _Base1>& _Left,
  const _Revranit<_RanIt2, _Base2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt>
 class reverse_iterator
  : public _Revranit<_RanIt, iterator<
   typename iterator_traits<_RanIt>::iterator_category,
   typename iterator_traits<_RanIt>::value_type,
   typename iterator_traits<_RanIt>::difference_type,
   typename iterator_traits<_RanIt>::pointer,
   typename iterator_traits<_RanIt>::reference> >
 {
 typedef reverse_iterator<_RanIt> _Myt;
 typedef _Revranit<_RanIt, iterator<
  typename iterator_traits<_RanIt>::iterator_category,
  typename iterator_traits<_RanIt>::value_type,
  typename iterator_traits<_RanIt>::difference_type,
  typename iterator_traits<_RanIt>::pointer,
  typename iterator_traits<_RanIt>::reference> > _Mybase;

public:
 typedef typename iterator_traits<_RanIt>::difference_type difference_type;
 typedef typename iterator_traits<_RanIt>::pointer pointer;
 typedef typename iterator_traits<_RanIt>::reference reference;
 typedef _RanIt iterator_type;

 reverse_iterator()
  {
  }

 explicit reverse_iterator(_RanIt _Right)
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  reverse_iterator(const reverse_iterator<_Other>& _Right)
  : _Mybase(_Right.base())
  {
  }

 reverse_iterator(_Mybase _Right)
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Myt& operator=(const reverse_iterator<_Other>& _Right)
  {
  this->current = _Right.base();
  return (*this);
  }

 _Myt& operator++()
  {
  ++*((_Mybase *)this);
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --*((_Mybase *)this);
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  *((_Mybase *)this) += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  *((_Mybase *)this) -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }
 };

template<class _RanIt>
 struct _Is_checked_helper<reverse_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 reverse_iterator<_RanIt> operator+(_Diff _Off,
  const reverse_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
   -> decltype(_Right.base() - _Left.base())
 {
 return (_Right.base() - _Left.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(const reverse_iterator<_RanIt1>& _Left,
  const reverse_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }



template<class _Container>
 auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
 {
 return (_Cont.begin());
 }

template<class _Container>
 auto inline end(_Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Container>
 auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
 {
 return (_Cont.end());
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *begin(_Ty (&_Array)[_Size])
 {
 return (_Array);
 }

template<class _Ty,
 size_t _Size> inline
 _Ty *end(_Ty (&_Array)[_Size])
 {
 return (_Array + _Size);
 }


template<class _Container>
 auto inline cbegin(const _Container& _Cont) -> decltype(::std:: begin(_Cont))
 {
 return (::std:: begin(_Cont));
 }

template<class _Container>
 auto inline cend(const _Container& _Cont) -> decltype(::std:: end(_Cont))
 {
 return (::std:: end(_Cont));
 }


template<class _Container>
 auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
 {
 return (_Cont.rbegin());
 }

template<class _Container>
 auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Container>
 auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
 {
 return (_Cont.rend());
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array + _Size));
 }

template<class _Ty,
 size_t _Size> inline
 reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
 {
 return (reverse_iterator<_Ty *>(_Array));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *> rbegin(initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.end()));
 }

template<class _Elem> inline
 reverse_iterator<const _Elem *> rend(initializer_list<_Elem> _Ilist)
 {
 return (reverse_iterator<const _Elem *>(_Ilist.begin()));
 }


template<class _Container>
 auto inline crbegin(const _Container& _Cont) -> decltype(::std:: rbegin(_Cont))
 {
 return (::std:: rbegin(_Cont));
 }

template<class _Container>
 auto inline crend(const _Container& _Cont) -> decltype(::std:: rend(_Cont))
 {
 return (::std:: rend(_Cont));
 }



template<class _Ty,
 size_t _Size>
 class _Array_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   _Ty,
   ptrdiff_t,
   const _Ty *,
   const _Ty&,
   _Iterator_base>
 {
public:
 typedef _Array_const_iterator<_Ty, _Size> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef const _Ty *pointer;
 typedef const _Ty& reference;
 enum {_EEN_SIZE = _Size};
 enum {_EEN_IDL =
  0};


 _Array_const_iterator()
  {
  _Ptr = 0;
  }

 explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
  {
  _Ptr = _Parg + _Off;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  _Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Ptr);
  }

 reference operator*() const
  {
  return (*_Ptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  return (_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  return (_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }

 pointer _Ptr;
#line 1654 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size>&
  _Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
   typename _Array_const_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_const_iterator<_Ty, _Size> operator+(
  typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
  _Array_const_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _Ty,
 size_t _Size>
 class _Array_iterator
  : public _Array_const_iterator<_Ty, _Size>
 {
public:
 typedef _Array_iterator<_Ty, _Size> _Myiter;
 typedef _Array_const_iterator<_Ty, _Size> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef _Ty value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef _Ty *pointer;
 typedef _Ty& reference;

 _Array_iterator()
  {
  }

 explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
  : _Mybase(_Parg, _Off)
  {
  }
 enum {_EEN_SIZE = _Size};
 enum {_EEN_IDL =
  0};

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  ((_Mybase *)this)->_Rechecked(_Right);
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return ((pointer)((_Mybase *)this)->_Unchecked());
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Ty,
 size_t _Size> inline
 typename _Array_iterator<_Ty, _Size>::_Unchecked_type
  _Unchecked(_Array_iterator<_Ty, _Size> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size>&
  _Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
   typename _Array_iterator<_Ty, _Size>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Ty,
 size_t _Size> inline
 _Array_iterator<_Ty, _Size> operator+(
  typename _Array_iterator<_Ty, _Size>::difference_type _Off,
  _Array_iterator<_Ty, _Size> _Next)
 {
 return (_Next += _Off);
 }


template<class _RanIt>
 class move_iterator
 {
public:
 typedef move_iterator<_RanIt> _Myt;
 typedef typename iterator_traits<_RanIt>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_RanIt>::value_type
  value_type;
 typedef typename iterator_traits<_RanIt>::difference_type
  difference_type;
 typedef _RanIt pointer;
 typedef value_type&& reference;
 typedef _RanIt iterator_type;

 move_iterator()
  {
  }

 explicit move_iterator(iterator_type _Right)
  : current(_Right)
  {
  }

 template<class _RanIt2>
  move_iterator(const move_iterator<_RanIt2>& _Right)
  : current(_Right.base())
  {
  }

 template<class _RanIt2>
  _Myt& operator=(const move_iterator<_RanIt2>& _Right)
  {
  current = _Right.base();
  return (*this);
  }

 _RanIt base() const
  {
  return (current);
  }

 reference operator*() const
  {
  return (::std:: move(*current));
  }

 pointer operator->() const
  {
  return (current);
  }

 _Myt& operator++()
  {
  ++current;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++current;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --current;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --current;
  return (_Tmp);
  }

 template<class _RanIt2>
  bool _Equal(const move_iterator<_RanIt2>& _Right) const
  {
  return (current == _Right.base());
  }



 _Myt& operator+=(difference_type _Off)
  {
  current += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  return (_Myt(current + _Off));
  }

 _Myt& operator-=(difference_type _Off)
  {
  current -= _Off;
  return (*this);
  }

 _Myt operator-(difference_type _Off) const
  {
  return (_Myt(current - _Off));
  }

 reference operator[](difference_type _Off) const
  {
  return (::std:: move(current[_Off]));
  }

 template<class _RanIt2>
  bool _Less(const move_iterator<_RanIt2>& _Right) const
  {
  return (current < _Right.base());
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (current - _Right.base());
  }

protected:
 iterator_type current;
 };

template<class _RanIt>
 struct _Is_checked_helper<move_iterator<_RanIt> >
  : public _Is_checked_helper<_RanIt>
 {
 };


template<class _RanIt,
 class _Diff> inline
 move_iterator<_RanIt>
  operator+(_Diff _Off,
  const move_iterator<_RanIt>& _Right)
 {
 return (_Right + _Off);
 }

template<class _RanIt1,
 class _RanIt2>
 auto inline operator-(
  move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
   -> decltype(_Left.base() - _Right.base())
 {
 return (_Left.base() - _Right.base());
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator==(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator!=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator<=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _RanIt1,
 class _RanIt2> inline
 bool operator>=(
  const move_iterator<_RanIt1>& _Left,
  const move_iterator<_RanIt2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _RanIt> inline
 move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
 {
 return (move_iterator<_RanIt>(_Iter));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_impl(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Copy_impl(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt copy(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Rechecked(_Dest,
  _Copy_impl(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest))));
 }
#line 2151 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, input_iterator_tag)
 {
 *_Dest = *_First;
 while (0 < --_Count)
  *++_Dest = *++_First;
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, forward_iterator_tag)
 {
 for (; 0 < _Count; --_Count, ++_Dest, ++_First)
  *_Dest = *_First;
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }
template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt _Copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 return (_Copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _Diff,
 class _OutIt> inline
 _OutIt copy_n(_InIt _First, _Diff _Count,
  _OutIt _Dest)
 {
 if (_Count <= 0)
  return (_Dest);
 else
  return (_Rechecked(_Dest,
   _Copy_n(_Unchecked(_First), _Count,
    _Unchecked(_Dest))));
 }
#line 2340 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = *--_Last;
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Copy_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Copy_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Rechecked(_Dest,
  _Copy_backward(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest))));
 }
#line 2414 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_Dest, ++_First)
  *_Dest = ::std:: move(*_First);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Move(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _OutIt> inline
 _OutIt move(_InIt _First, _InIt _Last,
  _OutIt _Dest)
 {
 return (_Rechecked(_Dest,
  _Move(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest))));
 }
#line 2521 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
 {
 while (_First != _Last)
  *--_Dest = ::std:: move(*--_Last);
 return (_Dest);
 }

template<class _InIt,
 class _OutIt> inline
 _OutIt _Move_backward(_InIt _First, _InIt _Last,
  _OutIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest - _Count, &*_First,
  _Count * sizeof (*_First));
 return (_Dest - _Count);
 }

template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Move_backward(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _BidIt1,
 class _BidIt2> inline
 _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
  _BidIt2 _Dest)
 {
 return (_Rechecked(_Dest,
  _Move_backward(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest))));
 }
#line 2595 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _FwdIt,
 class _Ty> inline
 void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
 for (; _First != _Last; ++_First)
  *_First = _Val;
 }

inline void _Fill(char *_First, char *_Last, char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(signed char *_First, signed char *_Last, signed char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

inline void _Fill(unsigned char *_First, unsigned char *_Last, unsigned char _Val)
 {
 :: memset(_First, _Val, _Last - _First);
 }

template<class _FwdIt,
 class _Ty> inline
 void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
 {
                            ;
 _Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 for (; 0 < _Count; --_Count, ++_Dest)
  *_Dest = _Val;
 return (_Dest);
 }

inline char *_Fill_n(char *_Dest, size_t _Count, char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }

inline signed char *_Fill_n(signed char *_Dest, size_t _Count,
 signed char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }

inline unsigned char *_Fill_n(unsigned char *_Dest, size_t _Count,
 unsigned char _Val)
 {
 :: memset(_Dest, _Val, _Count);
 return (_Dest + _Count);
 }


template<class _OutIt,
 class _Diff,
 class _Ty> inline
 _OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
 {
 return (_Rechecked(_Dest, _Fill_n(_Unchecked(_Dest), _Count, _Val)));
 }
#line 2732 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!(*_First1 == *_First2))
   return (false);
 return (true);
 }

inline bool _Equal(const char *_First1, const char *_Last1,
 const char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
 const signed char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2)
 {
 return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
 }


template<class _InIt1,
 class _InIt2> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2)
 {
 return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2)));
 }
#line 2815 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!_Pred(*_First1, *_First2))
   return (false);
 return (true);
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool equal(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _Pr _Pred)
 {
 return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Pred));
 }
#line 2887 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (((*_First1) < (*_First2)))
   return (true);
  else if (*_First2 < *_First1)
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

inline bool _Lexicographical_compare(
 const unsigned char *_First1, const unsigned char *_Last1,
 const unsigned char *_First2, const unsigned char *_Last2)
 {
 ptrdiff_t _Num1 = _Last1 - _First1;
 ptrdiff_t _Num2 = _Last2 - _First2;
 int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
 return (_Ans < 0 || (_Ans == 0 && _Num1 < _Num2));
 }
#line 2922 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xutility"
template<class _InIt1,
 class _InIt2> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2)
 {
                              ;
                              ;
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2)));
 }


template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (_Pred(*_First1, *_First2))
   return (true);
  else if (_Pred(*_First2, *_First1))
   return (false);
 return (_First1 == _Last1 && _First2 != _Last2);
 }

template<class _InIt1,
 class _InIt2,
 class _Pr> inline
 bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
  _InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
 {
                              ;
                              ;
                      ;
 return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Unchecked(_Last2), _Pred));
 }


template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, true_type, true_type, _Ignored)
 {
 return ((-128) <= _Val && _Val <= 127);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
 {
 return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
 }

template<class _Ty> inline
 bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
 {
 return (_Val <= 127);
 }

template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, false_type, true_type, _Ignored)
 {
 return (0 <= _Val && _Val <= 0xff);
 }

template<class _Ty,
 class _Ignored> inline
 bool _Within_limits(const _Ty& _Val, false_type, false_type, _Ignored)
 {
 return (_Val <= 0xff);
 }

template<class _InIt,
 class _Ty> inline
 bool _Within_limits(_InIt, const _Ty& _Val)
 {
 typedef typename remove_pointer<_InIt>::type _Elem;
 return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
  integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
 }

template<class _InIt> inline
 bool _Within_limits(_InIt, const bool&)
 {
 return (true);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
 {
 if (!_Within_limits(_First, _Val))
  return (_Last);
 _First = static_cast<_InIt>(:: memchr(
  _First, static_cast<unsigned char>(_Val), _Last - _First));
 return (_First ? _First : _Last);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
 {
 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   break;
 return (_First);
 }

template<class _InIt,
 class _Ty> inline
 _InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {

 typedef integral_constant<bool,
  ( is_same<_InIt, char *>::value
  || is_same<_InIt, signed char *>::value
  || is_same<_InIt, unsigned char *>::value
  || is_same<_InIt, const char *>::value
  || is_same<_InIt, const signed char *>::value
  || is_same<_InIt, const unsigned char *>::value)
  && is_integral<_Ty>::value
 > _Memchr_opt;
 return (_Find(_First, _Last, _Val, _Memchr_opt()));
 }

template<class _InIt,
 class _Ty> inline
 _InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Rechecked(_First,
  _Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 _InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   break;
 return (_First);
 }


template<class _InIt,
 class _Ty> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_np(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (*_First == _Val)
   ++_Count;
 return (_Count);
 }

template<class _InIt,
 class _Ty> inline
 typename iterator_traits<_InIt>::difference_type
  count(_InIt _First, _InIt _Last, const _Ty& _Val)
 {
                            ;
 return (_Count_np(_Unchecked(_First), _Unchecked(_Last), _Val));
 }


template<class _InIt,
 class _Ty,
 class _Pr> inline
 typename iterator_traits<_InIt>::difference_type
  _Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr _Pred)
 {
 typename iterator_traits<_InIt>::difference_type _Count = 0;

 for (; _First != _Last; ++_First)
  if (_Pred(*_First, _Val))
   ++_Count;
 return (_Count);
 }


template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool _Is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
 for (; _First1 != _Last1; ++_First1, ++_First2)
  if (!_Pred(*_First1, *_First2))
   break;
 if (_First1 != _Last1)
  {
  _FwdIt2 _Last2 = _First2;
  advance(_Last2, distance(_First1, _Last1));
  for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
   if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
    {
    typename iterator_traits<_FwdIt2>::difference_type _Count =
     _Count_pr(_First2, _Last2, *_Next1, _Pred);
    if (_Count == 0
     || _Count != _Count_pr(_Next1, _Last1, *_Next1, _Pred))
     return (false);
    }
  }
 return (true);
 }

template<class _FwdIt1,
 class _FwdIt2,
 class _Pr> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2, _Pr _Pred)
 {
                              ;
                      ;
 return _Is_permutation(_Unchecked(_First1), _Unchecked(_Last1),
  _Unchecked(_First2), _Pred);
 }


template<class _FwdIt1,
 class _FwdIt2> inline
 bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
  _FwdIt2 _First2)
 {
 return (::std:: is_permutation(_First1, _Last1,
  _First2, equal_to<>()));
 }


template<class _BidIt> inline
 void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
 {
 for (; _First != _Last && _First != --_Last; ++_First)
  ::std:: iter_swap(_First, _Last);
 }

template<class _BidIt> inline
 void reverse(_BidIt _First, _BidIt _Last)
 {
                            ;
 _Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
 }


template<class _FwdIt> inline
 void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
  forward_iterator_tag)
 {
 for (_FwdIt _Next = _Mid; ; )
  {
  ::std:: iter_swap(_First, _Next);
  if (++_First == _Mid)
   if (++_Next == _Last)
    break;
   else
    _Mid = _Next;
  else if (++_Next == _Last)
   _Next = _Mid;
  }
 }

template<class _BidIt> inline
 void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
  bidirectional_iterator_tag)
 {
 ::std:: reverse(_First, _Mid);
 ::std:: reverse(_Mid, _Last);
 ::std:: reverse(_First, _Last);
 }

template<class _RanIt,
 class _Diff,
 class _Ty> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
 {
 _Diff _Shift = _Mid - _First;
 _Diff _Count = _Last - _First;

 for (_Diff _Factor = _Shift; _Factor != 0; )
  {
  _Diff _Tmp = _Count % _Factor;
  _Count = _Factor;
  _Factor = _Tmp;
  }

 if (_Count < _Last - _First)
  for (; 0 < _Count; --_Count)
   {
   _RanIt _Hole = _First + _Count;
   _RanIt _Next = _Hole;
   _RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
   for (; ; )
    {
    iter_swap(_Next, _Next1);
    _Next = _Next1;
    _Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
     : _First + (_Shift - (_Last - _Next1));
    if (_Next1 == _Hole)
     break;
    }
   }
 }

template<class _RanIt> inline
 void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
  random_access_iterator_tag)
 {
 _Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));
 }

template<class _FwdIt> inline
 _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
 {
                           ;
                          ;
 if (_First != _Mid && _Mid != _Last)
  _Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
   _Iter_cat(_First));
 ::std:: advance(_First, ::std:: distance(_Mid, _Last));
 return (_First);
 }


template<class _Diff, class _Urng>
 class _Rng_from_urng
 {
public:
 typedef typename make_unsigned<_Diff>::type _Ty0;
 typedef typename _Urng::result_type _Ty1;

 typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
  _Ty0, _Ty1>::type _Udiff;


 explicit _Rng_from_urng(_Urng& _Func)
  : _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
  {
  for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
   --_Bits;
  }

 _Diff operator()(_Diff _Index)
  {
  for (; ; )
   {
   _Udiff _Ret = 0;
   _Udiff _Mask = 0;

   while (_Mask < _Udiff(_Index - 1))
    {
    _Ret <<= _Bits - 1;
    _Ret <<= 1;
    _Ret |= _Get_bits();
    _Mask <<= _Bits - 1;
    _Mask <<= 1;
    _Mask |= _Bmask;
    }


   if (_Ret / _Index < _Mask / _Index
    || _Mask % _Index == _Udiff(_Index - 1))
    return (_Ret % _Index);
   }
  }

 _Udiff _Get_all_bits()
  {
  _Udiff _Ret = 0;

  for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
   _Num += _Bits)
   {
   _Ret <<= _Bits - 1;
   _Ret <<= 1;
   _Ret |= _Get_bits();
   }

  return (_Ret);
  }

private:
 _Udiff _Get_bits()
  {
  for (; ; )
   {
   _Udiff _Val = _Ref() - (_Urng::min)();

   if (_Val <= _Bmask)
    return (_Val);
   }
  }

 _Urng& _Ref;
 size_t _Bits;
 _Udiff _Bmask;

public:
 _Rng_from_urng(const _Rng_from_urng&) = delete;
 _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;
 };


template<class _Elem>
 class __declspec(dllimport) _Yarn
 {
public:
 typedef _Yarn<_Elem> _Myt;

                    _Yarn()
  : _Myptr(0), _Nul(0)
  {
  }

                    _Yarn(const _Myt& _Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

                    _Yarn(const _Elem *_Right)
  : _Myptr(0), _Nul(0)
  {
  *this = _Right;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  return (*this = _Right._Myptr);
  }

 _Myt& operator=(const _Elem *_Right)
  {
  if (_Myptr != _Right)
   {
   _Tidy();

   if (_Right != 0)
    {
    const _Elem *_Ptr = _Right;
    while (*_Ptr != (_Elem)0)
     ++_Ptr;
    size_t _Count = ((const char *)++_Ptr - (const char *)_Right);






    _Myptr = (_Elem *):: malloc(_Count);


    if (_Myptr != 0)
     :: memcpy(_Myptr, _Right, _Count);
    }
   }
  return (*this);
  }

                    ~_Yarn() throw ()
  {
  _Tidy();
  }

 bool empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * c_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

 bool _Empty() const
  {
  return (_Myptr == 0);
  }

 const _Elem * _C_str() const
  {
  return (_Myptr != 0 ? _Myptr : &_Nul);
  }

private:
 void _Tidy()
  {
  if (_Myptr != 0)





   :: free(_Myptr);


  _Myptr = 0;
  }

 _Elem *_Myptr;
 _Elem _Nul;
 };


template<class _Ty,
 class _Alloc>
 struct _Has_allocator_type
 {
 template<class _Uty>
  static auto _Fn(int)
   -> is_convertible<_Alloc,
    typename _Uty::allocator_type>;
 template<class _Uty>
  static auto _Fn(_Wrap_int)
   -> false_type;

 typedef decltype(_Fn<_Ty>(0)) type;
 };


struct allocator_arg_t
 {
 };

const allocator_arg_t allocator_arg = allocator_arg_t();

__declspec(dllimport) __declspec(noreturn) void __cdecl _Xbad_alloc();
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xinvalid_argument( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xlength_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xout_of_range( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xoverflow_error( const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xruntime_error( const char *);
}

namespace std {

template<class _Ty,
 class _Alloc>
 struct uses_allocator
  : _Has_allocator_type<_Ty, _Alloc>::type
 {
 };
}

#pragma warning(pop)
#pragma pack(pop)
#line 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100)

namespace std {

template<class _Ty> inline
 _Ty *_Allocate(size_t _Count, _Ty *)
 {
 void *_Ptr = 0;

 if (_Count == 0)
  ;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count)
  || (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)
  _Xbad_alloc();

 return ((_Ty *)_Ptr);
 }


template<class _Ty1,
 class _Ty2> inline
 void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
 {
 void *_Vptr = _Ptr;
 ::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
 }

template<class _Ty1> inline
 void _Construct(_Ty1 *_Ptr)
 {
 void *_Vptr = _Ptr;

 ::new (_Vptr) _Ty1();
 }


template<class _Ty> inline
 void _Destroy(_Ty *_Ptr)
 {
 _Ptr->~_Ty();
 }

template<> inline
 void _Destroy(char *)
 {
 }

template<> inline
 void _Destroy(wchar_t *)
 {
 }


template<> inline
 void _Destroy(unsigned short *)
 {
 }



template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Nonscalar_ptr_iterator_tag)
 {
 for (; _First != _Last; ++_First)
  _Al.destroy(_First);
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al,
  _Scalar_ptr_iterator_tag)
 {
 }

template<class _Alloc> inline
 void _Destroy_range(typename _Alloc::pointer _First,
  typename _Alloc::pointer _Last, _Alloc& _Al)
 {
 _Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
 }


template<class _Alty>
 struct _Is_simple_alloc
  : _Cat_base<is_same<typename _Alty::size_type, size_t>::value
  && is_same<typename _Alty::difference_type, ptrdiff_t>::value
  && is_same<typename _Alty::pointer,
   typename _Alty::value_type *>::value
  && is_same<typename _Alty::const_pointer,
   const typename _Alty::value_type *>::value
  && is_same<typename _Alty::reference,
   typename _Alty::value_type&>::value
  && is_same<typename _Alty::const_reference,
   const typename _Alty::value_type&>::value>
 {
 };


template<class _Value_type>
 struct _Simple_types
 {
 typedef _Value_type value_type;
 typedef size_t size_type;
 typedef ptrdiff_t difference_type;
 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef value_type& reference;
 typedef const value_type& const_reference;
 };


template<class _Alty,
 class _Pointer>
 struct _Get_voidptr
 {
 typedef typename _Alty::template rebind<void>::other _Alvoid;
 typedef typename _Alvoid::pointer type;
 };

template<class _Alty,
 class _Ty>
 struct _Get_voidptr<_Alty, _Ty *>
 {
 typedef void *type;
 };


template<class _Iter>
 struct _Is_iterator
 : public integral_constant<bool, !is_integral<_Iter>::value>
 {
 };


template<class _Ty>
 struct _Get_first_parameter;

template<template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Get_first_parameter<_Ty<_First, _Rest...> >
 {
 typedef _First type;
 };


template<class _Newfirst,
 class _Ty>
 struct _Replace_first_parameter;

template<class _Newfirst,
 template<class, class...> class _Ty,
 class _First,
 class... _Rest>
 struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
 {
 typedef _Ty<_Newfirst, _Rest...> type;
 };


template<class _Ty>
 struct _Get_element_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_ptr_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Other>
 struct _Get_rebind_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct pointer_traits
 {
 typedef typename _Get_element_type<_Ty>::type element_type;
 typedef _Ty pointer;
 typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

 template<class _Other>
  using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

 typedef typename _If<is_void<element_type>::value,
  char&,
  typename add_reference<element_type>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (_Ty::pointer_to(_Val));
  }
 };


template<class _Ty>
 struct pointer_traits<_Ty *>
 {
 typedef _Ty element_type;
 typedef _Ty *pointer;
 typedef ptrdiff_t difference_type;

 template<class _Other>
  using rebind = _Other *;

 typedef typename _If<is_void<_Ty>::value,
  char&,
  typename add_reference<_Ty>::type>::type _Reftype;

 static pointer pointer_to(_Reftype _Val)
  {
  return (::std:: addressof(_Val));
  }
 };


template<class _Ty>
 struct _Get_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_const_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_const_void_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void> >; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_difference_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_size_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };




template<class _Ty>
 struct _Get_propagate_on_container_copy
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_move
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty>
 struct _Get_propagate_on_container_swap
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



struct _Alloc_allocate
 {


 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer _Hint)
   -> decltype(_Al.allocate(_Count, _Hint))
  {
  return (_Al.allocate(_Count, _Hint));
  }

 template<class _Alloc,
  class _Size_type,
  class _Const_void_pointer>
  static auto _Fn(_Wrap_int, _Alloc& _Al,
   _Size_type _Count,
   _Const_void_pointer)
   -> decltype(_Al.allocate(_Count))
  {
  return (_Al.allocate(_Count));
  }
 };


struct _Alloc_construct
 {


 template<class _Ty,
  class _Objty,
  class... _Types>
  static auto _Fn(int, _Ty& _Al, _Objty *_Ptr,
   _Types&&... _Args)
   -> decltype(
    _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...))
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }

 template<class _Ty,
  class _Objty,
  class... _Types>
  static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr,
   _Types&&... _Args)
   -> void
  {
  ::new (static_cast<void *>(_Ptr))
   _Objty(::std:: forward<_Types>(_Args)...);
  }

 };


struct _Alloc_destroy
 {
 template<class _Ty,
  class _Objty>
  static auto _Fn(int, _Ty& _Al, _Objty *_Ptr)
   -> decltype(_Al.destroy(_Ptr))
  {
  _Al.destroy(_Ptr);
  }

 template<class _Ty,
  class _Objty>
  static auto _Fn(_Wrap_int, _Ty&, _Objty *_Ptr)
   -> void
  {
  _Ptr->~_Objty();
  }
 };


struct _Alloc_max_size
 {
 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype(_Al.max_size())
  {
  return (_Al.max_size());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty&)
   -> typename _Get_size_type<_Ty>::type
  {
  return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)());
  }
 };


struct _Alloc_select
 {


 template<class _Ty>
  static auto _Fn(int, const _Ty& _Al)
   -> decltype((_Ty)_Al.select_on_container_copy_construction())
  {
  return (_Al.select_on_container_copy_construction());
  }

 template<class _Ty>
  static auto _Fn(_Wrap_int, const _Ty& _Al)
   -> _Ty
  {
  return (_Al);
  }
 };


template<class _Alloc>
 struct allocator_traits
 {
 typedef allocator_traits<_Alloc> other;

 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef typename _Get_pointer_type<_Alloc>::type
  pointer;
 typedef typename _Get_const_pointer_type<_Alloc>::type
  const_pointer;
 typedef typename _Get_void_pointer_type<_Alloc>::type
  void_pointer;
 typedef typename _Get_const_void_pointer_type<_Alloc>::type
  const_void_pointer;

 typedef typename _Get_size_type<_Alloc>::type size_type;
 typedef typename _Get_difference_type<_Alloc>::type difference_type;

 typedef typename _Get_propagate_on_container_copy<_Alloc>::type
  propagate_on_container_copy_assignment;
 typedef typename _Get_propagate_on_container_move<_Alloc>::type
  propagate_on_container_move_assignment;
 typedef typename _Get_propagate_on_container_swap<_Alloc>::type
  propagate_on_container_swap;

 template<class _Other>
  using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

 template<class _Other>
  using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

 static pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Ty,
  class... _Types>
  static void construct(_Alloc& _Al, _Ty *_Ptr,
   _Types&&... _Args)
  {
  _Alloc_construct::_Fn(0, _Al, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  static void destroy(_Alloc& _Al, _Ty *_Ptr)
  {
  _Alloc_destroy::_Fn(0, _Al, _Ptr);
  }

 static size_type max_size(const _Alloc& _Al)
  {
  return (_Alloc_max_size::_Fn(0, _Al));
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Alloc_select::_Fn(0, _Al));
  }
 };


template<class _Ty>
 struct _Allocator_base
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 struct _Allocator_base<const _Ty>
 {
 typedef _Ty value_type;
 };


template<class _Ty>
 class allocator
  : public _Allocator_base<_Ty>
 {
public:
 typedef allocator<_Ty> other;

 typedef _Allocator_base<_Ty> _Mybase;
 typedef typename _Mybase::value_type value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef value_type& reference;
 typedef const value_type& const_reference;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef false_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;

 allocator<_Ty> select_on_container_copy_construction() const
  {
  return (*this);
  }

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 pointer address(reference _Val) const throw ()
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const throw ()
  {
  return (::std:: addressof(_Val));
  }

 allocator() throw ()
  {
  }

 allocator(const allocator<_Ty>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<_Ty>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }

 void deallocate(pointer _Ptr, size_type)
  {
  ::operator delete(_Ptr);
  }

 pointer allocate(size_type _Count)
  {
  return (_Allocate(_Count, (pointer)0));
  }

 pointer allocate(size_type _Count, const void *)
  {
  return (allocate(_Count));
  }

 void construct(_Ty *_Ptr)
  {
  ::new ((void *)_Ptr) _Ty();
  }

 void construct(_Ty *_Ptr, const _Ty& _Val)
  {
  ::new ((void *)_Ptr) _Ty(_Val);
  }

 template<class _Objty,
  class... _Types>
  void construct(_Objty *_Ptr, _Types&&... _Args)
  {
  ::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  void destroy(_Uty *_Ptr)
  {
  _Ptr->~_Uty();
  }

 size_t max_size() const throw ()
  {
  return ((size_t)(-1) / sizeof (_Ty));
  }
 };


template<>
 class allocator<void>
 {
public:
 typedef allocator<void> other;

 typedef void value_type;

 typedef void *pointer;
 typedef const void *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 template<class _Other>
  struct rebind
  {
  typedef allocator<_Other> other;
  };

 allocator() throw ()
  {
  }

 allocator(const allocator<void>&) throw ()
  {
  }

 template<class _Other>
  allocator(const allocator<_Other>&) throw ()
  {
  }

 template<class _Other>
  allocator<void>& operator=(const allocator<_Other>&)
  {
  return (*this);
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const allocator<_Ty>&,
  const allocator<_Other>&) throw ()
 {
 return (true);
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const allocator<_Ty>& _Left,
  const allocator<_Other>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }


template<class _Ty>
 struct allocator_traits<allocator<_Ty> >
 {
 typedef allocator<_Ty> _Alloc;

 typedef allocator_traits<_Alloc> other;

 typedef _Alloc allocator_type;
 typedef typename _Alloc::value_type value_type;

 typedef value_type *pointer;
 typedef const value_type *const_pointer;
 typedef void *void_pointer;
 typedef const void *const_void_pointer;

 typedef size_t size_type;
 typedef ptrdiff_t difference_type;

 typedef false_type propagate_on_container_copy_assignment;
 typedef false_type propagate_on_container_move_assignment;
 typedef false_type propagate_on_container_swap;

 template<class _Other>
  using rebind_alloc = allocator<_Other>;

 template<class _Other>
  using rebind_traits = allocator_traits<allocator<_Other> >;

 static pointer allocate(_Alloc& _Al, size_type _Count)
  {
  return (_Al.allocate(_Count));
  }

 static pointer allocate(_Alloc& _Al, size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Al.allocate(_Count, _Hint));
  }

 static void deallocate(_Alloc& _Al,
  pointer _Ptr, size_type _Count)
  {
  _Al.deallocate(_Ptr, _Count);
  }

 template<class _Objty,
  class... _Types>
  static void construct(_Alloc& _Al, _Objty *_Ptr,
   _Types&&... _Args)
  {
  _Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
  }


 template<class _Uty>
  static void destroy(_Alloc& _Al, _Uty *_Ptr)
  {
  _Al.destroy(_Ptr);
  }

 static size_type max_size(const _Alloc& _Al)
  {
  return (_Al.max_size());
  }

 static _Alloc select_on_container_copy_construction(
  const _Alloc& _Al)
  {
  return (_Al.select_on_container_copy_construction());
  }
 };


template<class _Alloc>
 struct _Wrap_alloc
  : public _Alloc
 {
 typedef _Wrap_alloc<_Alloc> other;

 typedef _Alloc _Mybase;
 typedef allocator_traits<_Alloc> _Mytraits;

 typedef typename _Mytraits::value_type value_type;

 typedef typename _Mytraits::pointer pointer;
 typedef typename _Mytraits::const_pointer const_pointer;
 typedef typename _Mytraits::void_pointer void_pointer;
 typedef typename _Mytraits::const_void_pointer const_void_pointer;

 typedef typename _If<is_void<value_type>::value,
  int, value_type>::type& reference;
 typedef typename _If<is_void<const value_type>::value,
  const int, const value_type>::type& const_reference;

 typedef typename _Mytraits::size_type size_type;
 typedef typename _Mytraits::difference_type difference_type;

 typedef typename _Mytraits::propagate_on_container_copy_assignment
  propagate_on_container_copy_assignment;
 typedef typename _Mytraits::propagate_on_container_move_assignment
  propagate_on_container_move_assignment;
 typedef typename _Mytraits::propagate_on_container_swap
  propagate_on_container_swap;

 _Wrap_alloc select_on_container_copy_construction() const
  {
  return (_Mytraits::select_on_container_copy_construction(*this));
  }

 template<class _Other>
  struct rebind
  {
  typedef typename _Mytraits::template rebind_alloc<_Other> _Other_alloc;
  typedef _Wrap_alloc<_Other_alloc> other;
  };

 pointer address(reference _Val) const
  {
  return (::std:: addressof(_Val));
  }

 const_pointer address(const_reference _Val) const
  {
  return (::std:: addressof(_Val));
  }

 _Wrap_alloc() throw ()
  : _Mybase()
  {
  }

 _Wrap_alloc(const _Mybase& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc(const _Wrap_alloc& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Wrap_alloc(const _Other& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 template<class _Other>
  _Wrap_alloc(_Other& _Right) throw ()
  : _Mybase(_Right)
  {
  }

 _Wrap_alloc& operator=(const _Mybase& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 _Wrap_alloc& operator=(const _Wrap_alloc& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 template<class _Other>
  _Wrap_alloc& operator=(const _Other& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 pointer allocate(size_type _Count)
  {
  return (_Mybase::allocate(_Count));
  }

 pointer allocate(size_type _Count,
  const_void_pointer _Hint)
  {
  return (_Mytraits::allocate(*this, _Count, _Hint));
  }

 void deallocate(pointer _Ptr, size_type _Count)
  {
  _Mybase::deallocate(_Ptr, _Count);
  }

 void construct(value_type *_Ptr)
  {
  _Mytraits::construct(*this, _Ptr);
  }

 template<class _Ty,
  class... _Types>
  void construct(_Ty *_Ptr,
   _Types&&... _Args)
  {
  _Mytraits::construct(*this, _Ptr,
   ::std:: forward<_Types>(_Args)...);
  }


 template<class _Ty>
  void destroy(_Ty *_Ptr)
  {
  _Mytraits::destroy(*this, _Ptr);
  }

 size_type max_size() const throw ()
  {
  return (_Mytraits::max_size(*this));
  }
 };

template<class _Ty,
 class _Other> inline
 bool operator==(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) throw ()
 {
 return (static_cast<_Ty>(_Left) == static_cast<_Other>(_Right));
 }

template<class _Ty,
 class _Other> inline
 bool operator!=(const _Wrap_alloc<_Ty>& _Left,
  const _Wrap_alloc<_Other>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }
}





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xatomic0.h"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {





typedef enum memory_order {
 memory_order_relaxed,
 memory_order_consume,
 memory_order_acquire,
 memory_order_release,
 memory_order_acq_rel,
 memory_order_seq_cst
 } memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;
#line 70 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xatomic0.h"
typedef long _Atomic_flag_t;






inline _Uint4_t _Atomic_load_4(volatile _Uint4_t *, memory_order);
inline int _Atomic_compare_exchange_weak_4(
 volatile _Uint4_t *, _Uint4_t *, _Uint4_t, memory_order, memory_order);
inline _Uint4_t _Atomic_fetch_add_4(
 volatile _Uint4_t *, _Uint4_t, memory_order);
inline _Uint4_t _Atomic_fetch_sub_4(
 volatile _Uint4_t *, _Uint4_t, memory_order);

typedef _Atomic_integral_t _Atomic_counter_t;


inline _Atomic_integral_t
 _Get_atomic_count(const _Atomic_counter_t& _Counter)
 {
 return (_Counter);
 }

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
 _Atomic_integral_t _Value)
 {
 _Counter = _Value;
 }

inline _Atomic_integral_t _Inc_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_fetch_add_4(&_Counter, 1, _Order) + 1);
 }

inline _Atomic_integral_t _Inc_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Inc_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Dec_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_fetch_sub_4(&_Counter, 1, _Order) - 1);
 }

inline _Atomic_integral_t _Dec_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Dec_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Load_atomic_counter_explicit(
 _Atomic_counter_t& _Counter, memory_order _Order)
 {
 return (_Atomic_load_4(&_Counter, _Order));
 }

inline _Atomic_integral_t _Load_atomic_counter(_Atomic_counter_t& _Counter)
 {
 return (_Load_atomic_counter_explicit(_Counter, memory_order_seq_cst));
 }

inline _Atomic_integral_t _Compare_increment_atomic_counter_explicit(
 _Atomic_counter_t& _Counter,
 _Atomic_integral_t _Expected,
 memory_order _Order)
 {
 return (_Atomic_compare_exchange_weak_4(
  &_Counter, &_Expected, _Expected + 1,
  _Order, _Order));
 }

inline _Atomic_integral_t _Compare_increment_atomic_counter(
 _Atomic_counter_t& _Counter, _Atomic_integral_t _Expected)
 {
 return (_Compare_increment_atomic_counter_explicit(
  _Counter, _Expected, memory_order_seq_cst));
 }
#line 184 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xatomic0.h"
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}

#pragma warning(pop)
#pragma pack(pop)
#line 908 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
#line 18 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 18 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\setjmp.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\setjmp.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\setjmp.h"
#line 37 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\setjmp.h"
#pragma pack(push,8)


extern "C" {
#line 63 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\setjmp.h"
typedef struct __JUMP_BUFFER {
    unsigned long Ebp;
    unsigned long Ebx;
    unsigned long Edi;
    unsigned long Esi;
    unsigned long Esp;
    unsigned long Eip;
    unsigned long Registration;
    unsigned long TryLevel;
    unsigned long Cookie;
    unsigned long UnwindFunc;
    unsigned long UnwindData[6];
} _JUMP_BUFFER;
#line 167 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\setjmp.h"
typedef int jmp_buf[16];







int __cdecl _setjmp( jmp_buf _Buf);


}



#pragma warning(push)
#pragma warning(disable: 4987)
extern "C"
{
__declspec(dllimport) __declspec(noreturn) void __cdecl longjmp( jmp_buf _Buf, int _Value) throw(...);
}
#pragma warning(pop)




#pragma pack(pop)
#line 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"







#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wmmintrin.h"
#line 26 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wmmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\nmmintrin.h"
#line 27 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\nmmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\smmintrin.h"
#line 27 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\smmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\tmmintrin.h"
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\tmmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\pmmintrin.h"
#line 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\pmmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\emmintrin.h"
#line 33 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\emmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
#line 41 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\mmintrin.h"
#line 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\mmintrin.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\mmintrin.h"







extern "C" {




typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64 m64_u64;
    float m64_f32[2];
    __int8 m64_i8[8];
    __int16 m64_i16[4];
    __int32 m64_i32[2];
    __int64 m64_i64;
    unsigned __int8 m64_u8[8];
    unsigned __int16 m64_u16[4];
    unsigned __int32 m64_u32[2];
} __m64;


void _m_empty(void);
__m64 _m_from_int(int _I);
int _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);
#line 182 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\mmintrin.h"
};
#line 41 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
#line 60 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     __int8 m128_i8[16];
     __int16 m128_i16[8];
     __int32 m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned __int32 m128_u32[4];
 } __m128;
#line 178 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
extern "C" {







extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
extern float _mm_cvtss_f32(__m128 _A);
#line 280 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);





extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);
extern void _mm_stream_pi(__m64 *, __m64);
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
#line 378 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
__inline __m128 _mm_cvtpi16_ps(__m64 a)
{
  __m128 tmp;
  __m64 ext_val = _m_pcmpgtw(_mm_setzero_si64(), a);

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}
#line 397 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
__inline __m128 _mm_cvtpu16_ps(__m64 a)
{
  __m128 tmp;
  __m64 ext_val = _mm_setzero_si64();

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp),
                        _m_punpcklwd(a, ext_val)));
}
#line 416 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
__inline __m64 _mm_cvtps_pi16(__m128 a)
{
  return _m_packssdw(_mm_cvt_ps2pi(a),
                        _mm_cvt_ps2pi(_mm_movehl_ps(a, a)));
}
#line 431 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
__inline __m128 _mm_cvtpi8_ps(__m64 a)
{
  __m64 ext_val = _m_pcmpgtb(_mm_setzero_si64(), a);

  return _mm_cvtpi16_ps(_m_punpcklbw(a, ext_val));
}
#line 448 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
__inline __m128 _mm_cvtpu8_ps(__m64 a)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(a, _mm_setzero_si64()));
}
#line 462 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
__inline __m64 _mm_cvtps_pi8(__m128 a)
{
  return _m_packsswb(_mm_cvtps_pi16(a), _mm_setzero_si64());
}
#line 477 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmmintrin.h"
__inline __m128 _mm_cvtpi32x2_ps(__m64 a, __m64 b)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), a),
                       _mm_cvt_pi2ps(_mm_setzero_ps(), b));
}



};
#line 33 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\emmintrin.h"


typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8 m128i_i8[16];
    __int16 m128i_i16[8];
    __int32 m128i_i32[4];
    __int64 m128i_i64[2];
    unsigned __int8 m128i_u8[16];
    unsigned __int16 m128i_u16[8];
    unsigned __int32 m128i_u32[4];
    unsigned __int64 m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double m128d_f64[2];
} __m128d;
#line 60 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\emmintrin.h"
extern "C" {







extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);

extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);
extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);





extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_set1_epi64(__m64 _Q);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);
extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128 _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128 _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);
#line 409 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\emmintrin.h"
};
#line 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\pmmintrin.h"
#line 55 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\pmmintrin.h"
extern "C" {







extern __m128 _mm_addsub_ps(__m128 a, __m128 b);
extern __m128 _mm_hadd_ps(__m128 a, __m128 b);
extern __m128 _mm_hsub_ps(__m128 a, __m128 b);
extern __m128 _mm_movehdup_ps(__m128 a);
extern __m128 _mm_moveldup_ps(__m128 a);





extern __m128d _mm_addsub_pd(__m128d a, __m128d b);
extern __m128d _mm_hadd_pd(__m128d a, __m128d b);
extern __m128d _mm_hsub_pd(__m128d a, __m128d b);
extern __m128d _mm_loaddup_pd(double const * dp);
extern __m128d _mm_movedup_pd(__m128d a);




extern __m128i _mm_lddqu_si128(__m128i const *p);







extern void _mm_monitor(void const *p, unsigned extensions, unsigned hints);




extern void _mm_mwait(unsigned extensions, unsigned hints);


};
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\tmmintrin.h"
#line 30 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\tmmintrin.h"
extern "C" {





    extern __m128i _mm_hadd_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hadd_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hadds_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hadd_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hadd_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hadds_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_hsub_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hsub_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hsubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hsub_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hsub_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hsubs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_maddubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_maddubs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);




    extern __m128i _mm_shuffle_epi8 (__m128i a, __m128i b);

    extern __m64 _mm_shuffle_pi8 (__m64 a, __m64 b);




    extern __m128i _mm_sign_epi8 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi32 (__m128i a, __m128i b);

    extern __m64 _mm_sign_pi8 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi32 (__m64 a, __m64 b);




    extern __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);

    extern __m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);




    extern __m128i _mm_abs_epi8 (__m128i a);
    extern __m128i _mm_abs_epi16 (__m128i a);
    extern __m128i _mm_abs_epi32 (__m128i a);

    extern __m64 _mm_abs_pi8 (__m64 a);
    extern __m64 _mm_abs_pi16 (__m64 a);
    extern __m64 _mm_abs_pi32 (__m64 a);


};
#line 27 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\smmintrin.h"
#line 78 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\smmintrin.h"
extern "C" {





        extern __m128i _mm_blend_epi16 (__m128i v1, __m128i v2,
                                        const int mask);
        extern __m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);




        extern __m128 _mm_blend_ps (__m128 v1, __m128 v2, const int mask);
        extern __m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);




        extern __m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
        extern __m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);




        extern __m128 _mm_dp_ps(__m128 val1, __m128 val2, const int mask);
        extern __m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);




        extern __m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);



        extern __m128i _mm_min_epi8 (__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi8 (__m128i val1, __m128i val2);

        extern __m128i _mm_min_epu16(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu16(__m128i val1, __m128i val2);

        extern __m128i _mm_min_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_min_epu32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu32(__m128i val1, __m128i val2);




        extern __m128i _mm_mullo_epi32(__m128i a, __m128i b);




        extern __m128i _mm_mul_epi32(__m128i a, __m128i b);




        extern int _mm_testz_si128(__m128i mask, __m128i val);




        extern int _mm_testc_si128(__m128i mask, __m128i val);





        extern int _mm_testnzc_si128(__m128i mask, __m128i s2);







        extern __m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);
#line 166 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\smmintrin.h"
        extern int _mm_extract_ps(__m128 src, const int ndx);
#line 184 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\smmintrin.h"
        extern __m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
        extern __m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);







        extern int _mm_extract_epi8 (__m128i src, const int ndx);
        extern int _mm_extract_epi32(__m128i src, const int ndx);
#line 203 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\smmintrin.h"
        extern __m128i _mm_minpos_epu16(__m128i shortValues);



        extern __m128d _mm_round_pd(__m128d val, int iRoundMode);
        extern __m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);



        extern __m128 _mm_round_ps(__m128 val, int iRoundMode);
        extern __m128 _mm_round_ss(__m128 dst, __m128 val, int iRoundMode);



        extern __m128i _mm_cvtepi8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepi16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi64 (__m128i byteValues);
        extern __m128i _mm_cvtepi32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepi16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi16 (__m128i byteValues);



        extern __m128i _mm_cvtepu8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepu16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi64 (__m128i shortValues);
        extern __m128i _mm_cvtepu32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepu16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi16 (__m128i byteValues);





        extern __m128i _mm_packus_epi32(__m128i val1, __m128i val2);





        extern __m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);





        extern __m128i _mm_stream_load_si128(__m128i* v1);


};
#line 27 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\nmmintrin.h"




extern "C" {
#line 78 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\nmmintrin.h"
    extern __m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistri (__m128i a, __m128i b, const int mode);

    extern __m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);





    extern int _mm_cmpistrz (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistrc (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistrs (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistro (__m128i a, __m128i b, const int mode);
    extern int _mm_cmpistra (__m128i a, __m128i b, const int mode);

    extern int _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);






    extern __m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);





    extern int _mm_popcnt_u32(unsigned int v);
#line 121 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\nmmintrin.h"
    extern unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
    extern unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
    extern unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);






};
#line 26 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wmmintrin.h"




extern "C" {






extern __m128i _mm_aesdec_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesdeclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenc_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesimc_si128(__m128i v);






extern __m128i _mm_aeskeygenassist_si128(__m128i ckey, const int rcon);







extern __m128i _mm_clmulepi64_si128(__m128i v1, __m128i v2,
                                            const int imm8);





};
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"



extern "C" {





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8 m256i_i8[32];
    __int16 m256i_i16[16];
    __int32 m256i_i32[8];
    __int64 m256i_i64[4];
    unsigned __int8 m256i_u8[32];
    unsigned __int16 m256i_u16[16];
    unsigned __int32 m256i_u32[8];
    unsigned __int64 m256i_u64[4];
} __m256i;
#line 101 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);
#line 111 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_add_ps(__m256, __m256);
#line 124 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);
#line 137 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);
#line 146 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);
#line 155 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_and_ps(__m256, __m256);
#line 164 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);
#line 173 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);
#line 187 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);
#line 201 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);
#line 211 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);
#line 221 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);
#line 230 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);
#line 239 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_div_ps(__m256, __m256);
#line 254 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);
#line 263 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);
#line 272 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);
#line 281 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);
#line 290 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);
#line 299 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);
#line 308 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_max_ps(__m256, __m256);
#line 317 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);
#line 326 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_min_ps(__m256, __m256);
#line 336 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);
#line 346 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);
#line 355 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);
#line 364 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_or_ps(__m256, __m256);
#line 376 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);
#line 389 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);
#line 398 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);
#line 408 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);
#line 417 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);
#line 426 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);
#line 442 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);
#line 459 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);
#line 473 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);
#line 486 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);
#line 495 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);
#line 504 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_cvtepi32_ps(__m256i);
#line 514 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm256_cvtpd_ps(__m256d);
#line 523 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvtps_epi32(__m256);
#line 533 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_cvtps_pd(__m128);
#line 546 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);
#line 555 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);
#line 568 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128 __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);
#line 603 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128 __cdecl _mm_permutevar_ps(__m128, __m128i);
#line 614 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permute_ps(__m256, int);
extern __m128 __cdecl _mm_permute_ps(__m128, int);
#line 625 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);
#line 636 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);
#line 646 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);
#line 657 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_broadcast_ss(float const *);
extern __m128 __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256 __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);
#line 685 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);
#line 696 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_load_pd(double const *);
extern void __cdecl _mm256_store_pd(double *, __m256d);
#line 706 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_load_ps(float const *);
extern void __cdecl _mm256_store_ps(float *, __m256);
#line 716 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void __cdecl _mm256_storeu_pd(double *, __m256d);
#line 726 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_loadu_ps(float const *);
extern void __cdecl _mm256_storeu_ps(float *, __m256);
#line 736 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void __cdecl _mm256_store_si256(__m256i *, __m256i);
#line 746 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void __cdecl _mm256_storeu_si256(__m256i *, __m256i);
#line 819 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);
#line 842 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128 __cdecl _mm_maskload_ps(float const *, __m128i);
extern void __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256 __cdecl _mm256_movehdup_ps(__m256);







extern __m256 __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);
#line 879 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void __cdecl _mm256_stream_si256(__m256i *, __m256i);
#line 896 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_pd(double *, __m256d);
#line 905 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern void __cdecl _mm256_stream_ps(float *, __m256);
#line 915 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_rcp_ps(__m256);
#line 926 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_rsqrt_ps(__m256);
#line 935 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_sqrt_pd(__m256d);
#line 944 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_sqrt_ps(__m256);
#line 957 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_round_pd(__m256d, int);
#line 972 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256 __cdecl _mm256_round_ps(__m256, int);
#line 982 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256 __cdecl _mm256_unpacklo_ps(__m256, __m256);
#line 1016 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int __cdecl _mm256_testnzc_si256(__m256i, __m256i);
#line 1039 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int __cdecl _mm_testz_pd(__m128d, __m128d);
extern int __cdecl _mm_testc_pd(__m128d, __m128d);
extern int __cdecl _mm_testnzc_pd(__m128d, __m128d);
#line 1057 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_testz_ps(__m256, __m256);
extern int __cdecl _mm256_testc_ps(__m256, __m256);
extern int __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int __cdecl _mm_testz_ps(__m128, __m128);
extern int __cdecl _mm_testc_ps(__m128, __m128);
extern int __cdecl _mm_testnzc_ps(__m128, __m128);
#line 1071 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_pd(__m256d);
#line 1080 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern int __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256 __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256 __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);
#line 1121 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256 __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256 __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256 __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256 __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128 __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256 __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128 __cdecl _mm_cvtph_ps(__m128i);
extern __m256 __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 m1, const int imm);
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);
#line 1202 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);
#line 1222 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern void __cdecl _xsaveopt(void *, unsigned __int64);
#line 1232 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern void __cdecl _xrstor(void const *, unsigned __int64);
#line 1241 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxsave(void *);
#line 1250 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern void __cdecl _fxrstor(void const *);
#line 1261 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);
#line 1288 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern __m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);
extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128 __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256 __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i );

extern void __cdecl _mm_maskstore_epi32(int * ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i ,
                                        __m128i );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i );

extern void __cdecl _mm256_maskstore_epi32(int * ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i ,
                                           __m256i );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d ,
                                                double const * ,
                                                __m128i ,
                                                __m256d ,
                                                const int );
extern __m256 __cdecl _mm256_mask_i32gather_ps(__m256 ,
                                                float const * ,
                                                __m256i ,
                                                __m256 ,
                                                const int );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d ,
                                                double const * ,
                                                __m256i ,
                                                __m256d ,
                                                const int );
extern __m128 __cdecl _mm256_mask_i64gather_ps(__m128 ,
                                                float const * ,
                                                __m256i ,
                                                __m128 ,
                                                const int );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i32gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d ,
                                             double const * ,
                                             __m128i ,
                                             __m128d ,
                                             const int );
extern __m128 __cdecl _mm_mask_i64gather_ps(__m128 ,
                                             float const * ,
                                             __m128i ,
                                             __m128 ,
                                             const int );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m128i ,
                                                   __m256i ,
                                                   const int );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i ,
                                                   int const * ,
                                                   __m256i ,
                                                   __m128i ,
                                                   const int );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i ,
                                                   __int64 const * ,
                                                   __m256i ,
                                                   __m256i ,
                                                   const int );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i ,
                                                int const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i ,
                                                __int64 const * ,
                                                __m128i ,
                                                __m128i ,
                                                const int );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i ,
                                           const int );
extern __m256 __cdecl _mm256_i32gather_ps(float const * ,
                                           __m256i ,
                                           const int );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i ,
                                           const int );
extern __m128 __cdecl _mm256_i64gather_ps(float const * ,
                                           __m256i ,
                                           const int );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i32gather_ps(float const * ,
                                        __m128i ,
                                        const int );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i ,
                                        const int );
extern __m128 __cdecl _mm_i64gather_ps(float const * ,
                                        __m128i ,
                                        const int );

extern __m256i __cdecl _mm256_i32gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i ,
                                              const int );
extern __m128i __cdecl _mm256_i64gather_epi32(int const * ,
                                              __m256i ,
                                              const int );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i ,
                                              const int );

extern __m128i __cdecl _mm_i32gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi32(int const * ,
                                           __m128i ,
                                           const int );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i ,
                                           const int );





extern unsigned int _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int _blsi_u32(unsigned int);
extern unsigned int _blsmsk_u32(unsigned int);
extern unsigned int _blsr_u32(unsigned int);
extern unsigned int _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int _sarx_i32(int ,
                                  unsigned int );
extern unsigned int _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int _shrx_u32(unsigned int ,
                                          unsigned int );
#line 1812 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern unsigned int _lzcnt_u32(unsigned int);
#line 1824 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern unsigned int _tzcnt_u32(unsigned int);
#line 1834 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *a,long b);
extern unsigned char _interlockedbittestandset_HLERelease(long *a,long b);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *a,long b);
extern unsigned char _interlockedbittestandreset_HLERelease(long *a,long b);
#line 1898 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern unsigned int __cdecl _xbegin(void);
extern void __cdecl _xend(void);
extern void __cdecl _xabort(const unsigned int);
extern unsigned char __cdecl _xtest(void);
#line 1910 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);
extern int __cdecl _rdseed64_step(unsigned __int64 *);
#line 1923 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );
#line 1935 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\immintrin.h"
};
#line 26 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ammintrin.h"
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ammintrin.h"
extern "C" {
#line 118 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ammintrin.h"
__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);
#line 217 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ammintrin.h"
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);






unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);
#line 269 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ammintrin.h"
unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);
#line 293 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ammintrin.h"
};
#line 27 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"




#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\mm3dnow.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\mm3dnow.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\mm3dnow.h"





extern "C" {




void _m_femms(void);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pf2id(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pmulhrw(__m64, __m64);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

__m64 _m_from_float(float);
float _m_to_float(__m64);



__m64 _m_pf2iw(__m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pswapd(__m64);


};
#line 31 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
#line 43 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
extern "C" {
#line 107 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
#line 131 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
long _InterlockedAddLargeStatistic(__int64 volatile * _Addend, long _Value);



long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);
#line 146 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
char _InterlockedAnd8(char volatile * _Value, char _Mask);
#line 155 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
long __cdecl _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);



short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);




__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);




char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);
#line 182 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
long __cdecl _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);
#line 195 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
long __cdecl _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);







char _InterlockedExchange8(char volatile * _Target, char _Value);



long __cdecl _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);







char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);
#line 228 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
__forceinline static void * _Intrin_h_InterlockedExchangePointer(void * volatile * _Target, void * _Value)
{
    return (void *)_InterlockedExchange((long volatile *) _Target, (long) _Value);
}
#line 242 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
long __cdecl _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);
#line 255 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);
#line 266 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
char _InterlockedOr8(char volatile * _Value, char _Mask);
#line 275 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);
#line 286 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
char _InterlockedXor8(char volatile * _Value, char _Mask);
#line 303 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
void _ReadBarrier(void);

void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);

void __addfsbyte(unsigned long, unsigned char);
void __addfsdword(unsigned long, unsigned long);
void __addfsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);

unsigned int __getcallerseflags(void);
void __halt(void);

unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);
void __incfsbyte(unsigned long);
void __incfsdword(unsigned long);
void __incfsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);
#line 353 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\intrin.h"
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);

void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);

void __movsw(unsigned short *, unsigned short const *, size_t);

void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);




unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);

unsigned long __readcr0(void);

unsigned long __readcr2(void);

unsigned long __readcr3(void);

unsigned long __readcr4(void);

unsigned long __readcr8(void);

unsigned int __readdr(unsigned int);

unsigned int __readeflags(void);
unsigned char __readfsbyte(unsigned long);
unsigned long __readfsdword(unsigned long);
unsigned __int64 __readfsqword(unsigned long);
unsigned short __readfsword(unsigned long);




unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);
unsigned long __segmentlimit(unsigned long);



void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);

void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);



void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);

void __vmx_off(void);




void __vmx_vmptrst(unsigned __int64 *);



void __wbinvd(void);



void __writecr0(unsigned int);

void __writecr3(unsigned int);

void __writecr4(unsigned int);

void __writecr8(unsigned int);

void __writedr(unsigned int, unsigned int);

void __writeeflags(unsigned int);
void __writefsbyte(unsigned long, unsigned char);
void __writefsdword(unsigned long, unsigned long);
void __writefsqword(unsigned long, unsigned __int64);
void __writefsword(unsigned long, unsigned short);




void __writemsr(unsigned long, unsigned __int64);

unsigned char _bittest(long const *, long);

unsigned char _bittestandcomplement(long *, long);

unsigned char _bittestandreset(long *, long);

unsigned char _bittestandset(long *, long);

unsigned __int64 __cdecl _byteswap_uint64( unsigned __int64);
unsigned long __cdecl _byteswap_ulong( unsigned long);
unsigned short __cdecl _byteswap_ushort( unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);




unsigned char _interlockedbittestandset(long volatile *, long);






unsigned long __cdecl _lrotl( unsigned long, int);
unsigned long __cdecl _lrotr( unsigned long, int);
void _m_empty(void);
void _m_femms(void);
__m64 _m_from_float(float);
__m64 _m_from_int(int);
void _m_maskmovq(__m64, __m64, char *);
__m64 _m_packssdw(__m64, __m64);
__m64 _m_packsswb(__m64, __m64);
__m64 _m_packuswb(__m64, __m64);
__m64 _m_paddb(__m64, __m64);
__m64 _m_paddd(__m64, __m64);
__m64 _m_paddsb(__m64, __m64);
__m64 _m_paddsw(__m64, __m64);
__m64 _m_paddusb(__m64, __m64);
__m64 _m_paddusw(__m64, __m64);
__m64 _m_paddw(__m64, __m64);
__m64 _m_pand(__m64, __m64);
__m64 _m_pandn(__m64, __m64);
__m64 _m_pavgb(__m64, __m64);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pavgw(__m64, __m64);
__m64 _m_pcmpeqb(__m64, __m64);
__m64 _m_pcmpeqd(__m64, __m64);
__m64 _m_pcmpeqw(__m64, __m64);
__m64 _m_pcmpgtb(__m64, __m64);
__m64 _m_pcmpgtd(__m64, __m64);
__m64 _m_pcmpgtw(__m64, __m64);
int _m_pextrw(__m64, int);
__m64 _m_pf2id(__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pinsrw(__m64, int, int);
__m64 _m_pmaddwd(__m64, __m64);
__m64 _m_pmaxsw(__m64, __m64);
__m64 _m_pmaxub(__m64, __m64);
__m64 _m_pminsw(__m64, __m64);
__m64 _m_pminub(__m64, __m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhrw(__m64, __m64);
__m64 _m_pmulhuw(__m64, __m64);
__m64 _m_pmulhw(__m64, __m64);
__m64 _m_pmullw(__m64, __m64);
__m64 _m_por(__m64, __m64);
void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);
__m64 _m_psadbw(__m64, __m64);
__m64 _m_pshufw(__m64, int);
__m64 _m_pslld(__m64, __m64);
__m64 _m_pslldi(__m64, int);
__m64 _m_psllq(__m64, __m64);
__m64 _m_psllqi(__m64, int);
__m64 _m_psllw(__m64, __m64);
__m64 _m_psllwi(__m64, int);
__m64 _m_psrad(__m64, __m64);
__m64 _m_psradi(__m64, int);
__m64 _m_psraw(__m64, __m64);
__m64 _m_psrawi(__m64, int);
__m64 _m_psrld(__m64, __m64);
__m64 _m_psrldi(__m64, int);
__m64 _m_psrlq(__m64, __m64);
__m64 _m_psrlqi(__m64, int);
__m64 _m_psrlw(__m64, __m64);
__m64 _m_psrlwi(__m64, int);
__m64 _m_psubb(__m64, __m64);
__m64 _m_psubd(__m64, __m64);
__m64 _m_psubsb(__m64, __m64);
__m64 _m_psubsw(__m64, __m64);
__m64 _m_psubusb(__m64, __m64);
__m64 _m_psubusw(__m64, __m64);
__m64 _m_psubw(__m64, __m64);
__m64 _m_pswapd(__m64);
__m64 _m_punpckhbw(__m64, __m64);
__m64 _m_punpckhdq(__m64, __m64);
__m64 _m_punpckhwd(__m64, __m64);
__m64 _m_punpcklbw(__m64, __m64);
__m64 _m_punpckldq(__m64, __m64);
__m64 _m_punpcklwd(__m64, __m64);
__m64 _m_pxor(__m64, __m64);
float _m_to_float(__m64);
int _m_to_int(__m64);
__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);
__m64 _mm_abs_pi16(__m64);
__m64 _mm_abs_pi32(__m64);
__m64 _mm_abs_pi8(__m64);
__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);
__m64 _mm_add_si64(__m64, __m64);
__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);
__m64 _mm_alignr_pi8(__m64, __m64, int);
__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);

unsigned int _mm_crc32_u8(unsigned int, unsigned char);
__m128 _mm_cvt_pi2ps(__m128, __m64);
__m64 _mm_cvt_ps2pi(__m128);
__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
__m64 _mm_cvtpd_pi32(__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtpi32_pd(__m64);
__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);


__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);


__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);






__m128d _mm_cvtss_sd(__m128d, __m128);


__m64 _mm_cvtt_ps2pi(__m128);
int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);
__m64 _mm_cvttpd_pi32(__m128d);
__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);




__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);

int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);
__m64 _mm_hadd_pi16(__m64, __m64);
__m64 _mm_hadd_pi32(__m64, __m64);
__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);
__m64 _mm_hadds_pi16(__m64, __m64);
__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);
__m64 _mm_hsub_pi16(__m64, __m64);
__m64 _mm_hsub_pi32(__m64, __m64);
__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);
__m64 _mm_hsubs_pi16(__m64, __m64);
__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);

__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);
__m64 _mm_maddubs_pi16(__m64, __m64);
void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);
__m64 _mm_movepi64_pi64(__m128i);
__m128i _mm_movpi64_epi64(__m64);
__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);
__m64 _mm_mul_su32(__m64, __m64);
__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);
__m64 _mm_mulhrs_pi16(__m64, __m64);
__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);

void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi64(__m64);

__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);
__m64 _mm_set1_pi16(short);
__m64 _mm_set1_pi32(int);
__m64 _mm_set1_pi8(char);
__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);
__m128i _mm_set_epi64(__m64, __m64);

__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);
__m64 _mm_set_pi16(short, short, short, short);
__m64 _mm_set_pi32(int, int);
__m64 _mm_set_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);
__m128i _mm_setr_epi64(__m64, __m64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);
__m64 _mm_setr_pi16(short, short, short, short);
__m64 _mm_setr_pi32(int, int);
__m64 _mm_setr_pi8(char, char, char, char, char, char, char, char);
__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);
__m64 _mm_setzero_si64(void);
void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);
__m64 _mm_shuffle_pi8(__m64, __m64);
__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);
__m64 _mm_sign_pi16(__m64, __m64);
__m64 _mm_sign_pi32(__m64, __m64);
__m64 _mm_sign_pi8(__m64, __m64);
__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(__m128i *);
void _mm_stream_pd(double *, __m128d);
void _mm_stream_pi(__m64 *, __m64);
void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);

void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);
__m64 _mm_sub_si64(__m64, __m64);
__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);

unsigned int __cdecl _rotl( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr( unsigned int _Value, int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64( unsigned __int64 _Value, int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);


void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);




}
#line 909 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0"
#line 926 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory0"
#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {
#pragma warning(disable: 4127)

#pragma warning(disable: 4251)

template<class _Elem,
 class _Traits = char_traits<_Elem>,
 class _Ax = allocator<_Elem> >
 class basic_string;






template<class _Mystr>
 class _String_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Mystr::value_type,
   typename _Mystr::difference_type,
   typename _Mystr::const_pointer,
   typename _Mystr::const_reference,
   _Iterator_base>
 {
public:
 typedef _String_const_iterator<_Mystr> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::const_pointer pointer;
 typedef typename _Mystr::const_reference reference;

 _String_const_iterator()
  {
  this->_Ptr = 0;
  }

 _String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
  {
  this->_Adopt(_Pstring);
  this->_Ptr = _Parg;
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
#line 91 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
                                    ;

  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
#line 120 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
#line 148 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
#line 180 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }
#line 263 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
 void _Compat(const _Myiter&) const
  {
  }


 pointer _Ptr;
 };

template<class _Mystr> inline
 typename _String_const_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_const_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr>
  _Rechecked(_String_const_iterator<_Mystr>& _Iter,
   typename _String_const_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_const_iterator<_Mystr> operator+(
  typename _String_const_iterator<_Mystr>
   ::difference_type _Off,
  _String_const_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Mystr>
 class _String_iterator
  : public _String_const_iterator<_Mystr>
 {
public:
 typedef _String_iterator<_Mystr> _Myiter;
 typedef _String_const_iterator<_Mystr> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Mystr::value_type value_type;
 typedef typename _Mystr::difference_type difference_type;
 typedef typename _Mystr::pointer pointer;
 typedef typename _Mystr::reference reference;

 _String_iterator()
  {
  }

 _String_iterator(pointer _Parg, const _Container_base *_Pstring)
  : _Mybase(_Parg, _Pstring)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return ((_Mybase)*this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Mystr> inline
 typename _String_iterator<_Mystr>::_Unchecked_type
  _Unchecked(_String_iterator<_Mystr> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mystr> inline
 _String_iterator<_Mystr>
  _Rechecked(_String_iterator<_Mystr>& _Iter,
   typename _String_iterator<_Mystr>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Mystr> inline
 _String_iterator<_Mystr> operator+(
  typename _String_iterator<_Mystr>
   ::difference_type _Off,
  _String_iterator<_Mystr> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _String_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _String_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _String_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Alty::pointer _Tptr;
 typedef typename _Alty::template rebind<_Tptr>::other _Alpty;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _String_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _String_val
  : public _Container_base
 {
public:
 typedef _String_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _String_iterator<_Myt> iterator;
 typedef _String_const_iterator<_Myt> const_iterator;

 _String_val()
  {
  _Mysize = 0;
  _Myres = 0;
  }

 enum
  {
  _BUF_SIZE = 16 / sizeof (value_type) < 1 ? 1
   : 16 / sizeof (value_type)};
 enum
  {
  _ALLOC_MASK = sizeof (value_type) <= 1 ? 15
   : sizeof (value_type) <= 2 ? 7
   : sizeof (value_type) <= 4 ? 3
   : sizeof (value_type) <= 8 ? 1 : 0};

 value_type *_Myptr()
  {
  return (this->_BUF_SIZE <= this->_Myres
   ? ::std:: addressof(*this->_Bx._Ptr)
   : this->_Bx._Buf);
  }

 const value_type *_Myptr() const
  {
  return (this->_BUF_SIZE <= this->_Myres
   ? ::std:: addressof(*this->_Bx._Ptr)
   : this->_Bx._Buf);
  }

 union _Bxty
  {
  value_type _Buf[_BUF_SIZE];
  pointer _Ptr;
  char _Alias[_BUF_SIZE];
  } _Bx;

 size_type _Mysize;
 size_type _Myres;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _String_alloc
  : public _String_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alty _Alval;

 typedef _String_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;


 _String_alloc(const _Alloc& _Al = _Alloc())
  : _Alval(_Al)
  {
  }

 void _Change_alloc(const _Alty& _Al)
  {
  this->_Alval = _Al;
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alval, _Right._Alval);
  }
#line 608 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
 _Alty& _Getal()
  {
  return (this->_Alval);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alval);
  }
 };

template<class _Alloc_types>
 class _String_alloc<false, _Alloc_types>
  : public _String_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _String_alloc<false, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;

 typedef typename _Alloc_types::_Alty _Alty;


 _String_alloc(const _Alloc& = _Alloc())
  {
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt&)
  {
  }
#line 682 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
 class basic_string
  : public _String_alloc<!is_empty<_Alloc>::value,
   _String_base_types<_Elem, _Alloc> >
 {
public:
 typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
 typedef _String_alloc<!is_empty<_Alloc>::value,
  _String_base_types<_Elem, _Alloc> > _Mybase;
 typedef _Traits traits_type;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;

 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 basic_string(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, 0, npos);
  }

 basic_string()
  : _Mybase()
  {
  _Tidy();
  }

 explicit basic_string(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  }

 basic_string(const _Myt& _Right, size_type _Roff,
  size_type _Count = npos)
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Right, _Roff, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr, _Count);
  }

 basic_string(const _Elem *_Ptr)
  : _Mybase()
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(const _Elem *_Ptr, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ptr);
  }

 basic_string(size_type _Count, _Elem _Ch)
  : _Mybase()
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Count, _Ch);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Tidy();
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, input_iterator_tag)
  {
  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First,
   _Iter _Last, forward_iterator_tag)
  {
                             ;
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);
  reserve(_Count);

  try {
  for (; _First != _Last; ++_First)
   append((size_type)1, (_Elem)*_First);
  } catch (...) {
  _Tidy(true);
  throw;
  }
  }

 basic_string(const_pointer _First, const_pointer _Last)
  : _Mybase()
  {
                             ;
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(const_pointer _First, const_pointer _Last,
  const _Alloc& _Al)
  : _Mybase(_Al)
  {
                             ;
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(const_iterator _First, const_iterator _Last)
  : _Mybase()
  {
                             ;
  _Tidy();
  if (_First != _Last)
   assign(&*_First, _Last - _First);
  }

 basic_string(_Myt&& _Right) throw ()
  : _Mybase(_Right._Getal())
  {
  _Tidy();
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 basic_string(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (this->_Getal() != _Right._Getal())
   assign(_Right.begin(), _Right.end());
  else
   _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  if (this != &_Right)
   {
   _Tidy(true);

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());

   if (this->_Getal() != _Right._Getal())
    assign(_Right.begin(), _Right.end());
   else
    _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 _Myt& assign(_Myt&& _Right) throw ()
  {
  if (this == &_Right)
   ;
  else if (get_allocator() != _Right.get_allocator()
   && this->_BUF_SIZE <= _Right._Myres)
   *this = _Right;
  else
   {
   _Tidy(true);
   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (_Right._Myres < this->_BUF_SIZE)
   _Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
    _Right._Mysize + 1);
  else
   {
   this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
   _Right._Bx._Ptr = pointer();
   }
  this->_Mysize = _Right._Mysize;
  this->_Myres = _Right._Myres;
  _Right._Tidy();
  }

 basic_string(::std:: initializer_list<_Elem> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  _Tidy();
  assign(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& operator+=(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& assign(::std:: initializer_list<_Elem> _Ilist)
  {
  return (assign(_Ilist.begin(), _Ilist.end()));
  }

 _Myt& append(::std:: initializer_list<_Elem> _Ilist)
  {
  return (append(_Ilist.begin(), _Ilist.end()));
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  ::std:: initializer_list<_Elem> _Ilist)
  {
  return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
  }

 ~basic_string() throw ()
  {
  _Tidy(true);
  }

          static const size_type npos;

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy(true);
    this->_Change_alloc(_Right._Getal());
    }

   assign(_Right);
   }
  return (*this);
  }

 _Myt& operator=(const _Elem *_Ptr)
  {
  return (assign(_Ptr));
  }

 _Myt& operator=(_Elem _Ch)
  {
  return (assign(1, _Ch));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  return (append(_Right));
  }

 _Myt& operator+=(const _Elem *_Ptr)
  {
  return (append(_Ptr));
  }

 _Myt& operator+=(_Elem _Ch)
  {
  return (append((size_type)1, _Ch));
  }

 _Myt& append(const _Myt& _Right)
  {
  return (append(_Right, 0, npos));
  }

 _Myt& append(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize,
    _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (append(*this,
    _Ptr - this->_Myptr(), _Count));
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& append(const _Elem *_Ptr)
  {
                      ;
  return (append(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& append(size_type _Count, _Elem _Ch)
  {
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Chassign(this->_Mysize, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  append(_Iter _First, _Iter _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_pointer _First, const_pointer _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& append(const_iterator _First, const_iterator _Last)
  {
  return (replace(end(), end(), _First, _Last));
  }

 _Myt& assign(const _Myt& _Right)
  {
  return (assign(_Right, 0, npos));
  }

 _Myt& assign(const _Myt& _Right,
  size_type _Roff, size_type _Count)
  {
  if (_Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Count < _Num)
   _Num = _Count;

  if (this == &_Right)
   erase((size_type)(_Roff + _Num)), erase(0, _Roff);
  else if (_Grow(_Num))
   {
   _Traits::copy(this->_Myptr(),
    _Right._Myptr() + _Roff, _Num);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (assign(*this,
    _Ptr - this->_Myptr(), _Count));

  if (_Grow(_Count))
   {
   _Traits::copy(this->_Myptr(), _Ptr, _Count);
   _Eos(_Count);
   }
  return (*this);
  }

 _Myt& assign(const _Elem *_Ptr)
  {
                      ;
  return (assign(_Ptr, _Traits::length(_Ptr)));
  }

 _Myt& assign(size_type _Count, _Elem _Ch)
  {
  if (_Count == npos)
   _Xlen();

  if (_Grow(_Count))
   {
   _Chassign(0, _Count, _Ch);
   _Eos(_Count);
   }
  return (*this);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  assign(_Iter _First, _Iter _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_pointer _First, const_pointer _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& assign(const_iterator _First, const_iterator _Last)
  {
  return (replace(begin(), end(), _First, _Last));
  }

 _Myt& insert(size_type _Off, const _Myt& _Right)
  {
  return (insert(_Off, _Right, 0, npos));
  }

 _Myt& insert(size_type _Off,
  const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - this->_Mysize <= _Count)
   _Xlen();

  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize - _Off);
   if (this == &_Right)
    _Traits::move(this->_Myptr() + _Off,
     this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
      _Count);
   else
    _Traits::copy(this->_Myptr() + _Off,
     _Right._Myptr() + _Roff, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off,
  const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (insert(_Off, *this,
    _Ptr - this->_Myptr(), _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize - _Off);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& insert(size_type _Off, const _Elem *_Ptr)
  {
                      ;
  return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& insert(size_type _Off,
  size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (npos - this->_Mysize <= _Count)
   _Xlen();
  size_type _Num;
  if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off,
    this->_Mysize - _Off);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 iterator insert(const_iterator _Where)
  {
  return (insert(_Where, _Elem()));
  }

 iterator insert(const_iterator _Where, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, 1, _Ch);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
  {
  size_type _Off = _Pdif(_Where, begin());
  insert(_Off, _Count, _Ch);
  return (begin() + _Off);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Pdif(_Where, begin());
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_pointer _First, const_pointer _Last)
  {
  size_type _Off = _Pdif(_Where, begin());
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 iterator insert(const_iterator _Where,
  const_iterator _First, const_iterator _Last)
  {
  size_type _Off = _Pdif(_Where, begin());
  replace(_Where, _Where, _First, _Last);
  return (begin() + _Off);
  }

 _Myt& erase(size_type _Off = 0)
  {
  if (this->_Mysize < _Off)
   _Xran();
  _Eos(_Off);
  return (*this);
  }

 _Myt& erase(size_type _Off, size_type _Count)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off <= _Count)
   _Eos(_Off);
  else if (0 < _Count)
   {
   value_type *_Ptr = this->_Myptr() + _Off;
   size_type _Newsize = this->_Mysize - _Count;
   _Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
   _Eos(_Newsize);
   }
  return (*this);
  }

 iterator erase(const_iterator _Where)
  {
  size_type _Count = _Pdif(_Where, begin());
  erase(_Count, 1);
  return (iterator(this->_Myptr() + _Count, this));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
                             ;
  size_type _Count = _Pdif(_First, begin());
  erase(_Count, _Pdif(_Last, _First));
  return (iterator(this->_Myptr() + _Count, this));
  }

 void clear() throw ()
  {
  _Eos(0);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
  {
  return (replace(_Off, _N0, _Right, 0, npos));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
  {
  if (this->_Mysize < _Off || _Right.size() < _Roff)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  size_type _Num = _Right.size() - _Roff;
  if (_Num < _Count)
   _Count = _Num;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();

  size_type _Nm = this->_Mysize - _N0 - _Off;
  size_type _Newsize = this->_Mysize + _Count - _N0;
  if (this->_Mysize < _Newsize)
   _Grow(_Newsize);

  if (this != &_Right)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off,
    _Right._Myptr() + _Roff, _Count);
   }
  else if (_Count <= _N0)
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   }
  else if (_Roff <= _Off)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _Count);
   }
  else if (_Off + _N0 <= _Roff)
   {
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + (_Roff + _Count - _N0),
    _Count);
   }
  else
   {
   _Traits::move(this->_Myptr() + _Off,
    this->_Myptr() + _Roff, _N0);
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0, _Nm);
   _Traits::move(this->_Myptr() + _Off + _N0,
    this->_Myptr() + _Roff + _Count,
    _Count - _N0);
   }

  _Eos(_Newsize);
  return (*this);
  }

 _Myt& replace(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count)
  {





  if (_Inside(_Ptr))
   return (replace(_Off, _N0, *this,
    _Ptr - this->_Myptr(),
    _Count));
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
  {
                      ;
  return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 _Myt& replace(size_type _Off,
  size_type _N0, size_type _Count, _Elem _Ch)
  {
  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;
  if (npos - _Count <= this->_Mysize - _N0)
   _Xlen();
  size_type _Nm = this->_Mysize - _N0 - _Off;

  if (_Count < _N0)
   _Traits::move(this->_Myptr() + _Off + _Count,
    this->_Myptr() + _Off + _N0,
    _Nm);
  size_type _Num;
  if ((0 < _Count || 0 < _N0)
   && _Grow(_Num = this->_Mysize + _Count - _N0))
   {
   if (_N0 < _Count)
    _Traits::move(this->_Myptr() + _Off + _Count,
     this->_Myptr() + _Off + _N0, _Nm);
   _Chassign(_Off, _Count, _Ch);
   _Eos(_Num);
   }
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Myt& _Right)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr, size_type _Count)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const _Elem *_Ptr)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  size_type _Count, _Elem _Ch)
  {
  return (replace(
   _Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   _Myt&>::type
  replace(const_iterator _First, const_iterator _Last,
   _Iter _First2, _Iter _Last2)
  {
  _Myt _Right(_First2, _Last2);
  replace(_First, _Last, _Right);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_pointer _First2, const_pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  pointer _First2, pointer _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  const_iterator _First2, const_iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 _Myt& replace(const_iterator _First, const_iterator _Last,
  iterator _First2, iterator _Last2)
  {
  if (_First2 == _Last2)
   erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
  else
   replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
    &*_First2, _Last2 - _First2);
  return (*this);
  }

 iterator begin() throw ()
  {
  return (iterator(this->_Myptr(), this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(this->_Myptr(), this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Myptr() + this->_Mysize, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Myptr() + this->_Mysize, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if ((size() | this->_ALLOC_MASK) < capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 reference at(size_type _Off)
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (this->_Myptr()[_Off]);
  }

 const_reference at(size_type _Off) const
  {
  if (this->_Mysize <= _Off)
   _Xran();
  return (this->_Myptr()[_Off]);
  }

 reference operator[](size_type _Off)
  {
#line 1691 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
  return (this->_Myptr()[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
#line 1704 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xstring"
  return (this->_Myptr()[_Off]);
  }

 void push_back(_Elem _Ch)
  {
  insert(end(), _Ch);
  }

 void pop_back()
  {
  erase(this->_Mysize - 1);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 const _Elem *c_str() const throw ()
  {
  return (this->_Myptr());
  }

 const _Elem *data() const throw ()
  {
  return (c_str());
  }

 size_type length() const throw ()
  {
  return (this->_Mysize);
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  size_type _Num = this->_Getal().max_size();
  return (_Num <= 1 ? 1 : _Num - 1);
  }

 void resize(size_type _Newsize)
  {
  resize(_Newsize, _Elem());
  }

 void resize(size_type _Newsize, _Elem _Ch)
  {
  if (_Newsize <= this->_Mysize)
   _Eos(_Newsize);
  else
   append(_Newsize - this->_Mysize, _Ch);
  }

 size_type capacity() const throw ()
  {
  return (this->_Myres);
  }

 void reserve(size_type _Newcap = 0)
  {
  if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
   {
   size_type _Size = this->_Mysize;
   if (_Grow(_Newcap, true))
    _Eos(_Size);
   }
  }

 bool empty() const throw ()
  {
  return (this->_Mysize == 0);
  }



 size_type copy(_Elem *_Ptr,
  size_type _Count, size_type _Off = 0) const
  {





  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  _Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
  size_type _Count, size_type _Off = 0) const
  {





  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _Count)
   _Count = this->_Mysize - _Off;
  _Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
  return (_Count);
  }

 void _Swap_bx(_Myt& _Right)
  {
  if (this->_BUF_SIZE <= this->_Myres)
   if (this->_BUF_SIZE <= _Right._Myres)
    _Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
   else
    {
    pointer _Ptr = this->_Bx._Ptr;
    this->_Getal().destroy(&this->_Bx._Ptr);
    _Traits::copy(this->_Bx._Buf,
     _Right._Bx._Buf, _Right._Mysize + 1);
    this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
    }
  else
   if (_Right._Myres < this->_BUF_SIZE)
    ::std:: swap(this->_Bx._Buf, _Right._Bx._Buf);
   else
    {
    pointer _Ptr = _Right._Bx._Ptr;
    this->_Getal().destroy(&_Right._Bx._Ptr);
    _Traits::copy(_Right._Bx._Buf,
     this->_Bx._Buf, this->_Mysize + 1);
    this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
    }
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   ::std:: swap(this->_Myres, _Right._Myres);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_bx(_Right);
   ::std:: swap(this->_Bx, _Right._Bx);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   ::std:: swap(this->_Myres, _Right._Myres);
   }

  else
   {
   _Myt _Tmp = *this;

   *this = _Right;
   _Right = _Tmp;
   }
  }

 size_type find(const _Myt& _Right, size_type _Off = 0) const throw ()
  {
  return (find(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (_Count == 0 && _Off <= this->_Mysize)
   return (_Off);

  size_type _Nm;
  if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
   {
   const _Elem *_Uptr, *_Vptr;
   for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
    (_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
    _Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
    if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find(const _Elem *_Ptr, size_type _Off = 0) const
  {
                      ;
  return (find(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find(_Elem _Ch, size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type rfind(const _Myt& _Right, size_type _Off = npos) const throw ()
  {
  return (rfind(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type rfind(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (_Count == 0)
   return (_Off < this->_Mysize ? _Off
    : this->_Mysize);
  if (_Count <= this->_Mysize)
   {
   const _Elem *_Uptr = this->_Myptr() +
    (_Off < this->_Mysize - _Count ? _Off
     : this->_Mysize - _Count);
   for (; ; --_Uptr)
    if (_Traits::eq(*_Uptr, *_Ptr)
     && _Traits::compare(_Uptr, _Ptr, _Count) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
  {
                      ;
  return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type rfind(_Elem _Ch, size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_of(const _Myt& _Right,
  size_type _Off = 0) const throw ()
  {
  return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (0 < _Count && _Off < this->_Mysize)
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
   }

  return (npos);
  }

 size_type find_first_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
                      ;
  return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_of(const _Myt& _Right,
  size_type _Off = npos) const throw ()
  {
  return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (0 < _Count && 0 < this->_Mysize)
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }

  return (npos);
  }

 size_type find_last_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
                      ;
  return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (rfind((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_first_not_of(const _Myt& _Right,
  size_type _Off = 0) const throw ()
  {
  return (find_first_not_of(_Right._Myptr(), _Off,
   _Right.size()));
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (_Off < this->_Mysize)
   {
   const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
   for (const _Elem *_Uptr = this->_Myptr() + _Off;
    _Uptr < _Vptr; ++_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
   }
  return (npos);
  }

 size_type find_first_not_of(const _Elem *_Ptr,
  size_type _Off = 0) const
  {
                      ;
  return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_first_not_of(_Elem _Ch,
  size_type _Off = 0) const
  {
  return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 size_type find_last_not_of(const _Myt& _Right,
  size_type _Off = npos) const throw ()
  {
  return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off, size_type _Count) const
  {





  if (0 < this->_Mysize)
   {
   const _Elem *_Uptr = this->_Myptr()
    + (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
   for (; ; --_Uptr)
    if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
     return (_Uptr - this->_Myptr());
    else if (_Uptr == this->_Myptr())
     break;
   }
  return (npos);
  }

 size_type find_last_not_of(const _Elem *_Ptr,
  size_type _Off = npos) const
  {
                      ;
  return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
  }

 size_type find_last_not_of(_Elem _Ch,
  size_type _Off = npos) const
  {
  return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
  }

 _Myt substr(size_type _Off = 0, size_type _Count = npos) const
  {
  return (_Myt(*this, _Off, _Count, get_allocator()));
  }

 int compare(const _Myt& _Right) const throw ()
  {
  return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
  }

 int compare(size_type _Off, size_type _N0,
  const _Myt& _Right) const
  {
  return (compare(_Off, _N0, _Right, 0, npos));
  }

 int compare(size_type _Off,
  size_type _N0, const _Myt& _Right,
  size_type _Roff, size_type _Count) const
  {
  if (_Right.size() < _Roff)
   _Xran();
  if (_Right._Mysize - _Roff < _Count)
   _Count = _Right._Mysize - _Roff;
  return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
  }

 int compare(const _Elem *_Ptr) const
  {
                      ;
  return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
  {
                      ;
  return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
  }

 int compare(size_type _Off,
  size_type _N0, const _Elem *_Ptr, size_type _Count) const
  {





  if (this->_Mysize < _Off)
   _Xran();
  if (this->_Mysize - _Off < _N0)
   _N0 = this->_Mysize - _Off;

  size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
   _N0 < _Count ? _N0 : _Count);
  return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
   : _N0 == _Count ? 0 : +1);
  }

 allocator_type get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
  {
  if (_Count == 1)
   _Traits::assign(*(this->_Myptr() + _Off), _Ch);
  else
   _Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
  }

 void _Copy(size_type _Newsize, size_type _Oldlen)
  {
  size_type _Newres = _Newsize | this->_ALLOC_MASK;
  if (max_size() < _Newres)
   _Newres = _Newsize;
  else if (this->_Myres / 2 <= _Newres / 3)
   ;
  else if (this->_Myres <= max_size() - this->_Myres / 2)
   _Newres = this->_Myres
    + this->_Myres / 2;
  else
   _Newres = max_size();

  _Elem *_Ptr;
  try {
   _Ptr = this->_Getal().allocate(_Newres + 1);
  } catch (...) {
   _Newres = _Newsize;
   try {
    _Ptr = this->_Getal().allocate(_Newres + 1);
   } catch (...) {
   _Tidy(true);
   throw;
   }
  }

  if (0 < _Oldlen)
   _Traits::copy(_Ptr, this->_Myptr(),
    _Oldlen);
  _Tidy(true);
  this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
  this->_Myres = _Newres;
  _Eos(_Oldlen);
  }

 void _Eos(size_type _Newsize)
  {
  _Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());
  }

 bool _Grow(size_type _Newsize,
  bool _Trim = false)
  {
  if (max_size() < _Newsize)
   _Xlen();
  if (this->_Myres < _Newsize)
   _Copy(_Newsize, this->_Mysize);
  else if (_Trim && _Newsize < this->_BUF_SIZE)
   _Tidy(true,
    _Newsize < this->_Mysize ? _Newsize : this->_Mysize);
  else if (_Newsize == 0)
   _Eos(0);
  return (0 < _Newsize);
  }

 bool _Inside(const _Elem *_Ptr)
  {
  if (_Ptr == 0 || _Ptr < this->_Myptr()
   || this->_Myptr() + this->_Mysize <= _Ptr)
   return (false);
  else
   return (true);
  }

 static size_type _Pdif(const_iterator _P2,
  const_iterator _P1)
  {
  return ((_P2)._Ptr == 0 ? 0 : _P2 - _P1);
  }

 void _Tidy(bool _Built = false,
  size_type _Newsize = 0)
  {
  if (!_Built)
   ;
  else if (this->_BUF_SIZE <= this->_Myres)
   {
   pointer _Ptr = this->_Bx._Ptr;
   this->_Getal().destroy(&this->_Bx._Ptr);
   if (0 < _Newsize)
    _Traits::copy(this->_Bx._Buf,
     ::std:: addressof(*_Ptr), _Newsize);
   this->_Getal().deallocate(_Ptr, this->_Myres + 1);
   }
  this->_Myres = this->_BUF_SIZE - 1;
  _Eos(_Newsize);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("string too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid string position");
  }
 };


template<class _Elem,
 class _Traits,
 class _Alloc>
          const typename basic_string<_Elem, _Traits, _Alloc>::size_type
  basic_string<_Elem, _Traits, _Alloc>::npos =
   (typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);



template<class _Elem,
 class _Traits,
 class _Alloc> inline
 void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Traits::length(_Left) + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(1 + _Right.size());
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + _Traits::length(_Right));
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem _Right)
 {
 basic_string<_Elem, _Traits, _Alloc> _Ans;
 _Ans.reserve(_Left.size() + 1);
 _Ans += _Left;
 _Ans += _Right;
 return (_Ans);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 if (_Right.size() <= _Left.capacity() - _Left.size()
  || _Right.capacity() - _Right.size() < _Left.size())
  return (::std:: move(_Left.append(_Right)));
 else
  return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem *_Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  const _Elem _Left,
  basic_string<_Elem, _Traits, _Alloc>&& _Right)
 {
 return (::std:: move(_Right.insert(0, 1, _Left)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem *_Right)
 {
 return (::std:: move(_Left.append(_Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_string<_Elem, _Traits, _Alloc> operator+(
  basic_string<_Elem, _Traits, _Alloc>&& _Left,
  const _Elem _Right)
 {
 return (::std:: move(_Left.append(1, _Right)));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator==(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) == 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const _Elem *_Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator!=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left == _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right.compare(_Left) > 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Left.compare(_Right) < 0);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (_Right < _Left);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator<=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const _Elem * _Left,
  const basic_string<_Elem, _Traits, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 bool operator>=(
  const basic_string<_Elem, _Traits, _Alloc>& _Left,
  const _Elem *_Right)
 {
 return (!(_Left < _Right));
 }

typedef basic_string<char, char_traits<char>, allocator<char> >
 string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
 wstring;


template<class _Elem,
 class _Traits,
 class _Alloc>
 struct hash<basic_string<_Elem, _Traits, _Alloc> >
  : public unary_function<basic_string<_Elem, _Traits, _Alloc>, size_t>
 {
 typedef basic_string<_Elem, _Traits, _Alloc> _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Hash_seq((const unsigned char *)_Keyval.c_str(),
   _Keyval.size() * sizeof (_Elem)));
  }
 };

typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
 u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
 u32string;
}


#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"


#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
#line 25 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
class logic_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit logic_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit logic_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 50 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class domain_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit domain_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit domain_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 78 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class invalid_argument
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit invalid_argument(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit invalid_argument(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 106 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class length_error
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit length_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit length_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 134 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class out_of_range
 : public logic_error
 {
public:
 typedef logic_error _Mybase;

 explicit out_of_range(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit out_of_range(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 162 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class runtime_error
 : public ::std:: exception
 {
public:
 typedef ::std:: exception _Mybase;

 explicit runtime_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit runtime_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 190 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class overflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit overflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit overflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 218 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class underflow_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit underflow_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit underflow_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 246 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };


class range_error
 : public runtime_error
 {
public:
 typedef runtime_error _Mybase;

 explicit range_error(const string& _Message)
  : _Mybase(_Message.c_str())
  {
  }

 explicit range_error(const char *_Message)
  : _Mybase(_Message)
  {
  }
#line 274 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdexcept"
 };
}

#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
#line 23 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
#pragma pack(push,8)
#pragma warning(push, 3)


#pragma warning(disable: 4275)
#line 37 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
struct __type_info_node {
    void *_MemPtr;
    __type_info_node* _Next;
};

extern __type_info_node __type_info_root_node;

class type_info {
public:
 size_t hash_code() const throw ()
  {
  return (::std:: _Hash_seq((const unsigned char *) name(),
   :: strlen(name())));
  }







    virtual ~type_info() throw ();




    __declspec(dllimport) bool operator==(const type_info& _Rhs) const;
    __declspec(dllimport) bool operator!=(const type_info& _Rhs) const;

    __declspec(dllimport) bool before(const type_info& _Rhs) const;
    __declspec(dllimport) const char* name(__type_info_node* __ptype_info_node = &__type_info_root_node) const;
    __declspec(dllimport) const char* raw_name() const;
private:
    void *_M_data;
    char _M_d_name[1];




public:
                       type_info(const type_info&) = delete;
    type_info& operator=(const type_info&) = delete;
private:

    __declspec(dllimport) static const char *__cdecl _Name_base(const type_info *,__type_info_node* __ptype_info_node);
    __declspec(dllimport) static void __cdecl _Type_info_dtor(type_info *);
#line 95 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
};



 namespace std {

using ::type_info;

 }






 namespace std {

class __declspec(dllimport) bad_cast : public exception {
public:
#line 132 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
                       bad_cast(const char * _Message = "bad cast");
                       bad_cast(const bad_cast &);
    virtual ~bad_cast() throw ();







};

class __declspec(dllimport) bad_typeid : public exception {
public:
#line 156 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
                       bad_typeid(const char * _Message = "bad typeid");
                       bad_typeid(const bad_typeid &);
    virtual ~bad_typeid() throw ();


};

class __declspec(dllimport) __non_rtti_object : public bad_typeid {
public:
#line 175 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
                       __non_rtti_object(const char * _Message);
                       __non_rtti_object(const __non_rtti_object &);
    virtual ~__non_rtti_object() throw ();

};

 }
#line 245 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\typeinfo"
#pragma pack(pop)
#pragma warning(pop)
#line 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo.h"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ctype.h"
#line 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ctype.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ctype.h"



extern "C" {
#line 119 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ctype.h"
               __declspec(dllimport) int __cdecl _isctype( int _C, int _Type);
               __declspec(dllimport) int __cdecl _isctype_l( int _C, int _Type, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalpha( int _C);
               __declspec(dllimport) int __cdecl _isalpha_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isupper( int _C);
               __declspec(dllimport) int __cdecl _isupper_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl islower( int _C);
               __declspec(dllimport) int __cdecl _islower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isdigit( int _C);
               __declspec(dllimport) int __cdecl _isdigit_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isxdigit( int _C);
               __declspec(dllimport) int __cdecl _isxdigit_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isspace( int _C);
               __declspec(dllimport) int __cdecl _isspace_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl ispunct( int _C);
               __declspec(dllimport) int __cdecl _ispunct_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isblank( int _C);
               __declspec(dllimport) int __cdecl _isblank_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl isalnum( int _C);
               __declspec(dllimport) int __cdecl _isalnum_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isprint( int _C);
               __declspec(dllimport) int __cdecl _isprint_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl isgraph( int _C);
               __declspec(dllimport) int __cdecl _isgraph_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl iscntrl( int _C);
               __declspec(dllimport) int __cdecl _iscntrl_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl toupper( int _C);
                                  __declspec(dllimport) int __cdecl tolower( int _C);
                                  __declspec(dllimport) int __cdecl _tolower( int _C);
               __declspec(dllimport) int __cdecl _tolower_l( int _C, _locale_t _Locale);
                                  __declspec(dllimport) int __cdecl _toupper( int _C);
               __declspec(dllimport) int __cdecl _toupper_l( int _C, _locale_t _Locale);
               __declspec(dllimport) int __cdecl __isascii( int _C);
               __declspec(dllimport) int __cdecl __toascii( int _C);
               __declspec(dllimport) int __cdecl __iscsymf( int _C);
               __declspec(dllimport) int __cdecl __iscsym( int _C);
#line 387 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ctype.h"
}
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo.h"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\locale.h"
#line 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\locale.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 19 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\locale.h"






#pragma pack(push,8)


extern "C" {
#line 55 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\locale.h"
struct lconv {
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        wchar_t *_W_decimal_point;
        wchar_t *_W_thousands_sep;
        wchar_t *_W_int_curr_symbol;
        wchar_t *_W_currency_symbol;
        wchar_t *_W_mon_decimal_point;
        wchar_t *_W_mon_thousands_sep;
        wchar_t *_W_positive_sign;
        wchar_t *_W_negative_sign;
        };
#line 107 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\locale.h"
                   __declspec(dllimport) int __cdecl _configthreadlocale( int _Flag);
                   __declspec(dllimport) char * __cdecl setlocale( int _Category, const char * _Locale);
                   __declspec(dllimport) struct lconv * __cdecl localeconv(void);
                   __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);
                   __declspec(dllimport) _locale_t __cdecl _create_locale( int _Category, const char * _Locale);
__declspec(dllimport) void __cdecl _free_locale( _locale_t _Locale);



               __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_get_current_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __get_current_locale(void);
               __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_create_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __create_locale( int _Category, const char * _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_free_locale" " instead. See online help for details.")) __declspec(dllimport) void __cdecl __free_locale( _locale_t _Locale);
#line 132 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\locale.h"
}


#pragma pack(pop)
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo.h"




#pragma pack(push,8)
#pragma warning(push, 3)






extern "C" {
#line 56 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo.h"
typedef struct _Collvec
 {
 unsigned int _Page;
 wchar_t *_LocaleName;
 } _Collvec;

typedef struct _Ctypevec
 {
 unsigned int _Page;
 const short *_Table;
 int _Delfl;
 wchar_t *_LocaleName;
 } _Ctypevec;

typedef struct _Cvtvec
 {
 unsigned int _Page;
 unsigned int _Mbcurmax;
 int _Isclocale;
 unsigned char _Isleadbyte[32];
 } _Cvtvec;


__declspec(dllimport) _Collvec __cdecl _Getcoll();
__declspec(dllimport) _Ctypevec __cdecl _Getctype();
__declspec(dllimport) _Cvtvec __cdecl _Getcvt();
__declspec(dllimport) int __cdecl _Getdateorder();
#line 93 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) int __cdecl _Mbrtowc( wchar_t *, const char *, size_t,
 mbstate_t *, const _Cvtvec *);


__declspec(dllimport) float __cdecl _Stof(const char *,
                                  char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,
                                  char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,
                                  char **, long);

__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
 const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
                                                             char *_String1,
        char *_End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Wcrtomb( char *, wchar_t, mbstate_t *,
 const _Cvtvec *);
__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
 const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
                                                             wchar_t *_String1,
        wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t *__cdecl _Getwctypes(const wchar_t *,
 const wchar_t *, short *, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);



}




extern "C" {
__declspec(dllimport) char *__cdecl _Getdays();
__declspec(dllimport) char *__cdecl _Getmonths();
__declspec(dllimport) void *__cdecl _Gettnames();
__declspec(dllimport) size_t __cdecl _Strftime( char *,
      size_t _Maxsize, const char *,
      const struct tm *, void *);

__declspec(dllimport) wchar_t *__cdecl _W_Getdays();
__declspec(dllimport) wchar_t *__cdecl _W_Getmonths();
__declspec(dllimport) void *__cdecl _W_Gettnames();
__declspec(dllimport) size_t __cdecl _Wcsftime( wchar_t *,
      size_t _Maxsize, const wchar_t *,
      const struct tm *, void *);
}
#line 156 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo.h"
__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);



#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocinfo"




#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)

namespace std {

class __declspec(dllimport) _Timevec
 {
public:
                    _Timevec(void *_Ptr = 0)
  : _Timeptr(_Ptr)
  {
  }

                    _Timevec(const _Timevec& _Right)
  {
  *this = _Right;
  }

                    ~_Timevec() throw ()
  {
  free(_Timeptr);
  }

 _Timevec& operator=(const _Timevec& _Right)
  {
  _Timeptr = _Right._Timeptr;
  ((_Timevec *)&_Right)->_Timeptr = 0;
  return (*this);
  }

 void * _Getptr() const
  {
  return (_Timeptr);
  }

private:
 void *_Timeptr;
 };


class __declspec(dllimport) _Locinfo
 {
public:
 typedef ::_Collvec _Collvec;
 typedef ::_Ctypevec _Ctypevec;
 typedef ::_Cvtvec _Cvtvec;
 typedef ::std:: _Timevec _Timevec;

 static void __cdecl _Locinfo_ctor(
  _Locinfo *, const char *);
 static void __cdecl _Locinfo_ctor(
  _Locinfo *, int, const char *);
 static void __cdecl _Locinfo_dtor(
  _Locinfo *);
 static _Locinfo& __cdecl _Locinfo_Addcats(
  _Locinfo *, int, const char *);

                    _Locinfo(const char *_Pch = "C")

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Pch);
  }

                    _Locinfo(int _Cat, const char *_Pch)

  : _Lock(0)


  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  _Locinfo_ctor(this, _Cat, _Pch);
  }

                    ~_Locinfo() throw ()
  {
  _Locinfo_dtor(this);
  }

 _Locinfo& _Addcats(int _Cat, const char *_Pch)
  {
  if (_Pch == 0)
   throw runtime_error("bad locale name");
  return (_Locinfo_Addcats(this, _Cat, _Pch));
  }

 const char * _Getname() const
  {
  return (_Newlocname._C_str());
  }

 _Collvec _Getcoll() const
  {
  return (::_Getcoll());
  }

 _Ctypevec _Getctype() const
  {
  return (::_Getctype());
  }

 _Cvtvec _Getcvt() const
  {
  return (::_Getcvt());
  }

 const lconv * _Getlconv() const
  {
  return (localeconv());
  }

 _Timevec _Gettnames() const
  {
  return (_Timevec(::_Gettnames()));
  }

 const char * _Getdays() const
  {
  const char *_Ptr = ::_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Days = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Days._Empty() ? _Days._C_str()
   : ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    ":Thu:Thursday:Fri:Friday:Sat:Saturday");
  }

 const char * _Getmonths() const
  {
  const char *_Ptr = ::_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_Months = _Ptr;
   free((void *)_Ptr);
   }
  return (!_Months._Empty() ? _Months._C_str()
   : ":Jan:January:Feb:February:Mar:March"
    ":Apr:April:May:May:Jun:June"
    ":Jul:July:Aug:August:Sep:September"
    ":Oct:October:Nov:November:Dec:December");
  }

 const char * _Getfalse() const
  {
  return ("false");
  }

 const char * _Gettrue() const
  {
  return ("true");
  }

 int _Getdateorder() const
  {
  return (::_Getdateorder());
  }

 _Timevec _W_Gettnames() const
  {
  return (_Timevec(::_W_Gettnames()));
  }

 const unsigned short * _W_Getdays() const
  {
  const wchar_t *_Ptr = ::_W_Getdays();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Days = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Days._Empty()
   ? _W_Days._C_str()
   : L":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
    L":Thu:Thursday:Fri:Friday:Sat:Saturday"));
  }

 const unsigned short * _W_Getmonths() const
  {
  const wchar_t *_Ptr = ::_W_Getmonths();

  if (_Ptr != 0)
   {
   ((_Locinfo *)this)->_W_Months = _Ptr;
   free((void *)_Ptr);
   }
  return ((const unsigned short *)(!_W_Months._Empty()
   ? _W_Months._C_str()
   : L":Jan:January:Feb:February:Mar:March"
    L":Apr:April:May:May:Jun:June"
    L":Jul:July:Aug:August:Sep:September"
    L":Oct:October:Nov:November:Dec:December"));
  }

 _Locinfo(const _Locinfo&) = delete;
 _Locinfo& operator=(const _Locinfo&) = delete;

private:




 _Lockit _Lock;


 _Yarn<char> _Days;
 _Yarn<char> _Months;
 _Yarn<wchar_t> _W_Days;
 _Yarn<wchar_t> _W_Months;
 _Yarn<char> _Oldlocname;
 _Yarn<char> _Newlocname;
 };


template<class _Elem> inline
 int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
  if (*_First1 < *_First2)
   return (-1);
  else if (*_First2 < *_First1)
   return (+1);
 return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
 }

template<> inline
 int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
 }


template<class _Elem> inline
 size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
  const _Elem *_First2, const _Elem *_Last2,
   const _Locinfo::_Collvec *)
 {
 size_t _Count = _Last2 - _First2;
 if (_Count <= (size_t)(_Last1 - _First1))
  ::memcpy_s((_First1), ((_Last1 - _First1) * sizeof (_Elem)), (_First2), (_Count * sizeof (_Elem)));

 return (_Count);
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               char *_First1, char *_Last1,
  const char *_First2, const char *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }

template<> inline
 size_t __cdecl _LStrxfrm(
                               wchar_t *_First1, wchar_t *_Last1,
  const wchar_t *_First2, const wchar_t *_Last2,
   const _Locinfo::_Collvec *_Vector)
 {
 return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xdebug"







#pragma pack(push,8)
#pragma warning(push, 3)






namespace std {
struct _DebugHeapTag_t
 {
 int _Type;
 };
}
#line 77 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xdebug"
#pragma warning(pop)
#pragma pack(pop)
#line 11 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xfacet"







#pragma pack(push,8)
#pragma warning(push, 3)








namespace std {

class __declspec(dllimport) _Facet_base
 {
public:
 virtual ~_Facet_base() throw ()
  {
  }


 virtual void _Incref() = 0;


 virtual _Facet_base * _Decref() = 0;
 };





void __cdecl _Facet_Register(_Facet_base *);

}

#pragma warning(pop)
#pragma pack(pop)
#line 13 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412 28197)

namespace std {

template<class _Dummy>
 class _Locbase
 {
public:
          static const int collate = ((1 << (1)) >> 1);
          static const int ctype = ((1 << (2)) >> 1);
          static const int monetary = ((1 << (3)) >> 1);
          static const int numeric = ((1 << (4)) >> 1);
          static const int time = ((1 << (5)) >> 1);
          static const int messages = ((1 << (6)) >> 1);
          static const int all = (((1 << ((6 + 1))) >> 1) - 1);
          static const int none = 0;
 };

template<class _Dummy>
 const int _Locbase<_Dummy>::collate;
template<class _Dummy>
 const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
 const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
 const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
 const int _Locbase<_Dummy>::time;
template<class _Dummy>
 const int _Locbase<_Dummy>::messages;
template<class _Dummy>
 const int _Locbase<_Dummy>::all;
template<class _Dummy>
 const int _Locbase<_Dummy>::none;


class locale;
template<class _Facet>
 const _Facet& __cdecl use_facet(const locale&);
template<class _Elem>
 class collate;

class locale
 : public _Locbase<int>
 {
public:
 typedef int category;


 class __declspec(dllimport) id
  {
 public:
                     id(size_t _Val = 0)
   : _Id(_Val)
   {
   }

                     operator size_t()
   {
   if (_Id == 0)
    {
    { ::std:: _Lockit _Lock(0);
     if (_Id == 0)
      _Id = ++_Id_cnt;
    }
    }
   return (_Id);
   }

 private:
  size_t _Id;

                          static int _Id_cnt;

 public:
                     id(const id&) = delete;
  id& operator=(const id&) = delete;
  };

 class _Locimp;


 class __declspec(dllimport) facet
  : public _Facet_base
  {
  friend class locale;
  friend class _Locimp;

  template<class _Ty>
   friend void __cdecl _DebugHeapDelete(_Ty *_Ptr);

 public:
  static size_t __cdecl _Getcat(const facet ** = 0,
   const locale * = 0)
   {
   return ((size_t)(-1));
   }
#line 143 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"
  virtual void _Incref()
   {
   _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Refs));
   }

  virtual _Facet_base * _Decref()
   {
   if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Refs)) == 0)
    return (this);
   else
    return (0);
   }

 private:
  _Atomic_counter_t _Refs;

 protected:
  explicit facet(size_t _Initrefs = 0)
   {
   _Init_atomic_counter(_Refs, (_Atomic_integral_t)_Initrefs);
   }

  virtual ~facet() throw ()
   {
   }

 public:
                     facet(const facet&) = delete;
  facet& operator=(const facet&) = delete;
  };


#pragma warning(push)
#pragma warning(disable: 4275)

 class __declspec(dllimport) _Locimp
  : public facet
  {
 protected:
                     ~_Locimp() throw ()
  {
  _Locimp_dtor(this);
  }

 private:
  static _Locimp *__cdecl
   _New_Locimp(bool _Transparent = false);
  static _Locimp *__cdecl
   _New_Locimp(const _Locimp& _Right);

  static void __cdecl
   _Locimp_dtor(_Locimp *);
  static void __cdecl
   _Locimp_Addfac(_Locimp *, facet *, size_t);
  static void __cdecl
   _Locimp_ctor(_Locimp *, const _Locimp&);

  friend class locale;

                     _Locimp(bool _Transparent)
   : locale::facet(1), _Facetvec(0), _Facetcount(0),
    _Catmask(none), _Xparent(_Transparent),
     _Name("*")
   {
   }

                     _Locimp(const _Locimp& _Right)
   : locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
    _Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
     _Name(_Right._Name.c_str())
   {
   _Locimp_ctor(this, _Right);
   }

  void _Addfac(facet *_Pfacet, size_t _Id)
   {
   _Locimp_Addfac(this, _Pfacet, _Id);
   }

  static _Locimp *__cdecl _Makeloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  static void __cdecl _Makewloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makeushloc(const _Locinfo&,
   category, _Locimp *, const locale *);


  static void __cdecl _Makexloc(const _Locinfo&,
   category, _Locimp *, const locale *);

  facet **_Facetvec;
  size_t _Facetcount;
  category _Catmask;
  bool _Xparent;
  _Yarn<char> _Name;

                          static _Locimp *_Clocptr;

public:
  _Locimp& operator=(const _Locimp&) = delete;
  };

#pragma warning(pop)

 template<class _Elem,
  class _Traits,
  class _Alloc>
  bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
   const basic_string<_Elem, _Traits, _Alloc>& _Right) const
  {
  const ::std:: collate<_Elem>& _Coll_fac =
   use_facet< ::std:: collate<_Elem> >(*this);

  return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
   _Right.c_str(), _Right.c_str() + _Right.size()) < 0);
  }

 template<class _Facet>
  locale combine(const locale& _Loc) const
  {
  _Facet *_Facptr;

  try {
   _Facptr = (_Facet *)&use_facet<_Facet>(_Loc);
  } catch (...) {
   _Xruntime_error("locale::combine facet missing");
  }

  _Locimp *_Newimp = _Locimp::_New_Locimp(*_Ptr);
  _Newimp->_Addfac(_Facptr, _Facet::id);
  _Newimp->_Catmask = 0;
  _Newimp->_Name = "*";
  return (locale(_Newimp));
  }

 template<class _Facet>
  locale(const locale& _Loc, const _Facet *_Facptr)
   : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  if (_Facptr != 0)
   {
   _Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
   if (_Facet::_Getcat() != (size_t)(-1))
    {
    _Ptr->_Catmask = 0;
    _Ptr->_Name = "*";
    }
   }
  }

 locale(_Uninitialized)
  {
  }
#line 321 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"
 locale(const locale& _Right) throw ()
  : _Ptr(_Right._Ptr)
  {
  _Ptr->_Incref();
  }

 locale() throw ()
  : _Ptr(_Init(true))
  {
  }


 locale(const locale& _Loc, const locale& _Other,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   _Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
    _Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
  }
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }
  }

private:
 void _Construct(const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  try {
  _Init();
  { _Locinfo _Lobj(_Cat, _Str.c_str());
   if (_Badname(_Lobj))
    _Bad = true;
   else
    _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }

  if (_Bad)
   {
   delete (_Ptr->_Decref());
   _Xruntime_error("bad locale name");
   }
  }

 void _Construct(const locale& _Loc, const string &_Str,
  category _Cat)
  {
  bool _Bad = false;
  try {
  { _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
   bool _Hadname = !_Badname(_Lobj);
   _Lobj._Addcats(_Cat, _Str.c_str());

   if (_Hadname && _Badname(_Lobj))
    _Bad = true;
   else
    _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
  }
  } catch (...) {
  delete (_Ptr->_Decref());
  throw;
  }

  if (_Bad)
   {
   delete (_Ptr->_Decref());
   _Xruntime_error("bad locale name");
   }
  }

public:
 explicit locale(const char *_Locname,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Locname, _Cat);
  }

 locale(const locale& _Loc, const char *_Locname,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {


  if (_Locname == 0)
   _Xruntime_error("bad locale name");
  _Construct(_Loc, _Locname, _Cat);
  }

 explicit locale(const string& _Str,
  category _Cat = all)
  : _Ptr(_Locimp::_New_Locimp())
  {
  _Construct(_Str, _Cat);
  }

 locale(const locale& _Loc, const string& _Str,
  category _Cat)
  : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr))
  {
  _Construct(_Loc, _Str, _Cat);
  }


 ~locale() throw ()
  {
  if (_Ptr != 0)
   delete (_Ptr->_Decref());
  }

 locale& operator=(const locale& _Right) throw ()
  {
  if (_Ptr != _Right._Ptr)
   {
   delete (_Ptr->_Decref());
   _Ptr = _Right._Ptr;
   _Ptr->_Incref();
   }
  return (*this);
  }


 string name() const
  {
  return (_Ptr == 0 ? string() : _Ptr->_Name.c_str());
  }

 const char *c_str() const
  {
  return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());
  }

 const facet *_Getfacet(size_t _Id) const
  {
  const facet *_Facptr = _Id < _Ptr->_Facetcount
   ? _Ptr->_Facetvec[_Id] : 0;
  if (_Facptr != 0 || !_Ptr->_Xparent)
   return (_Facptr);
  else
   {
   locale::_Locimp *_Ptr = _Getgloballocale();
   return (_Id < _Ptr->_Facetcount
    ? _Ptr->_Facetvec[_Id]
    : 0);
   }
  }

 bool operator==(const locale& _Loc) const
  {
  return (_Ptr == _Loc._Ptr
   || (name().compare("*") != 0
    && name().compare(_Loc.name()) == 0));
  }

 bool operator!=(const locale& _Right) const
  {
  return (!(*this == _Right));
  }

 static __declspec(dllimport) const locale& __cdecl
  classic();

 static __declspec(dllimport) locale __cdecl
  global(const locale&);

 static __declspec(dllimport) locale __cdecl
  empty();

private:
 locale(_Locimp *_Ptrimp)
  : _Ptr(_Ptrimp)
  {
  }

    static __declspec(dllimport) _Locimp *__cdecl
  _Init(bool _Do_incref = false);
 static __declspec(dllimport) _Locimp *__cdecl
  _Getgloballocale();
 static __declspec(dllimport) void __cdecl
  _Setgloballocale(void *);

 bool _Badname(const _Locinfo& _Lobj)
  {
  return (:: strcmp(_Lobj._Getname(), "*") == 0);
  }

 _Locimp *_Ptr;
 };
#line 543 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"
template<class _Facet>
 struct _Facetptr
 {
                         static const locale::facet *_Psave;
 };

template<class _Facet>
                         const locale::facet *_Facetptr<_Facet>::
  _Psave = 0;






template<class _Facet> inline
 const _Facet& __cdecl use_facet(const locale& _Loc)

 {





 { ::std:: _Lockit _Lock(0);
  const locale::facet *_Psave =
   _Facetptr<_Facet>::_Psave;

  size_t _Id = _Facet::id;
  const locale::facet *_Pf = _Loc._Getfacet(_Id);

  if (_Pf != 0)
   ;
  else if (_Psave != 0)
   _Pf = _Psave;
  else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))



   throw ::std:: bad_cast();





  else
   {
   _Pf = _Psave;
   _Facetptr<_Facet>::_Psave = _Psave;

   locale::facet *_Pfmod = (_Facet *)_Psave;
   _Pfmod->_Incref();





   _Facet_Register(_Pfmod);

   }

  return ((const _Facet&)(*_Pf));
 }

 }


template<class _Elem,
 class _InIt> inline
 int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
  const _Elem *_Ptr)
 {
 for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
  if (_Ptr[_Off] == _Ptr[0])
   ++_Numfields;
 string _Str(_Numfields, '\0');

 int _Ans = -2;
 for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
  {
  bool _Prefix = false;
  size_t _Off = 0;
  size_t _Field = 0;

  for (; _Field < _Numfields; ++_Field)
   {
   for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
    ;

   if (_Str[_Field] != '\0')
    _Off += _Str[_Field];
   else if (_Ptr[_Off += _Column] == _Ptr[0]
    || _Ptr[_Off] == (_Elem)0)
    {
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
    _Ans = (int)_Field;
    }
   else if (_First == _Last || _Ptr[_Off] != *_First)
    _Str[_Field] = (char)(_Column < 127
     ? _Column : 127);
   else
    _Prefix = true;
   }

  if (!_Prefix || _First == _Last)
   break;
  }
 return (_Ans);
 }





template<class _Elem> inline
 char __cdecl _Maklocbyte(_Elem _Char,
  const _Locinfo::_Cvtvec&)
 {
 return ((char)(unsigned char)_Char);
 }

template<> inline
 char __cdecl _Maklocbyte(wchar_t _Char,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {0};
 _Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }


template<> inline
 char __cdecl _Maklocbyte(unsigned short _Char,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 char _Byte = '\0';
 mbstate_t _Mbst1 = {0};
 _Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
 return (_Byte);
 }






template<class _Elem> inline
 _Elem __cdecl _Maklocchr(char _Byte, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 return ((_Elem)(unsigned char)_Byte);
 }

template<> inline
 wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 wchar_t _Wc = L'\0';
 mbstate_t _Mbst1 = {0};
 _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }


template<> inline
 unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 unsigned short _Wc = (unsigned short)0;
 mbstate_t _Mbst1 = {0};
 _Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
 return (_Wc);
 }






template<class _Elem> inline
 _Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
  const _Locinfo::_Cvtvec&)
 {
 size_t _Count = :: strlen(_Ptr) + 1;
 _Elem *_Ptrdest = new _Elem[_Count];

#pragma warning(push)
#pragma warning(disable: 6011)
 for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
  *_Ptrnext = (_Elem)(unsigned char)*_Ptr;
#pragma warning(pop)

 return (_Ptrdest);
 }

template<> inline
 wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
  const _Locinfo::_Cvtvec& _Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 wchar_t _Wc;
 mbstate_t _Mbst1 = {0};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = new wchar_t[_Wchars];
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {0};

#pragma warning(push)
#pragma warning(disable: 6011)
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
#pragma warning(pop)

 return (_Ptrdest);
 }


template<> inline
 unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
  const _Locinfo::_Cvtvec &_Cvt)
 {
 size_t _Count, _Count1;
 size_t _Wchars;
 const char *_Ptr1;
 int _Bytes;
 unsigned short _Wc;
 mbstate_t _Mbst1 = {0};

 _Count1 = :: strlen(_Ptr) + 1;
 for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
  _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
  if ((_Bytes =
   _Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
   break;
 ++_Wchars;

 wchar_t *_Ptrdest = new wchar_t[_Wchars];
 wchar_t *_Ptrnext = _Ptrdest;
 mbstate_t _Mbst2 = {0};
 for (; 0 < _Wchars;
  _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
  if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
   break;
 *_Ptrnext = L'\0';
 return ((unsigned short *)_Ptrdest);
 }



#pragma warning(push)
#pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
 : public locale::facet
 {
public:
 enum
  {
  ok, partial, error, noconv};
 typedef int result;

                    codecvt_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

 bool always_noconv() const throw ()
  {
  return (do_always_noconv());
  }

 int max_length() const throw ()
  {
  return (do_max_length());
  }

 int encoding() const throw ()
  {
  return (do_encoding());
  }

                    ~codecvt_base() throw ()
  {
  }

protected:
 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (1);
  }

 virtual int do_encoding() const throw ()
  {
  return (1);
  }
 };

#pragma warning(pop)


template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt
  : public codecvt_base
 {
public:
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State, _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Locinfo());
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() throw ()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (is_same<_Byte, _Elem>::value);
  }

 virtual result do_in(_Statype&,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Elem)*_Mid1;
   return (ok);
   }
  }

 virtual result do_out(_Statype&,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  _Mid1 = _First1, _Mid2 = _First2;
  if (is_same<_Byte, _Elem>::value)
   return (noconv);
  else
   {
   for (; _Mid1 != _Last1 && _Mid2 != _Last2; ++_Mid1, ++_Mid2)
    *_Mid2 = (_Byte)*_Mid1;
   return (ok);
   }
  }

 virtual result do_unshift(_Statype&,
  _Byte *_First2, _Byte *, _Byte *&_Mid2) const
  {
  _Mid2 = _First2;
  return (ok);
  }

 virtual int do_length(_Statype&, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return ((int)(_Count < (size_t)(_Last1 - _First1)
   ? _Count : _Last1 - _First1));
  }
 };


template<class _Elem,
 class _Byte,
 class _Statype>
                         locale::id codecvt<_Elem, _Byte, _Statype>::id;
#line 1590 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocale"
template<>
 class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef wchar_t _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() throw ()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     return (_Ans);
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
     }
    }
  return (_Ans);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
                               ;
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (5);
  }

 virtual int do_encoding() const throw ()
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
 : public codecvt_base
 {
public:
 typedef unsigned short _Elem;
 typedef char _Byte;
 typedef _Mbstatet _Statype;
 typedef _Elem intern_type;
 typedef _Byte extern_type;
 typedef _Statype state_type;

 result in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
  _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
  return (do_in(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_out(_State,
   _First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
  }

 result unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
  return (do_unshift(_State,
   _First2, _Last2, _Mid2));
  }

 int length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
  return (do_length(_State, _First1, _Last1, _Count));
  }

                         static locale::id id;

 explicit codecvt(size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
  : codecvt_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new codecvt<_Elem, _Byte, _Statype>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~codecvt() throw ()
  {
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Cvt = _Lobj._Getcvt();
  }

 virtual result do_in(_Statype& _State,
  const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
   _Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
    &_State, &_Cvt))
   {
   case -2:
    _Mid1 = _Last1;
    return (_Ans);

   case -1:
    return (error);

   case 0:
    if (*_Mid2 == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Mid2;
    _Ans = ok;
   }
  return (_Ans);
  }

 virtual result do_out(_Statype& _State,
  const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
   _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
                               ;
  _Mid1 = _First1, _Mid2 = _First2;
  result _Ans = _Mid1 == _Last1 ? ok : partial;
  int _Bytes;

  while (_Mid1 != _Last1 && _Mid2 != _Last2)
   if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
    if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
   else
    {
    _Byte _Buf[5];
    _Statype _Stsave = _State;

    if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
     &_State, &_Cvt)) < 0)
     return (error);
    else if (_Last2 - _Mid2 < _Bytes)
     {
     _State = _Stsave;
     return (_Ans);
     }
    else
     {
     :: memcpy(_Mid2, _Buf, _Bytes);
     ++_Mid1, _Mid2 += _Bytes, _Ans = ok;
     }
    }
  return (_Ans);
  }

 virtual result do_unshift(_Statype& _State,
  _Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
  {
                               ;
  _Mid2 = _First2;
  result _Ans = ok;
  int _Bytes;
  _Byte _Buf[5];
  _Statype _Stsave = _State;

  if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
   _Ans = error;
  else if (_Last2 - _Mid2 < --_Bytes)
   {
   _State = _Stsave;
   _Ans = partial;
   }
  else if (0 < _Bytes)
   {
   :: memcpy(_Mid2, _Buf, _Bytes);
   _Mid2 += _Bytes;
   }
  return (_Ans);
  }

 virtual int do_length(_Statype& _State, const _Byte *_First1,
  const _Byte *_Last1, size_t _Count) const
  {
                               ;
  int _Wchars;
  const _Byte *_Mid1;
  _Statype _Mystate = _State;

  for (_Wchars = 0, _Mid1 = _First1;
   (size_t)_Wchars < _Count && _Mid1 != _Last1; )
   {
   int _Bytes;
   _Elem _Ch;

   switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
    &_Mystate, &_Cvt))
    {
   case -2:
    return (_Wchars);

   case -1:
    return (_Wchars);

   case 0:
    if (_Ch == (_Elem)0)
     _Bytes = (int):: strlen(_Mid1) + 1;


   default:
    if (_Bytes == -3)
     _Bytes = 0;
    _Mid1 += _Bytes;
    ++_Wchars;
    }
   }
  return (_Wchars);
  }

 virtual bool do_always_noconv() const throw ()
  {
  return (false);
  }

 virtual int do_max_length() const throw ()
  {
  return (5);
  }

 virtual int do_encoding() const throw ()
  {
  return (0);
  }

private:
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem,
 class _Byte,
 class _Statype>
 class codecvt_byname
  : public codecvt<_Elem, _Byte, _Statype>
 {
public:
 explicit codecvt_byname(const char *_Locname, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit codecvt_byname(const string& _Str, size_t _Refs = 0)
  : codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~codecvt_byname() throw ()
  {
  }
 };


#pragma warning(push)
#pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
 : public locale::facet
 {
 enum
  {
  alnum = 0x4 | 0x2 | 0x1 | 0x100, alpha = 0x2 | 0x1 | 0x100,
  cntrl = 0x20, digit = 0x4, graph = 0x4 | 0x2 | 0x10 | 0x1 | 0x100,
  lower = 0x2, print = 0x4 | 0x2 | 0x10 | 0x40 | 0x1 | 0x100 | 0x80,
  punct = 0x10, space = 0x8 | 0x40 | 0x000, upper = 0x1,
  xdigit = 0x80, blank = 0x8 | 0x40 | 0x000 | 0x000};
 typedef short mask;

                    ctype_base(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  }

                    ~ctype_base() throw ()
  {
  }
 };

#pragma warning(pop)


template<class _Elem>
 class ctype
  : public ctype_base
 {
public:
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() throw ()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);

  free((void *)_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
   & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
  return (_First);
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Tolower(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Tolower(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
  if (_Byte == '\0')
   return (_Ch);
  else
   return (widen((char)_Toupper(_Byte, &_Ctype)));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   {
   unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
   if (_Byte != '\0')
    *_First = (widen((char)_Toupper(_Byte, &_Ctype)));
   }
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Byte;
  if (_Ch == (_Elem)0)
   return ('\0');
  else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
   return (_Dflt);
  else
   return (_Byte);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };


template<class _Elem>
 locale::id ctype<_Elem>::id;


template<>
 class __declspec(dllimport) ctype<char>
 : public ctype_base
 {
 typedef ctype<char> _Myt;

public:
 typedef char _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
  }

 const _Elem * is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Ctype._Table[(unsigned char)*_First];
  return (_First);
  }

 const _Elem * scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 const _Elem * scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const _Elem * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 _Elem narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(const mask *_Table = 0,
  bool _Deletetable = false,
  size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }

  _Tidy();
  if (_Table != 0)
   {
   _Ctype._Table = _Table;
   _Ctype._Delfl = _Deletetable ? -1 : 0;
   }
  else
   {
   _Ctype._Table = classic_table();
   _Ctype._Delfl = 0;
   }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

 const mask * table() const throw ()
  {
  return (_Ctype._Table);
  }

 static const mask *__cdecl classic_table() throw ()
  {
  const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
  return (_Ctype_fac.table());
  }

          static const size_t table_size =
  1 << 8;

protected:
 virtual ~ctype() throw ()
  {
  _Tidy();
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  }

 void _Tidy()
  {
  if (0 < _Ctype._Delfl)
   free((void *)_Ctype._Table);
  else if (_Ctype._Delfl < 0)
   delete[] (void *)_Ctype._Table;

  free((void *)_Ctype._LocaleName);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Byte);
  }

 virtual const _Elem * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
                       ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

 virtual _Elem do_narrow(_Elem _Ch, char) const
  {
  return (_Ch);
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char, char *_Dest) const
  {
                             ;
                       ;
  :: memcpy(_Dest, _First, _Last - _First);
  return (_Last);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 };


template<>
 class __declspec(dllimport) ctype<wchar_t>
 : public ctype_base
 {
 typedef ctype<wchar_t> _Myt;

public:
 typedef wchar_t _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() throw ()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);

  free((void *)_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                             ;
                       ;
  return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {0};
  wchar_t _Wc;
  return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (wchar_t)(wint_t)(0xFFFF) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {0};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<>
 class __declspec(dllimport) ctype<unsigned short>
 : public ctype_base
 {
 typedef ctype<unsigned short> _Myt;

public:
 typedef unsigned short _Elem;
 typedef _Elem char_type;

 bool is(mask _Maskval, _Elem _Ch) const
  {
  return (do_is(_Maskval, _Ch));
  }

 const _Elem * is(const _Elem *_First, const _Elem *_Last,
  mask *_Dest) const
  {
  return (do_is(_First, _Last, _Dest));
  }

 const _Elem * scan_is(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_is(_Maskval, _First, _Last));
  }

 const _Elem * scan_not(mask _Maskval, const _Elem *_First,
  const _Elem *_Last) const
  {
  return (do_scan_not(_Maskval, _First, _Last));
  }

 _Elem tolower(_Elem _Ch) const
  {
  return (do_tolower(_Ch));
  }

 const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
  {
  return (do_tolower(_First, _Last));
  }

 _Elem toupper(_Elem _Ch) const
  {
  return (do_toupper(_Ch));
  }

 const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
  {
  return (do_toupper(_First, _Last));
  }

 _Elem widen(char _Byte) const
  {
  return (do_widen(_Byte));
  }

 const char * widen(const char *_First, const char *_Last,
  _Elem *_Dest) const
  {
  return (do_widen(_First, _Last, _Dest));
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  return (do_narrow(_Ch, _Dflt));
  }

 const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
  char _Dflt, char *_Dest) const
  {
  return (do_narrow(_First, _Last, _Dflt, _Dest));
  }

                         static locale::id id;

 explicit ctype(size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
  : ctype_base(_Refs)
  {
  _Init(_Lobj);
  }

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new ctype<_Elem>(
    _Locinfo(_Ploc->c_str()));
  return (2);
  }

protected:
 virtual ~ctype() throw ()
  {
  if (_Ctype._Delfl)
   free((void *)_Ctype._Table);

  free((void *)_Ctype._LocaleName);
  }

 void _Init(const _Locinfo& _Lobj)
  {
  _Ctype = _Lobj._Getctype();
  _Cvt = _Lobj._Getcvt();
  }

 virtual bool do_is(mask _Maskval, _Elem _Ch) const
  {
  return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
  }

 virtual const _Elem * do_is(const _Elem *_First,
  const _Elem *_Last, mask *_Dest) const
  {
                             ;
                       ;
  return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
   (const wchar_t *)_Last, _Dest, &_Ctype));
  }

 virtual const _Elem * do_scan_is(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && !is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual const _Elem * do_scan_not(mask _Maskval,
  const _Elem *_First, const _Elem *_Last) const
  {
                             ;
  for (; _First != _Last && is(_Maskval, *_First); ++_First)
   ;
  return (_First);
  }

 virtual _Elem do_tolower(_Elem _Ch) const
  {
  return (_Towlower(_Ch, &_Ctype));
  }

 virtual const _Elem * do_tolower(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towlower(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 virtual _Elem do_toupper(_Elem _Ch) const
  {
  return (_Towupper(_Ch, &_Ctype));
  }

 virtual const _Elem * do_toupper(_Elem *_First,
  const _Elem *_Last) const
  {
                                            ;
  for (; _First != _Last; ++_First)
   *_First = _Towupper(*_First, &_Ctype);
  return ((const _Elem *)_First);
  }

 _Elem _Dowiden(char _Byte) const
  {
  mbstate_t _Mbst = {0};
  unsigned short _Wc;
  return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
   ? (unsigned short)(wint_t)(0xFFFF) : _Wc);
  }

 virtual _Elem do_widen(char _Byte) const
  {
  return (_Dowiden(_Byte));
  }

 virtual const char * do_widen(const char *_First,
  const char *_Last, _Elem *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Dowiden(*_First);
  return (_First);
  }

 char _Donarrow(_Elem _Ch, char _Dflt) const
  {
  char _Buf[5];
  mbstate_t _Mbst = {0};
  return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
   ? _Dflt : _Buf[0]);
  }

 virtual char do_narrow(_Elem _Ch, char _Dflt) const
  {
  return (_Donarrow(_Ch, _Dflt));
  }

 virtual const _Elem * do_narrow(const _Elem *_First,
  const _Elem *_Last, char _Dflt, char *_Dest) const
  {
                             ;
                       ;
  for (; _First != _Last; ++_First, ++_Dest)
   *_Dest = _Donarrow(*_First, _Dflt);
  return (_First);
  }

private:
 _Locinfo::_Ctypevec _Ctype;
 _Locinfo::_Cvtvec _Cvt;
 };



template<class _Elem>
 class ctype_byname
 : public ctype<_Elem>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() throw ()
  {
  }
 };


template<>
 class ctype_byname<char>
 : public ctype<char>
 {
public:
 explicit ctype_byname(const char *_Locname, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Locname), _Refs)
  {
  }

 explicit ctype_byname(const string& _Str, size_t _Refs = 0)
  : ctype<char>(_Locinfo(_Str.c_str()), _Refs)
  {
  }

protected:
 virtual ~ctype_byname() throw ()
  {
  }
 };




template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;


}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xiosbase"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\system_error"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cerrno"
#line 14 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cerrno"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\errno.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\errno.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\errno.h"



extern "C" {
#line 135 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\errno.h"
}
#line 14 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cerrno"
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\system_error"




#pragma pack(push,8)
#pragma warning(push, 3)





namespace std {


enum class errc {
 address_family_not_supported = 102,
 address_in_use = 100,
 address_not_available = 101,
 already_connected = 113,
 argument_list_too_long = 7,
 argument_out_of_domain = 33,
 bad_address = 14,
 bad_file_descriptor = 9,
 bad_message = 104,
 broken_pipe = 32,
 connection_aborted = 106,
 connection_already_in_progress = 103,
 connection_refused = 107,
 connection_reset = 108,
 cross_device_link = 18,
 destination_address_required = 109,
 device_or_resource_busy = 16,
 directory_not_empty = 41,
 executable_format_error = 8,
 file_exists = 17,
 file_too_large = 27,
 filename_too_long = 38,
 function_not_supported = 40,
 host_unreachable = 110,
 identifier_removed = 111,
 illegal_byte_sequence = 42,
 inappropriate_io_control_operation = 25,
 interrupted = 4,
 invalid_argument = 22,
 invalid_seek = 29,
 io_error = 5,
 is_a_directory = 21,
 message_size = 115,
 network_down = 116,
 network_reset = 117,
 network_unreachable = 118,
 no_buffer_space = 119,
 no_child_process = 10,
 no_link = 121,
 no_lock_available = 39,
 no_message_available = 120,
 no_message = 122,
 no_protocol_option = 123,
 no_space_on_device = 28,
 no_stream_resources = 124,
 no_such_device_or_address = 6,
 no_such_device = 19,
 no_such_file_or_directory = 2,
 no_such_process = 3,
 not_a_directory = 20,
 not_a_socket = 128,
 not_a_stream = 125,
 not_connected = 126,
 not_enough_memory = 12,
 not_supported = 129,
 operation_canceled = 105,
 operation_in_progress = 112,
 operation_not_permitted = 1,
 operation_not_supported = 130,
 operation_would_block = 140,
 owner_dead = 133,
 permission_denied = 13,
 protocol_error = 134,
 protocol_not_supported = 135,
 read_only_file_system = 30,
 resource_deadlock_would_occur = 36,
 resource_unavailable_try_again = 11,
 result_out_of_range = 34,
 state_not_recoverable = 127,
 stream_timeout = 137,
 text_file_busy = 139,
 timed_out = 138,
 too_many_files_open_in_system = 23,
 too_many_files_open = 24,
 too_many_links = 31,
 too_many_symbolic_link_levels = 114,
 value_too_large = 132,
 wrong_protocol_type = 136
 };

typedef errc generic_errno;



enum class io_errc {
 stream = 1
 };

typedef io_errc _Io_errc;


template<class _Enum>
 struct is_error_code_enum
  : public false_type
 {
 };

template<>
 struct is_error_code_enum<_Io_errc>
  : public true_type
 {
 };


template<class _Enum>
 struct is_error_condition_enum
  : public false_type
 {
 };

template<>
 struct is_error_condition_enum<generic_errno>
  : public true_type
 {
 };

class error_code;
class error_condition;
error_code make_error_code(generic_errno) throw ();
error_code make_error_code(_Io_errc) throw ();
error_condition make_error_condition(generic_errno) throw ();
error_condition make_error_condition(_Io_errc) throw ();


class error_category;

const error_category& generic_category() throw ();
const error_category& iostream_category() throw ();
const error_category& system_category() throw ();

class error_category
 {
public:
 error_category()
  {
  }

 virtual ~error_category() throw ()
  {
  }

 virtual const char *name() const throw () = 0;

 virtual string message(int _Errval) const = 0;

 virtual error_condition
  default_error_condition(int _Errval) const throw ();

 virtual bool equivalent(int _Errval,
  const error_condition& _Cond) const throw ();

 virtual bool equivalent(const error_code& _Code,
  int _Errval) const throw ();

 bool operator==(const error_category& _Right) const throw ()
  {
  return (this == &_Right);
  }

 bool operator!=(const error_category& _Right) const throw ()
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_category& _Right) const throw ()
  {
  return (this < &_Right);
  }

 error_category(const error_category&) = delete;
 error_category& operator=(const error_category&) = delete;
 };


class error_code
 {
public:
 typedef error_code _Myt;

 error_code()
  : _Myval(0),
   _Mycat(&system_category())
  {
  }

 error_code(int _Val, const error_category& _Cat)
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_code_enum<_Enum>::value,
   void>::type>
  error_code(_Enum _Errcode)
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_code(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat)
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_code_enum<_Enum>::value,
   error_code>::type& operator=(_Enum _Errcode)
  {
  *this = make_error_code(_Errcode);
  return (*this);
  }

 void clear() throw ()
  {
  _Myval = 0;
  _Mycat = &system_category();
  }

 int value() const
  {
  return (_Myval);
  }

 const error_category& category() const
  {
  return (*_Mycat);
  }

 error_condition default_error_condition() const;

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const throw ()
  {
  return (value() != 0);
  }

 bool operator==(const error_code& _Right) const throw ()
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_code& _Right) const throw ()
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_code& _Right) const throw ()
  {
  return (category() < _Right.category()
   || (category() == _Right.category()
    && value() < _Right.value()));
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


class error_condition
 {
public:
 typedef error_condition _Myt;

 error_condition() throw ()
  : _Myval(0),
   _Mycat(&generic_category())
  {
  }

 error_condition(int _Val, const error_category& _Cat) throw ()
  : _Myval(_Val), _Mycat(&_Cat)
  {
  }

 template<class _Enum,
  class = typename enable_if<is_error_condition_enum<_Enum>::value,
   void>::type>
  error_condition(_Enum _Errcode) throw ()
  : _Myval(0), _Mycat(0)
  {
  *this = make_error_condition(_Errcode);
  }

 void assign(int _Val, const error_category& _Cat) throw ()
  {
  _Myval = _Val;
  _Mycat = &_Cat;
  }

 template<class _Enum>
  typename enable_if<is_error_condition_enum<_Enum>::value,
   error_condition>::type& operator=(_Enum _Errcode) throw ()
  {
  *this = make_error_condition(_Errcode);
  return (*this);
  }

 void clear() throw ()
  {
  _Myval = 0;
  _Mycat = &generic_category();
  }

 int value() const throw ()
  {
  return (_Myval);
  }

 const error_category& category() const throw ()
  {
  return (*_Mycat);
  }

 string message() const
  {
  return (category().message(value()));
  }

 explicit operator bool() const throw ()
  {
  return (value() != 0);
  }

 bool operator==(const error_condition& _Right) const throw ()
  {
  return (category() == _Right.category()
   && value() == _Right.value());
  }

 bool operator!=(const error_condition& _Right) const throw ()
  {
  return (!(*this == _Right));
  }

 bool operator<(const error_condition& _Right) const throw ()
  {
  return (category() < _Right.category()
   || (category() == _Right.category()
    && value() < _Right.value()));
  }

private:
 int _Myval;
 const error_category *_Mycat;
 };


inline error_condition
 error_category::default_error_condition(int _Errval) const throw ()
 {
 return (error_condition(_Errval, *this));
 }

inline bool
 error_category::equivalent(int _Errval,
  const error_condition& _Cond) const throw ()
 {
 return (default_error_condition(_Errval) == _Cond);
 }

inline bool
 error_category::equivalent(const error_code& _Code,
  int _Errval) const throw ()
 {
 return (*this == _Code.category() && _Code.value() == _Errval);
 }


inline error_condition error_code::default_error_condition() const
 {
 return (category().default_error_condition(value()));
 }


inline bool operator==(
 const error_code& _Left,
 const error_condition& _Right) throw ()
 {
 return (_Left.category().equivalent(_Left.value(), _Right)
  || _Right.category().equivalent(_Left, _Right.value()));
 }

inline bool operator==(
 const error_condition& _Left,
 const error_code& _Right) throw ()
 {
 return (_Right.category().equivalent(_Right.value(), _Left)
  || _Left.category().equivalent(_Right, _Left.value()));
 }


inline bool operator!=(
 const error_code& _Left,
 const error_condition& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

inline bool operator!=(
 const error_condition& _Left,
 const error_code& _Right) throw ()
 {
 return (!(_Left == _Right));
 }


inline error_code make_error_code(generic_errno _Errno) throw ()
 {
 return (error_code((int)_Errno, generic_category()));
 }

inline error_code make_error_code(_Io_errc _Errno) throw ()
 {
 return (error_code((int)_Errno, iostream_category()));
 }


inline error_condition make_error_condition(generic_errno _Errno) throw ()
 {
 return (error_condition((int)_Errno, generic_category()));
 }

inline error_condition make_error_condition(_Io_errc _Errno) throw ()
 {
 return (error_condition((int)_Errno, iostream_category()));
 }


template<>
 struct hash<error_code>
  : public unary_function<error_code, size_t>
 {
 typedef error_code _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (hash<int>()(_Keyval.value()));
  }
 };


class _System_error
 : public runtime_error
 {
private:
 static string _Makestr(error_code _Errcode, string _Message)
  {
  if (!_Message.empty())
   _Message.append(": ");
  _Message.append(_Errcode.message());
  return (_Message);
  }

protected:
 _System_error(error_code _Errcode, const string& _Message)
  : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)
  {
  }

 error_code _Mycode;
 };

class system_error
 : public _System_error
 {
private:
 typedef _System_error _Mybase;

public:
 explicit system_error(error_code _Errcode)
  : _Mybase(_Errcode, "")
  {
  }

 system_error(error_code _Errcode, const string& _Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(error_code _Errcode, const char *_Message)
  : _Mybase(_Errcode, _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat)
  : _Mybase(error_code(_Errval, _Errcat), "")
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const string& _Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 system_error(int _Errval, const error_category& _Errcat,
  const char *_Message)
  : _Mybase(error_code(_Errval, _Errcat), _Message)
  {
  }

 const error_code& code() const throw ()
  {
  return (_Mycode);
  }
#line 543 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\system_error"
 };

__declspec(dllimport) const char *__cdecl _Syserror_map(int);
__declspec(dllimport) const char *__cdecl _Winerror_map(int);


class _Generic_error_category
 : public error_category
 {
public:
 _Generic_error_category()
  {
  }

 virtual const char *name() const throw ()
  {
  return ("generic");
  }

 virtual string message(int _Errcode) const
  {
  const char *_Name = _Syserror_map(_Errcode);
  return (string(_Name != 0 ? _Name : "unknown error"));
  }
 };


class _Iostream_error_category
 : public _Generic_error_category
 {
public:
 _Iostream_error_category()
  {
  }

 virtual const char *name() const throw ()
  {
  return ("iostream");
  }

 virtual string message(int _Errcode) const
  {
  if (_Errcode == (int)io_errc::stream)
   return ("iostream stream error");
  else
   return (_Generic_error_category::message(_Errcode));
  }
 };


class _System_error_category
 : public _Generic_error_category
 {
public:
 _System_error_category()
  {
  }

 virtual const char *name() const throw ()
  {
  return ("system");
  }

 virtual string message(int _Errcode) const
  {
  const char *_Name = _Winerror_map(_Errcode);
  return (string(_Name != 0 ? _Name : "unknown error"));
  }

 virtual error_condition
  default_error_condition(int _Errval) const throw ()
  {
  if (_Syserror_map(_Errval))
   return (error_condition(_Errval, generic_category()));
  else
   return (error_condition(_Errval, system_category()));
  }
 };

template<class _Cat>
 struct _Error_objects
 {
 _Error_objects()
  {
  }

 static _Generic_error_category _Generic_object;
 static _Iostream_error_category _Iostream_object;
 static _System_error_category _System_object;
 };

template<class _Cat>
 _Generic_error_category _Error_objects<_Cat>::_Generic_object;
template<class _Cat>
 _Iostream_error_category _Error_objects<_Cat>::_Iostream_object;
template<class _Cat>
 _System_error_category _Error_objects<_Cat>::_System_object;

inline const error_category& generic_category() throw ()
 {
 return (_Error_objects<int>::_Generic_object);
 }

inline const error_category& iostream_category() throw ()
 {
 return (_Error_objects<int>::_Iostream_object);
 }

inline const error_category& system_category() throw ()
 {
 return (_Error_objects<int>::_System_object);
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xiosbase"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\share.h"
#line 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xiosbase"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4412)



namespace std {
#line 47 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xiosbase"
template<class _Dummy>
 class _Iosb
 {
public:
 enum _Dummy_enum {_Dummy_enum_val = 1};
 enum _Fmtflags
  {
  _Fmtmask = 0xffff, _Fmtzero = 0};

 static const _Fmtflags skipws = (_Fmtflags)0x0001;
 static const _Fmtflags unitbuf = (_Fmtflags)0x0002;
 static const _Fmtflags uppercase = (_Fmtflags)0x0004;
 static const _Fmtflags showbase = (_Fmtflags)0x0008;
 static const _Fmtflags showpoint = (_Fmtflags)0x0010;
 static const _Fmtflags showpos = (_Fmtflags)0x0020;
 static const _Fmtflags left = (_Fmtflags)0x0040;
 static const _Fmtflags right = (_Fmtflags)0x0080;
 static const _Fmtflags internal = (_Fmtflags)0x0100;
 static const _Fmtflags dec = (_Fmtflags)0x0200;
 static const _Fmtflags oct = (_Fmtflags)0x0400;
 static const _Fmtflags hex = (_Fmtflags)0x0800;
 static const _Fmtflags scientific = (_Fmtflags)0x1000;
 static const _Fmtflags fixed = (_Fmtflags)0x2000;

 static const _Fmtflags hexfloat =
  (_Fmtflags)0x3000;

 static const _Fmtflags boolalpha = (_Fmtflags)0x4000;
 static const _Fmtflags _Stdio = (_Fmtflags)0x8000;
 static const _Fmtflags adjustfield = (_Fmtflags)(0x0040
  | 0x0080 | 0x0100);
 static const _Fmtflags basefield = (_Fmtflags)(0x0200
  | 0x0400 | 0x0800);
 static const _Fmtflags floatfield = (_Fmtflags)(0x1000
  | 0x2000);

 enum _Iostate
  {
  _Statmask = 0x17};

 static const _Iostate goodbit = (_Iostate)0x0;
 static const _Iostate eofbit = (_Iostate)0x1;
 static const _Iostate failbit = (_Iostate)0x2;
 static const _Iostate badbit = (_Iostate)0x4;
 static const _Iostate _Hardfail = (_Iostate)0x10;

 enum _Openmode
  {
  _Openmask = 0xff};

 static const _Openmode in = (_Openmode)0x01;
 static const _Openmode out = (_Openmode)0x02;
 static const _Openmode ate = (_Openmode)0x04;
 static const _Openmode app = (_Openmode)0x08;
 static const _Openmode trunc = (_Openmode)0x10;
 static const _Openmode _Nocreate = (_Openmode)0x40;
 static const _Openmode _Noreplace = (_Openmode)0x80;
 static const _Openmode binary = (_Openmode)0x20;

 enum _Seekdir
  {
  _Seekmask = 0x3};

 static const _Seekdir beg = (_Seekdir)0;
 static const _Seekdir cur = (_Seekdir)1;
 static const _Seekdir end = (_Seekdir)2;

 enum
  {
  _Openprot = 0x40};
 };

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags
  _Iosb<_Dummy>::hexfloat;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::_Hardfail;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
 const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;


class __declspec(dllimport) ios_base
 : public _Iosb<int>
 {
public:
 typedef int fmtflags;
 typedef int iostate;
 typedef int openmode;
 typedef int seekdir;

 typedef ::std:: streamoff streamoff;
 typedef ::std:: streampos streampos;

 enum event
  {
  erase_event, imbue_event, copyfmt_event};

 typedef void (__cdecl *event_callback)(event, ios_base&, int);
 typedef unsigned int io_state, open_mode, seek_dir;


 class failure

  : public system_error
  {
 public:
  explicit failure(const string &_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }

  explicit failure(const char *_Message,
   const error_code& _Errcode = make_error_code(io_errc::stream))
   : system_error(_Errcode, _Message)
   {
   }
#line 246 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xiosbase"
  };


 class __declspec(dllimport) Init
  {
 public:
                     Init()
   {
   _Init_ctor(this);
   }

                     ~Init() throw ()
   {
   _Init_dtor(this);
   }

 private:
  static void __cdecl _Init_ctor(Init *);
  static void __cdecl _Init_dtor(Init *);

                          static int _Init_cnt;

  static int& __cdecl _Init_cnt_func();
  };

 explicit operator bool() const
  {
  return (!fail());
  }

 bool operator!() const
  {
  return (fail());
  }

 void clear(iostate _State, bool _Reraise)
  {
  _Mystate = (iostate)(_State & _Statmask);
  if ((_Mystate & _Except) == 0)
   ;
  else if (_Reraise)
   throw;
  else if (_Mystate & _Except & badbit)
   throw failure("ios_base::badbit set");
  else if (_Mystate & _Except & failbit)
   throw failure("ios_base::failbit set");
  else
   throw failure("ios_base::eofbit set");
  }

 void clear(iostate _State = goodbit)
  {
  clear(_State, false);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 iostate rdstate() const
  {
  return (_Mystate);
  }

 void setstate(iostate _State, bool _Exreraise)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
  }

 void setstate(iostate _State)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), false);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 bool good() const
  {
  return (rdstate() == goodbit);
  }

 bool eof() const
  {
  return ((int)rdstate() & (int)eofbit);
  }

 bool fail() const
  {
  return (((int)rdstate()
   & ((int)badbit | (int)failbit)) != 0);
  }

 bool bad() const
  {
  return (((int)rdstate() & (int)badbit) != 0);
  }

 iostate exceptions() const
  {
  return (_Except);
  }

 void exceptions(iostate _Newexcept)
  {
  _Except = (iostate)((int)_Newexcept & (int)_Statmask);
  clear(_Mystate);
  }

 void exceptions(io_state _State)
  {
  exceptions((iostate)_State);
  }

 fmtflags flags() const
  {
  return (_Fmtfl);
  }

 fmtflags flags(fmtflags _Newfmtflags)
  {
  fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)((int)_Fmtfl
   | ((int)_Newfmtflags & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask)
  {
  ios_base::fmtflags _Oldfmtflags = _Fmtfl;
  _Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
   | ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
  return (_Oldfmtflags);
  }

 void unsetf(fmtflags _Mask)
  {
  _Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
  }

 streamsize precision() const
  {
  return (_Prec);
  }

 streamsize precision(streamsize _Newprecision)
  {
  streamsize _Oldprecision = _Prec;
  _Prec = _Newprecision;
  return (_Oldprecision);
  }

 streamsize width() const
  {
  return (_Wide);
  }

 streamsize width(streamsize _Newwidth)
  {
  streamsize _Oldwidth = _Wide;
  _Wide = _Newwidth;
  return (_Oldwidth);
  }

 locale getloc() const
  {
  return (*_Ploc);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = *_Ploc;
  *_Ploc = _Loc;
  _Callfns(imbue_event);
  return (_Oldlocale);
  }

 static int __cdecl xalloc()
  {
  { ::std:: _Lockit _Lock(2);
   return (_Index++);
  }
  }

 long& iword(int _Idx)
  {
  return (_Findarr(_Idx)._Lo);
  }

 void *& pword(int _Idx)
  {
  return (_Findarr(_Idx)._Vp);
  }

 void register_callback(event_callback _Pfn,
  int _Idx)
  {
  _Calls = new _Fnarray(_Idx, _Pfn, _Calls);
  }

 ios_base& copyfmt(const ios_base& _Other)
  {
  if (this != &_Other)
   {
   _Tidy();
   *_Ploc = *_Other._Ploc;
   _Fmtfl = _Other._Fmtfl;
   _Prec = _Other._Prec;
   _Wide = _Other._Wide;
   _Iosarray *_Ptr = _Other._Arr;

   for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
    if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
     {
     iword(_Ptr->_Index) = _Ptr->_Lo;
     pword(_Ptr->_Index) = _Ptr->_Vp;
     }

   for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
    _Pfa = _Pfa->_Next)
    register_callback(_Pfa->_Pfn, _Pfa->_Index);

   _Callfns(copyfmt_event);
   exceptions(_Other._Except);
   }
  return (*this);
  }

 static bool __cdecl sync_with_stdio(bool _Newsync = true)
  {
  { ::std:: _Lockit _Lock(2);
   const bool _Oldsync = _Sync;
   _Sync = _Newsync;
   return (_Oldsync);
  }
  }

 void swap(ios_base& _Right)
  {
  if (this != &_Right)
   {
   ::std:: swap(_Mystate, _Right._Mystate);
   ::std:: swap(_Except, _Right._Except);
   ::std:: swap(_Fmtfl, _Right._Fmtfl);
   ::std:: swap(_Prec, _Right._Prec);
   ::std:: swap(_Wide, _Right._Wide);

   ::std:: swap(_Arr, _Right._Arr);
   ::std:: swap(_Calls, _Right._Calls);
   ::std:: swap(_Ploc, _Right._Ploc);
   }
  }

 virtual ~ios_base() throw ()
  {
  _Ios_base_dtor(this);
  }

 static void __cdecl
  _Addstd(ios_base *);

 size_t _Stdstr;

protected:
                    ios_base()
  {
  }

 void _Init()
  {
  _Ploc = 0;
  _Stdstr = 0;
  _Except = goodbit;
  _Fmtfl = (fmtflags)(skipws | dec);
  _Prec = 6;
  _Wide = 0;
  _Arr = 0;
  _Calls = 0;
  clear(goodbit);
  _Ploc = new locale;
  }

private:

 struct _Iosarray
  {
 public:
                     _Iosarray(int _Idx, _Iosarray *_Link)
   : _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
   {
   }

  _Iosarray *_Next;
  int _Index;
  long _Lo;
  void *_Vp;
  };


 struct _Fnarray
  {
                     _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
   : _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
   {
   }

  _Fnarray *_Next;
  int _Index;
  event_callback _Pfn;
  };

 void _Callfns(event _Ev)
  {
  for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
   (*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
  }

 _Iosarray& _Findarr(int _Idx)
  {
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
   if (_Ptr1->_Index == _Idx)
    return (*_Ptr1);
   else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
    _Ptr2 = _Ptr1;

  if (_Ptr2 != 0)
   {
   _Ptr2->_Index = _Idx;
   return (*_Ptr2);
   }

  _Arr = new _Iosarray(_Idx, _Arr);
  return (*_Arr);
  }

 void _Tidy()
  {
  _Callfns(erase_event);
  _Iosarray *_Ptr1, *_Ptr2;

  for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
   {
   _Ptr2 = _Ptr1->_Next;
   delete (_Ptr1);
   }
  _Arr = 0;

  _Fnarray *_Pfa1, *_Pfa2;
  for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
   {
   _Pfa2 = _Pfa1->_Next;
   delete (_Pfa1);
   }
  _Calls = 0;
  }

 iostate _Mystate;
 iostate _Except;
 fmtflags _Fmtfl;
 streamsize _Prec;
 streamsize _Wide;
 _Iosarray *_Arr;
 _Fnarray *_Calls;
 locale *_Ploc;

                         static int _Index;
                         static bool _Sync;

 static void __cdecl
  _Ios_base_dtor(ios_base *);

public:
 ios_base(const ios_base&) = delete;
 ios_base& operator=(const ios_base&) = delete;
 };





}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\streambuf"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4251)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_streambuf
 {
 typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
                    basic_streambuf()
  : _Plocale(new locale)
  {
  _Init();
  }

                    basic_streambuf(_Uninitialized)
  {
  }

                    basic_streambuf(const _Myt& _Right)
  : _Plocale(new locale(_Right.getloc()))
  {
  _Init();
  setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
  setg(_Right.eback(), _Right.gptr(), _Right.egptr());
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   pubimbue(_Right.getloc());
   }
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Elem *_Pfirst = pbase();
   _Elem *_Pnext = pptr();
   _Elem *_Pend = epptr();
   _Elem *_Gfirst = eback();
   _Elem *_Gnext = gptr();
   _Elem *_Gend = egptr();

   setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
   _Right.setp(_Pfirst, _Pnext, _Pend);

   setg(_Right.eback(), _Right.gptr(), _Right.egptr());
   _Right.setg(_Gfirst, _Gnext, _Gend);

   ::std:: swap(_Plocale, _Right._Plocale);
   }
  }

public:
 typedef _Elem char_type;
 typedef _Traits traits_type;

 virtual ~basic_streambuf() throw ()
  {
  delete (_Plocale);
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 pos_type pubseekoff(off_type _Off,
  ios_base::seekdir _Way,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekoff(_Off, _Way, _Mode));
  }

 pos_type pubseekoff(off_type _Off,
  ios_base::seek_dir _Way,
  ios_base::open_mode _Mode)
  {
  return (pubseekoff(_Off, (ios_base::seekdir)_Way,
   (ios_base::openmode)_Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::openmode _Mode = ios_base::in | ios_base::out)
  {
  return (seekpos(_Pos, _Mode));
  }

 pos_type pubseekpos(pos_type _Pos,
  ios_base::open_mode _Mode)
  {
  return (seekpos(_Pos, (ios_base::openmode)_Mode));
  }

 _Myt * pubsetbuf(_Elem *_Buffer,
  streamsize _Count)
  {
  return (setbuf(_Buffer, _Count));
  }

 locale pubimbue(const locale &_Newlocale)
  {
  locale _Oldlocale = *_Plocale;
  imbue(_Newlocale);
  *_Plocale = _Newlocale;
  return (_Oldlocale);
  }

 locale getloc() const
  {
  return (*_Plocale);
  }

 streamsize in_avail()
  {
  streamsize _Res = _Gnavail();
  return (0 < _Res ? _Res : showmanyc());
  }

 int pubsync()
  {
  return (sync());
  }

 int_type sbumpc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*_Gninc()) : uflow());
  }

 int_type sgetc()
  {
  return (0 < _Gnavail()
   ? _Traits::to_int_type(*gptr()) : underflow());
  }

 streamsize sgetn(_Elem *_Ptr,
  streamsize _Count)
  {
  return (xsgetn(_Ptr, _Count));
  }

 int_type snextc()
  {
  return (1 < _Gnavail()
   ? _Traits::to_int_type(*_Gnpreinc())
   : _Traits::eq_int_type(_Traits::eof(), sbumpc())
    ? _Traits::eof() : sgetc());
  }

 int_type sputbackc(_Elem _Ch)
  {
  return (gptr() != 0 && eback() < gptr()
   && _Traits::eq(_Ch, gptr()[-1])
   ? _Traits::to_int_type(*_Gndec())
   : pbackfail(_Traits::to_int_type(_Ch)));
  }

 void stossc()
  {
  if (0 < _Gnavail())
   _Gninc();
  else
   uflow();
  }

 int_type sungetc()
  {
  return (gptr() != 0 && eback() < gptr()
   ? _Traits::to_int_type(*_Gndec()) : pbackfail());
  }

 int_type sputc(_Elem _Ch)
  {
  return (0 < _Pnavail()
   ? _Traits::to_int_type(*_Pninc() = _Ch)
   : overflow(_Traits::to_int_type(_Ch)));
  }

 streamsize sputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  return (xsputn(_Ptr, _Count));
  }

 virtual void _Lock()
  {
  }

 virtual void _Unlock()
  {
  }

protected:
 _Elem * eback() const
  {
  return (*_IGfirst);
  }

 _Elem * gptr() const
  {
  return (*_IGnext);
  }

 _Elem * pbase() const
  {
  return (*_IPfirst);
  }

 _Elem * pptr() const
  {
  return (*_IPnext);
  }

 _Elem * egptr() const
  {
  return (*_IGnext + *_IGcount);
  }

 void gbump(int _Off)
  {
  *_IGcount -= _Off;
  *_IGnext += _Off;
  }

 void setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IGfirst = _First;
  *_IGnext = _Next;
  *_IGcount = (int)(_Last - _Next);
  }

 _Elem * epptr() const
  {
  return (*_IPnext + *_IPcount);
  }

 _Elem * _Gndec()
  {
  ++*_IGcount;
  return (--*_IGnext);
  }

 _Elem * _Gninc()
  {
  --*_IGcount;
  return ((*_IGnext)++);
  }

 _Elem * _Gnpreinc()
  {
  --*_IGcount;
  return (++(*_IGnext));
  }

 streamsize _Gnavail() const
  {
  return (*_IGnext != 0 ? *_IGcount : 0);
  }

 void pbump(int _Off)
  {
  *_IPcount -= _Off;
  *_IPnext += _Off;
  }

 void setp(_Elem *_First, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _First;
  *_IPcount = (int)(_Last - _First);
  }

 void setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
  {
  *_IPfirst = _First;
  *_IPnext = _Next;
  *_IPcount = (int)(_Last - _Next);
  }

 _Elem * _Pninc()
  {
  --*_IPcount;
  return ((*_IPnext)++);
  }

 streamsize _Pnavail() const
  {
  return (*_IPnext != 0 ? *_IPcount : 0);
  }

 void _Init()
  {
  _IGfirst = &_Gfirst;
  _IPfirst = &_Pfirst;
  _IGnext = &_Gnext;
  _IPnext = &_Pnext;
  _IGcount = &_Gcount;
  _IPcount = &_Pcount;
  setp(0, 0);
  setg(0, 0, 0);
  }

 void _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
  _Elem **_Pf, _Elem **_Pn, int *_Pc)
  {
  _IGfirst = _Gf;
  _IPfirst = _Pf;
  _IGnext = _Gn;
  _IPnext = _Pn;
  _IGcount = _Gc;
  _IPcount = _Pc;
  }

 virtual int_type overflow(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual int_type pbackfail(int_type = _Traits::eof())
  {
  return (_Traits::eof());
  }

 virtual streamsize showmanyc()
  {
  return (0);
  }

 virtual int_type underflow()
  {
  return (_Traits::eof());
  }

 virtual int_type uflow()
  {
  return (_Traits::eq_int_type(_Traits::eof(), underflow())
   ? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
  }

 virtual streamsize xsgetn(_Elem * _Ptr,
  streamsize _Count)
  {
  int_type _Meta;
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Gnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(_Ptr, gptr(), (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    gbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
    break;
   else
    {
    *_Ptr++ = _Traits::to_char_type(_Meta);
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual streamsize xsputn(const _Elem *_Ptr,
  streamsize _Count)
  {
  streamsize _Size, _Copied;

  for (_Copied = 0; 0 < _Count; )
   if (0 < (_Size = _Pnavail()))
    {
    if (_Count < _Size)
     _Size = _Count;
    _Traits::copy(pptr(), _Ptr, (size_t)_Size);
    _Ptr += _Size;
    _Copied += _Size;
    _Count -= _Size;
    pbump((int)_Size);
    }
   else if (_Traits::eq_int_type(_Traits::eof(),
    overflow(_Traits::to_int_type(*_Ptr))))
    break;
   else
    {
    ++_Ptr;
    ++_Copied;
    --_Count;
    }

  return (_Copied);
  }

 virtual pos_type seekoff(off_type,
  ios_base::seekdir,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual pos_type seekpos(pos_type,
  ios_base::openmode = ios_base::in | ios_base::out)
  {
  return (streampos(_BADOFF));
  }

 virtual _Myt * setbuf(_Elem *, streamsize)
  {
  return (this);
  }

 virtual int sync()
  {
  return (0);
  }

 virtual void imbue(const locale&)
  {
  }

private:
 _Elem *_Gfirst;
 _Elem *_Pfirst;
 _Elem **_IGfirst;
 _Elem **_IPfirst;
 _Elem *_Gnext;
 _Elem *_Pnext;
 _Elem **_IGnext;
 _Elem **_IPnext;

 int _Gcount;
 int _Pcount;
 int *_IGcount;
 int *_IPcount;

protected:
 locale *_Plocale;
 };




template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;
#line 478 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\streambuf"
template<class _Elem,
 class _Traits>
 class istreambuf_iterator
  : public iterator<input_iterator_tag,
   _Elem, typename _Traits::off_type, const _Elem *, _Elem>
 {
 typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef typename traits_type::int_type int_type;
 typedef const _Elem *pointer;

 istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
  : _Strbuf(_Sb), _Got(_Sb == 0)
  {
  }

 istreambuf_iterator(istream_type& _Istr) throw ()
  : _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
  {
  }

 _Elem operator*() const
  {
  if (!_Got)
   _Peek();






  return (_Val);
  }

 const _Elem *operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {





  _Inc();
  return (*this);
  }

 _Myt operator++(int)
  {
  if (!_Got)
   _Peek();
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool equal(const _Myt& _Right) const
  {
  if (!_Got)
   _Peek();
  if (!_Right._Got)
   _Right._Peek();
  return ((_Strbuf == 0 && _Right._Strbuf == 0)
   || (_Strbuf != 0 && _Right._Strbuf != 0));
  }

private:
 void _Inc()
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Strbuf->sbumpc()))
   _Strbuf = 0, _Got = true;
  else
   _Got = false;
  }

 _Elem _Peek() const
  {
  int_type _Meta;
  if (_Strbuf == 0
   || traits_type::eq_int_type(traits_type::eof(),
    _Meta = _Strbuf->sgetc()))
   _Strbuf = 0;
  else
   _Val = traits_type::to_char_type(_Meta);
  _Got = true;
  return (_Val);
  }

 mutable streambuf_type *_Strbuf;
 mutable bool _Got;
 mutable _Elem _Val;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };


template<class _Elem,
 class _Traits> inline
 bool operator==(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (_Left.equal(_Right));
 }

template<class _Elem,
 class _Traits> inline
 bool operator!=(
  const istreambuf_iterator<_Elem, _Traits>& _Left,
  const istreambuf_iterator<_Elem, _Traits>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Elem,
 class _Traits>
 class ostreambuf_iterator
  : public _Outit
 {
 typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_streambuf<_Elem, _Traits> streambuf_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostreambuf_iterator(streambuf_type *_Sb) throw ()
  : _Failed(false), _Strbuf(_Sb)
  {
  }

 ostreambuf_iterator(ostream_type& _Ostr) throw ()
  : _Failed(false), _Strbuf(_Ostr.rdbuf())
  {
  }

 _Myt& operator=(_Elem _Right)
  {
  if (_Strbuf == 0
   || traits_type::eq_int_type(_Traits::eof(),
    _Strbuf->sputc(_Right)))
   _Failed = true;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

 bool failed() const throw ()
  {
  return (_Failed);
  }

private:
 bool _Failed;
 streambuf_type *_Strbuf;
 };

template<class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
  : public true_type
 {
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4275)




extern "C" {


extern __declspec(dllimport) float __cdecl _Stofx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
                                  char **,
 long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) __int64 __cdecl _Stollx(const char *,
                                  char **,
 int, int *);
extern __declspec(dllimport) unsigned __int64 __cdecl _Stoullx(const char *,
                                  char **,
 int, int *);


}


namespace std {

template<class _Elem> inline
 size_t _Find_elem(_Elem *_Base, _Elem _Ch)
 {
 _Elem *_Ptr = _Base;
 for (; *_Ptr != (_Elem)0 && *_Ptr != _Ch; ++_Ptr)
  ;
 return ((size_t)(_Ptr - _Base));
 }

inline wchar_t *_Maklocwcs(const wchar_t *_Ptr)
 {
 size_t _Count = :: wcslen(_Ptr) + 1;
 wchar_t *_Ptrdest = new wchar_t[_Count];
 :: wmemcpy(_Ptrdest, _Ptr, _Count);
 return (_Ptrdest);
 }


template<class _Elem>
 class numpunct
  : public locale::facet
 {
public:
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  string_type;
 typedef _Elem char_type;

                         __declspec(dllimport) static locale::id id;

 _Elem decimal_point() const
  {
  return (do_decimal_point());
  }

 _Elem thousands_sep() const
  {
  return (do_thousands_sep());
  }

 string grouping() const
  {
  return (do_grouping());
  }

 string_type falsename() const
  {
  return (do_falsename());
  }

 string_type truename() const
  {
  return (do_truename());
  }

 explicit numpunct(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
   if (_Kseparator == 0)
    _Kseparator =
     _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
  }
  }

 numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  _Init(_Lobj, _Isdef);
  }

 static size_t _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new numpunct<_Elem>(
    _Locinfo(_Ploc->c_str()), 0, true);
  return (4);
  }

protected:
 virtual ~numpunct() throw ()
  {
  _Tidy();
  }

 numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj(_Locname);
   _Init(_Lobj, _Isdef);
  }
  }

 template<class _Elem2>
  void _Getvals(_Elem2, const lconv *_Ptr, _Locinfo::_Cvtvec _Cvt)
  {
  _Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem2 *)0, _Cvt);
  _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], (_Elem2 *)0, _Cvt);
  }

 template<>
  void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)
  {
  _Dp = (_Elem)_Ptr->_W_decimal_point[0];
  _Kseparator = (_Elem)_Ptr->_W_thousands_sep[0];
  }

 void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
  {
  const lconv *_Ptr = _Lobj._Getlconv();
  _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();

  _Grouping = 0;
  _Falsename = 0;
  _Truename = 0;

  try {
  _Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());

  _Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Cvt);
  _Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Cvt);
  } catch (...) {
  _Tidy();
  throw;
  }

  if (_Isdef)
   {

   _Dp = _Maklocchr('.', (_Elem *)0, _Cvt);
   _Kseparator = _Maklocchr(',', (_Elem *)0, _Cvt);
   }
  else
   _Getvals((_Elem)0, _Ptr, _Cvt);
  }

 virtual _Elem do_decimal_point() const
  {
  return (_Dp);
  }

 virtual _Elem do_thousands_sep() const
  {
  return (_Kseparator);
  }

 virtual string do_grouping() const
  {
  return (string(_Grouping));
  }

 virtual string_type do_falsename() const
  {
  return (string_type(_Falsename));
  }

 virtual string_type do_truename() const
  {
  return (string_type(_Truename));
  }

private:
 void _Tidy()
  {
  delete[] ((void *)_Grouping);
  delete[] ((void *)_Falsename);
  delete[] ((void *)_Truename);
  }

 const char *_Grouping;
 _Elem _Dp;
 _Elem _Kseparator;
 const _Elem *_Falsename;
 const _Elem *_Truename;
 };


template<class _Elem>
 class numpunct_byname
  : public numpunct<_Elem>
 {
public:
 explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
  : numpunct<_Elem>(_Locname, _Refs)
  {
  }

 explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
  : numpunct<_Elem>(_Str.c_str(), _Refs)
  {
  }

protected:
 virtual ~numpunct_byname() throw ()
  {
  }
 };


template<class _Elem>
                         locale::id numpunct<_Elem>::id;


template<class _Elem,
 class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_get
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_get<_Elem, _InIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_get() throw ()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_get(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _InIt iter_type;

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }


 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

 _InIt get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
  return (do_get(_First, _Last, _Iosbase, _State, _Val));
  }

protected:
 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   _Bool& _Val) const
  {
                             ;
  int _Ans = -1;

  if (_Iosbase.flags() & ios_base::boolalpha)
   {
   typedef typename _Mystr::size_type _Mystrsize;
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str((_Mystrsize)1, (char_type)0);
   _Str += _Punct_fac.falsename();
   _Str += (char_type)0;
   _Str += _Punct_fac.truename();
   _Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
   }
  else
   {
   char _Ac[32], *_Ep;
   int _Errno = 0;
   const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
    _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
     _Iosbase.getloc()), &_Errno);
   if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
    _Ans = _Ulo;
   }

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ans < 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans != 0;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned short& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = (unsigned short)(_Ac[0] == '-'
    ? 0 -_Ans : _Ans);
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned int& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
   _Iosbase.getloc());
  char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;
  const unsigned long _Ans =
   :: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
   _State |= ios_base::failbit;
  else
   _Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const long _Ans = :: _Stolx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned long& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   __int64& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const __int64 _Ans = :: _Stollx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   unsigned __int64& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;
  const unsigned __int64 _Ans = :: _Stoullx(_Ac, &_Ep,
   _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
    _Iosbase.getloc()), &_Errno);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }


 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   float& _Val) const
  {
                             ;
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  float _Ans = :: _Stofx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpf(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   double& _Val) const
  {
                             ;
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  double _Ans = :: _Stodx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexp(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   long double& _Val) const
  {
                             ;
  char _Ac[8 + 36 + 16], *_Ep;
  int _Errno = 0;
  int _Hexexp = 0;
  long double _Ans = :: _Stoldx(_Ac, &_Ep,
   _Getffld(_Ac, _First, _Last,
    _Iosbase, &_Hexexp), &_Errno);

  if (_Hexexp != 0)
   _Ans = :: ldexpl(_Ans, 4 * _Hexexp);

  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = _Ans;
  return (_First);
  }

 virtual _InIt do_get(_InIt _First, _InIt _Last,
  ios_base& _Iosbase, ios_base::iostate& _State,
   void *& _Val) const
  {
                             ;
  char _Ac[32], *_Ep;
  int _Errno = 0;


  int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
   _Iosbase.getloc());
  const unsigned __int64 _Ans =
   (sizeof (void *) == sizeof (unsigned long))
    ? (unsigned __int64):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
    : :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);







  if (_First == _Last)
   _State |= ios_base::eofbit;
  if (_Ep == _Ac || _Errno != 0)
   _State |= ios_base::failbit;
  else
   _Val = (void *)((char *)0 + _Ans);
  return (_First);
  }

private:
 int __cdecl _Getifld(char *_Ac,
  _InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
   const locale& _Loc) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Grouping.size() == 0
   ? (_Elem)0 : _Punct_fac.thousands_sep();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+Xx"};
  _Elem _Atoms[sizeof (_Src) - 1];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Loc);
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

  char *_Ptr = _Ac;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  _Basefield &= ios_base::basefield;
  int _Base = _Basefield == ios_base::oct ? 8
   : _Basefield == ios_base::hex ? 16
   : _Basefield == ios_base::_Fmtzero ? 0 : 10;

  bool _Seendigit = false;
  bool _Nonzero = false;

  if (_First != _Last && *_First == _Atoms[0])
   {
   _Seendigit = true, ++_First;
   if (_First != _Last && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF])
    && (_Base == 0 || _Base == 16))
    _Base = 16, _Seendigit = false, ++_First;
   else if (_Base == 0)
    _Base = 8;
   }

  size_t _Dlen = _Base == 0 || _Base == 10 ? 10
   : _Base == 8 ? 8 : 16 + 6;
  string _Groups((size_t)1, (char)_Seendigit);
  size_t _Group = 0;

  for (char *const _Pe = &_Ac[32 - 1];
   _First != _Last; ++_First)
   {
   size_t _Idx = _Find_elem(_Atoms, *_First);
   if (_Idx < _Dlen)
    {
    *_Ptr = _Src[_Idx];
    if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
     ++_Ptr, _Nonzero = true;
    _Seendigit = true;
    if (_Groups[_Group] != 127)
     ++_Groups[_Group];
    }
   else if (_Groups[_Group] == '\0'
    || _Kseparator == (_Elem)0
    || *_First != _Kseparator)
    break;
   else
    {
    _Groups.append((string::size_type)1, '\0');
    ++_Group;
    }
   }

  if (_Group == 0)
   ;
  else if ('\0' < _Groups[_Group])
   ++_Group;
  else
   _Seendigit = false;

  for (const char *_Pg = &_Grouping[0]; _Seendigit && 0 < _Group; )
   if (*_Pg == 127)
    break;
   else if ((0 < --_Group && *_Pg != _Groups[_Group])
    || (0 == _Group && *_Pg < _Groups[_Group]))
    _Seendigit = false;
   else if ('\0' < _Pg[1])
    ++_Pg;

  if (_Seendigit && !_Nonzero)
   *_Ptr++ = '0';
  else if (!_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Base);
  }

 int __cdecl _Getffld(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
   return (_Getffldx(_Ac, _First, _Last,
    _Iosbase, _Phexexp));

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  char *_Ptr = _Ac;
  bool _Bad = false;

  enum {
   _NUMGET_SIGNOFF = 10,
   _NUMGET_EOFF = 12};
  static const char _Src[] = {"0123456789-+Ee"};
  _Elem _Atoms[sizeof (_Src) - 1];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  bool _Seendigit = false;
  int _Significant = 0;
  int _Pten = 0;
  size_t _Idx;

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     ++_Pten;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < 10)
     {
     _Seendigit = true;
     if (36 <= _Significant)
      ++_Pten;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Pten;
   if (_Pten < 0)
    *_Ptr++ = '0', ++_Pten;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_EOFF + 1]
    || *_First == _Atoms[_NUMGET_EOFF]))
   {
   *_Ptr++ = 'e', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < 10;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  return (_Pten);
  }

 int __cdecl _Getffldx(char *_Ac,
  _InIt& _First, _InIt &_Last,
  ios_base& _Iosbase, int *_Phexexp) const
  {
  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();

  enum {
   _NUMGET_SIGNOFF = 22,
   _NUMGET_XOFF = 24,
   _NUMGET_POFF = 26};
  static const char _Src[] = {"0123456789ABCDEFabcdef-+XxPp"};
  _Elem _Atoms[sizeof (_Src) - 1];
  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Ctype_fac.widen(&_Src[0], &_Src[sizeof (_Src) - 1], _Atoms);

  char *_Ptr = _Ac;
  bool _Bad = false;
  size_t _Idx;

  if (_First == _Last)
   ;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
   *_Ptr++ = '+', ++_First;
  else if (*_First == _Atoms[_NUMGET_SIGNOFF])
   *_Ptr++ = '-', ++_First;

  *_Ptr++ = '0';
  *_Ptr++ = 'x';

  bool _Seendigit = false;
  int _Significant = 0;
  int _Phex = 0;

  if (_First == _Last || *_First != _Atoms[0])
   ;
  else if (++_First != _Last
   && (*_First == _Atoms[_NUMGET_XOFF + 1]
     || *_First == _Atoms[_NUMGET_XOFF]))
   ++_First;
  else
   _Seendigit = true;

  const char *_Pg = &_Grouping[0];
  if (*_Pg == 127 || *_Pg <= '\0')
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
     _Seendigit = true, ++_First)
    if (36 <= _Significant)
     ++_Phex;
    else if (_Idx == 0 && _Significant == 0)
     ;
    else
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
  else
   {
   const _Elem _Kseparator = _Grouping.size() == 0
    ? (_Elem)0 : _Punct_fac.thousands_sep();
   string _Groups((size_t)1, '\0');
   size_t _Group = 0;

   for (; _First != _Last; ++_First)
    if ((_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF)
     {
     _Seendigit = true;
     if (36 <= _Significant)
      ++_Phex;
     else if (_Idx == 0 && _Significant == 0)
      ;
     else
      {
      *_Ptr++ = _Src[_Idx];
      ++_Significant;
      }
     if (_Groups[_Group] != 127)
      ++_Groups[_Group];
     }
    else if (_Groups[_Group] == '\0'
     || _Kseparator == (_Elem)0
     || *_First != _Kseparator)
     break;
    else
     {
     _Groups.append((size_t)1, '\0');
     ++_Group;
     }
   if (_Group == 0)
    ;
   else if ('\0' < _Groups[_Group])
    ++_Group;
   else
    _Bad = true;

   while (!_Bad && 0 < _Group)
    if (*_Pg == 127)
     break;
    else if ((0 < --_Group && *_Pg != _Groups[_Group])
     || (0 == _Group && *_Pg < _Groups[_Group]))
     _Bad = true;
    else if ('\0' < _Pg[1])
     ++_Pg;
   }

  if (_Seendigit && _Significant == 0)
   *_Ptr++ = '0';

  if (_First != _Last && *_First == _Punct_fac.decimal_point())
   *_Ptr++ = localeconv()->decimal_point[0], ++_First;

  if (_Significant == 0)
   {
   for (; _First != _Last && *_First == _Atoms[0];
    _Seendigit = true, ++_First)
    --_Phex;
   if (_Phex < 0)
    *_Ptr++ = '0', ++_Phex;
   }

  for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
   if (_Significant < 36)
    {
    *_Ptr++ = _Src[_Idx];
    ++_Significant;
    }

  if (_Seendigit && _First != _Last
   && (*_First == _Atoms[_NUMGET_POFF + 1]
    || *_First == _Atoms[_NUMGET_POFF]))
   {
   *_Ptr++ = 'p', ++_First;
   _Seendigit = false, _Significant = 0;

   if (_First == _Last)
    ;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF + 1])
    *_Ptr++ = '+', ++_First;
   else if (*_First == _Atoms[_NUMGET_SIGNOFF])
    *_Ptr++ = '-', ++_First;
   for (; _First != _Last && *_First == _Atoms[0]; )
    _Seendigit = true, ++_First;
   if (_Seendigit)
    *_Ptr++ = '0';
   for (; _First != _Last
    && (_Idx = _Find_elem(_Atoms, *_First)) < _NUMGET_SIGNOFF;
    _Seendigit = true, ++_First)
    if (_Significant < 8)
     {
     *_Ptr++ = _Src[_Idx];
     ++_Significant;
     }
   }

  if (_Bad || !_Seendigit)
   _Ptr = _Ac;
  *_Ptr = '\0';
  *_Phexexp = _Phex;
  return (0);
  }
 };


template<class _Elem,
 class _InIt>
                         locale::id num_get<_Elem, _InIt>::id;


template<class _Elem,
 class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
 class num_put
  : public locale::facet
 {
public:
 typedef numpunct<_Elem> _Mypunct;
 typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
  _Mystr;

 static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
  const locale *_Ploc = 0)
  {
  if (_Ppf != 0 && *_Ppf == 0)
   *_Ppf = new num_put<_Elem, _OutIt>(
    _Locinfo(_Ploc->c_str()));
  return (4);
  }

                         static locale::id id;

protected:
 virtual ~num_put() throw ()
  {
  }

 void _Init(const _Locinfo&)
  {
  }

public:
 explicit num_put(size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  { _Locinfo _Lobj;
   _Init(_Lobj);
  }
  }

                    num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
  : locale::facet(_Refs)
  {
  _Init(_Lobj);
  }

 typedef _Elem char_type;
 typedef _OutIt iter_type;

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }


 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

 _OutIt put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  return (do_put(_Dest, _Iosbase, _Fill, _Val));
  }

protected:
 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
  {
                       ;
  if (!(_Iosbase.flags() & ios_base::boolalpha))
   return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
  else
   {
   const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
   _Mystr _Str;
   if (_Val)
    _Str.assign(_Punct_fac.truename());
   else
    _Str.assign(_Punct_fac.falsename());

   size_t _Fillcount = _Iosbase.width() <= 0
    || (size_t)_Iosbase.width() <= _Str.size()
     ? 0 : (size_t)_Iosbase.width() - _Str.size();

   if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
    {
    _Dest = _Rep(_Dest, _Fill, _Fillcount);
    _Fillcount = 0;
    }
   _Dest = _Put(_Dest, _Str.c_str(), _Str.size());
   _Iosbase.width(0);
   return (_Rep(_Dest, _Fill, _Fillcount));
   }
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
  {
  char _Buf[2 * 32], _Fmt[6];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
    _Iosbase.flags()), _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
  {
  char _Buf[2 * 32], _Fmt[8];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
    _Iosbase.flags()), _Val)));
  }


 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, double _Val) const
  {
  char _Buf[8 + 36 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 36 < _Precision
   ? 36 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
   && _Val * 0.5 != _Val)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf_s(_Buf, sizeof (_Buf),
     _Ffmt(_Fmt, 0, _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, long double _Val) const
  {
  char _Buf[8 + 36 + 64], _Fmt[8];
  streamsize _Precision = _Iosbase.precision() <= 0
   && !(_Iosbase.flags() & ios_base::fixed)
    ? 6 : _Iosbase.precision();
  int _Significance = 36 < _Precision
   ? 36 : (int)_Precision;
  _Precision -= _Significance;
  size_t _Beforepoint = 0;
  size_t _Afterpoint = 0;

  if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)
   {
   bool _Signed = _Val < 0;
   if (_Signed)
    _Val = -_Val;

   for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
    _Val /= 1e10;

   if (0 < _Val)
    for (; 10 <= _Precision && _Val <= 1e-35
     && _Afterpoint < 5000; _Afterpoint += 10)
     {
     _Val *= 1e10;
     _Precision -= 10;
     }

   if (_Signed)
    _Val = -_Val;
   }

  return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
   _Beforepoint, _Afterpoint, (size_t)_Precision,
    :: sprintf_s(_Buf, sizeof (_Buf),
     _Ffmt(_Fmt, 'L', _Iosbase.flags()),
     _Significance, _Val)));
  }

 virtual _OutIt do_put(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
  {
  char _Buf[2 * 32];

  return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
   :: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
  }

private:
 char *__cdecl _Ffmt(char *_Fmt,
  char _Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showpoint)
   *_Ptr++ = '#';
  *_Ptr++ = '.';
  *_Ptr++ = '*';
  if (_Spec != '\0')
   *_Ptr++ = _Spec;

  ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
  if (_Flags & ios_base::uppercase)
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'A'
    : _Ffl == ios_base::scientific ? 'E' : 'G';
  else
   *_Ptr++ = _Ffl == ios_base::fixed ? 'f'
    : _Ffl == ios_base::hexfloat ? 'a'
    : _Ffl == ios_base::scientific ? 'e' : 'g';

  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Fput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
   size_t _Beforepoint, size_t _Afterpoint,
    size_t _Trailing, size_t _Count) const
  {
                       ;
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;

  const char *_Exps;
  if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)
   _Exps = "eE";
  else
   {
   _Exps = "pP";
   if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
    && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
    _Prefix += 2;
   }
  const size_t _Eoff =
   :: strcspn(&_Buf[0], _Exps);
  char _Dp[2] = {"."};
  _Dp[0] = :: localeconv()->decimal_point[0];
  const size_t _Poff =
   :: strcspn(&_Buf[0], &_Dp[0]);

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  const _Elem _E0 = _Ctype_fac.widen('0');
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const _Elem _Kseparator = _Punct_fac.thousands_sep();

  size_t _Off = _Beforepoint;
  if (_Poff == _Count)
   {
   _Off += _Eoff;
   _Groupstring.insert(_Eoff, _Beforepoint, _E0);
   }
  else
   {
   _Off += _Poff;
   _Groupstring.insert(_Eoff, _Trailing, _E0);
   _Groupstring.insert(_Poff + 1, _Afterpoint, _E0);
   _Groupstring[_Poff] = _Punct_fac.decimal_point();
   _Groupstring.insert(_Poff, _Beforepoint, _E0);
   }

  const char *_Pg = &_Grouping[0];
  while (*_Pg != 127 && '\0' < *_Pg
   && (size_t)*_Pg < _Off - _Prefix)
   {
   _Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);
   if ('\0' < _Pg[1])
    ++_Pg;
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 char *__cdecl _Ifmt(char *_Fmt,
  const char *_Spec, ios_base::fmtflags _Flags) const
  {
  char *_Ptr = _Fmt;
  *_Ptr++ = '%';

  if (_Flags & ios_base::showpos)
   *_Ptr++ = '+';
  if (_Flags & ios_base::showbase)
   *_Ptr++ = '#';
  if (_Spec[0] != 'L')
   *_Ptr++ = _Spec[0];
  else

   {
   *_Ptr++ = 'I';
   *_Ptr++ = '6';
   *_Ptr++ = '4';
   }

  ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
  *_Ptr++ = _Basefield == ios_base::oct ? 'o'
   : _Basefield != ios_base::hex ? _Spec[1]
   : _Flags & ios_base::uppercase ? 'X' : 'x';
  *_Ptr = '\0';
  return (_Fmt);
  }

 _OutIt __cdecl _Iput(_OutIt _Dest,
  ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
  {
                       ;
  size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')
   ? 1 : 0;
  if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
   && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
   && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))
   _Prefix += 2;

  const ctype<_Elem>& _Ctype_fac =
   use_facet< ctype<_Elem> >(_Iosbase.getloc());
  _Mystr _Groupstring(_Count, _Elem(0));
  _Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
  const string _Grouping = _Punct_fac.grouping();
  const char *_Pg = &_Grouping[0];
  if (*_Pg != 127 && '\0' < *_Pg)
   {
   const _Elem _Kseparator = _Punct_fac.thousands_sep();
   while (*_Pg != 127 && '\0' < *_Pg
    && (size_t)*_Pg < _Count - _Prefix)
    {
    _Count -= *_Pg;
    _Groupstring.insert(_Count, 1, _Kseparator);
    if ('\0' < _Pg[1])
     ++_Pg;
    }
   }

  _Count = _Groupstring.size();
  size_t _Fillcount = _Iosbase.width() <= 0
   || (size_t)_Iosbase.width() <= _Count
    ? 0 : (size_t)_Iosbase.width() - _Count;

  ios_base::fmtflags _Adjustfield =
   _Iosbase.flags() & ios_base::adjustfield;
  if (_Adjustfield != ios_base::left
   && _Adjustfield != ios_base::internal)
   {
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   }
  else if (_Adjustfield == ios_base::internal)
   {
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);
   _Dest = _Rep(_Dest, _Fill, _Fillcount);
   _Fillcount = 0;
   }
  else
   _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);
  _Iosbase.width(0);
  return (_Rep(_Dest, _Fill, _Fillcount));
  }

 _OutIt __cdecl _Put(_OutIt _Dest,
  const _Elem *_Ptr, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
   *_Dest = *_Ptr;
  return (_Dest);
  }

 _OutIt __cdecl _Rep(_OutIt _Dest,
  _Elem _Ch, size_t _Count) const
  {
  for (; 0 < _Count; --_Count, ++_Dest)
   *_Dest = _Ch;
  return (_Dest);
  }
 };


template<class _Elem,
 class _OutIt>
                         locale::id num_put<_Elem, _OutIt>::id;




template locale::id numpunct<char>::id;
template class __declspec(dllimport) num_get<char,
 istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
 ostreambuf_iterator<char, char_traits<char> > >;

template locale::id numpunct<wchar_t>::id;
template class __declspec(dllimport) num_get<wchar_t,
 istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
 ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
#line 1593 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xlocnum"
}

#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ios"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {

template<class _Elem,
 class _Traits>
 class basic_ios
  : public ios_base
 {
public:
 typedef basic_ios<_Elem, _Traits> _Myt;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ctype<_Elem> _Ctype;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_ios(_Mysb *_Strbuf)
  {
  init(_Strbuf);
  }

 virtual ~basic_ios() throw ()
  {
  }

 void clear(iostate _State = goodbit,
  bool _Reraise = false)
  {
  ios_base::clear((iostate)(_Mystrbuf == 0
   ? (int)_State | (int)badbit : (int)_State), _Reraise);
  }

 void clear(io_state _State)
  {
  clear((iostate)_State);
  }

 void setstate(iostate _State,
  bool _Reraise = false)
  {
  if (_State != goodbit)
   clear((iostate)((int)rdstate() | (int)_State), _Reraise);
  }

 void setstate(io_state _State)
  {
  setstate((iostate)_State);
  }

 _Myt& copyfmt(const _Myt& _Right)
  {
  _Tiestr = _Right.tie();
  _Fillch = _Right.fill();
  ios_base::copyfmt(_Right);
  return (*this);
  }

 _Myos * tie() const
  {
  return (_Tiestr);
  }

 _Myos * tie(_Myos *_Newtie)
  {
  _Myos *_Oldtie = _Tiestr;
  _Tiestr = _Newtie;
  return (_Oldtie);
  }

 _Mysb * rdbuf() const
  {
  return (_Mystrbuf);
  }

 _Mysb * rdbuf(_Mysb *_Strbuf)
  {
  _Mysb *_Oldstrbuf = _Mystrbuf;
  _Mystrbuf = _Strbuf;
  clear();
  return (_Oldstrbuf);
  }

 locale imbue(const locale& _Loc)
  {
  locale _Oldlocale = ios_base::imbue(_Loc);
  if (rdbuf() != 0)
   rdbuf()->pubimbue(_Loc);
  return (_Oldlocale);
  }

 _Elem fill() const
  {
  return (_Fillch);
  }

 _Elem fill(_Elem _Newfill)
  {
  _Elem _Oldfill = _Fillch;
  _Fillch = _Newfill;
  return (_Oldfill);
  }

 char narrow(_Elem _Ch, char _Dflt = '\0') const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.narrow(_Ch, _Dflt));
  }

 _Elem widen(char _Byte) const
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
  return (_Ctype_fac.widen(_Byte));
  }

 void move(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void move(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Mystrbuf = 0;
   _Tiestr = 0;
   this->swap(_Right);
   }
  }

 void swap(_Myt& _Right) throw ()
  {
  ios_base::swap(_Right);
  ::std:: swap(_Fillch, _Right._Fillch);
  ::std:: swap(_Tiestr, _Right._Tiestr);
  }

 void set_rdbuf(_Mysb *_Strbuf)
  {
  _Mystrbuf = _Strbuf;
  }

protected:
 void init(_Mysb *_Strbuf = 0,
  bool _Isstd = false)
  {
  _Init();
  _Mystrbuf = _Strbuf;
  _Tiestr = 0;
  _Fillch = widen(' ');

  if (_Mystrbuf == 0)
   setstate(badbit);

  if (_Isstd)
   _Addstd(this);
  }

                    basic_ios()
  {
  }

private:
 _Mysb *_Mystrbuf;
 _Myos *_Tiestr;
 _Elem _Fillch;

public:
                    basic_ios(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };




template class __declspec(dllimport) basic_ios<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
 char_traits<wchar_t> >;
#line 209 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ios"
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl dec(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::dec, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::fixed, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hex(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hex, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl hexfloat(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::hexfloat, ios_base::floatfield);
 return (_Iosbase);
 }

namespace tr1 {
using ::std:: hexfloat;
}

inline ios_base& __cdecl internal(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::internal, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl left(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::left, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::boolalpha);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
 {
 _Iosbase.unsetf(ios_base::uppercase);
 return (_Iosbase);
 }

inline ios_base& __cdecl oct(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::oct, ios_base::basefield);
 return (_Iosbase);
 }

inline ios_base& __cdecl right(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::right, ios_base::adjustfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::scientific, ios_base::floatfield);
 return (_Iosbase);
 }

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showbase);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpoint);
 return (_Iosbase);
 }

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::showpos);
 return (_Iosbase);
 }

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::skipws);
 return (_Iosbase);
 }

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::unitbuf);
 return (_Iosbase);
 }

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
 {
 _Iosbase.setf(ios_base::uppercase);
 return (_Iosbase);
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189 4390)

namespace std {
#line 35 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream"
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_ostream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_ostream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
 typedef num_put<_Elem, _Iter> _Nput;

 explicit basic_ostream(
  basic_streambuf<_Elem, _Traits> *_Strbuf,

  bool _Isstd = false)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_ostream(_Uninitialized, bool _Addit = true)
  {
  if (_Addit)
   this->_Addstd(this);
  }

protected:
                    basic_ostream(_Myt&& _Right)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_ostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_ostream() throw ()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Ostr)
   : _Myostr(_Ostr)
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() throw ()
   {
   if (_Myostr.rdbuf() != 0)
    _Myostr.rdbuf()->_Unlock();
   }

  _Myt& _Myostr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Ostr)
   : _Sentry_base(_Ostr)
   {
   if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)
    _Ostr.tie()->flush();
   _Ok = _Ostr.good();
   }

                     ~sentry() throw ()
   {

   if (!::std:: uncaught_exception())
    this->_Myostr._Osfx();




   }

  explicit operator bool() const
   {
   return (_Ok);
   }

 private:
  bool _Ok;

 public:
                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;
  };

 bool opfx()
  {
  if (this->good() && _Myios::tie() != 0 && _Myios::tie() != this)
   _Myios::tie()->flush();
  return (this->good());
  }

 void osfx()
  {
  _Osfx();
  }

 void _Osfx()
  {
  try {
  if (this->good() && this->flags() & ios_base::unitbuf)
   if (_Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
  } catch (...) {
  }
  }
#line 197 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream"
 _Myt& operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
                      ;
  return ((*_Pfn)(*this));
  }

 _Myt& operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
                      ;
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
                      ;
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator<<(_Bool _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned short)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }
#line 271 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream"
 _Myt& operator<<(unsigned short _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());
   ios_base::fmtflags _Bfl =
    this->flags() & ios_base::basefield;
   long _Tmp = (_Bfl == ios_base::oct
    || _Bfl == ios_base::hex)
    ? (long)(unsigned int)_Val : (long)_Val;

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Tmp).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned int _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (unsigned long)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned long _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(__int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(unsigned __int64 _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator<<(float _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), (double)_Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(long double _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(const void *_Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nput& _Nput_fac = use_facet< _Nput >(this->getloc());

   try {
   if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
    _Myios::fill(), _Val).failed())
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator<<(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   for (int_type _Meta = _Traits::eof(); ; _Copied = true)
    {
    try {
    _Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
     ? _Strbuf->sgetc() : _Strbuf->snextc();
    } catch (...) {
     _Myios::setstate(ios_base::failbit);
     throw;
    }

    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     break;

    try {
     if (_Traits::eq_int_type(_Traits::eof(),
      _Myios::rdbuf()->sputc(
       _Traits::to_char_type(_Meta))))
      {
      _State |= ios_base::badbit;
      break;
      }
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

  this->width(0);
  _Myios::setstate(_Strbuf == 0 ? ios_base::badbit
   : !_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& put(_Elem _Ch)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputc(_Ch)))
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& write(const _Elem *_Str,
  streamsize _Count)
  {





  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (!_Ok)
   _State |= ios_base::badbit;
  else
   {
   try {
   if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
    _State |= ios_base::badbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& flush()
  {
  if (_Myios::rdbuf() != 0)
   {
   const sentry _Ok(*this);

   if (_Ok && _Myios::rdbuf()->pubsync() == -1)
    _Myios::setstate(ios_base::badbit);
   }
  return (*this);
  }

 _Myt& seekp(pos_type _Pos)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 _Myt& seekp(off_type _Off, ios_base::seekdir _Way)
  {
  const sentry _Ok(*this);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::out) == _BADOFF)
   _Myios::setstate(ios_base::failbit);
  return (*this);
  }

 pos_type tellp()
  {
  const sentry _Ok(*this);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::out));
  else
   return (pos_type(_BADOFF));
  }
 };

#pragma vtordisp(pop)
#line 683 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream"
template class __declspec(dllimport) basic_ostream<char,
 char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
 char_traits<wchar_t> >;
#line 697 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ostream"
template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
 {
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize):: strlen(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
 {
 ios_base::iostate _State = ios_base::goodbit;
 const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

 if (_Ok)
  {
  const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr,
  const char *_Val)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, char _Ch)
 {
 typedef char _Elem;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 streamsize _Count = (streamsize)_Traits::length(_Val);
 streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
  ? 0 : _Ostr.width() - _Count;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
   _State |= ios_base::badbit;

  if (_State == ios_base::goodbit)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;

 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myos::sentry _Ok(_Ostr);

 if (_Ok)
  {
  streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; _State == ios_base::goodbit && 0 < _Pad;
    --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     _State |= ios_base::badbit;

  if (_State == ios_base::goodbit
   && _Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ch)))
   _State |= ios_base::badbit;

  for (; _State == ios_base::goodbit && 0 < _Pad;
   --_Pad)
   if (_Traits::eq_int_type(_Traits::eof(),
    _Ostr.rdbuf()->sputc(_Ostr.fill())))
    _State |= ios_base::badbit;
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.width(0);
 _Ostr.setstate(_State);
 return (_Ostr);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
 {
 return (_Ostr << (const char *)_Val);
 }

template<class _Traits> inline
 basic_ostream<char, _Traits>& operator<<(
  basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
 {
 return (_Ostr << (char)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, const _Ty& _Val)
 {
 return (_Ostr << _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Ostr.widen('\n'));
 _Ostr.flush();
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.put(_Elem());
 return (_Ostr);
 }

template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  __cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
 {
 _Ostr.flush();
 return (_Ostr);
 }


template<class _Elem,
 class _Traits> inline
 basic_ostream<_Elem, _Traits>&
  operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
   const error_code& _Errcode)
 {
 return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)

namespace std {
#pragma vtordisp(push, 2)


template<class _Elem,
 class _Traits>
 class basic_istream
  : virtual public basic_ios<_Elem, _Traits>
 {
public:
 typedef basic_istream<_Elem, _Traits> _Myt;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef basic_streambuf<_Elem, _Traits> _Mysb;
 typedef istreambuf_iterator<_Elem, _Traits> _Iter;
 typedef ctype<_Elem> _Ctype;
 typedef num_get<_Elem, _Iter> _Nget;
#line 42 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"
 explicit basic_istream(_Mysb *_Strbuf,
  bool _Isstd = false)

  : _Chcount(0)
  {
  _Myios::init(_Strbuf, _Isstd);
  }

                    basic_istream(_Uninitialized)
  {
  this->_Addstd(this);
  }

protected:
                    basic_istream(_Myt&& _Right)
  : _Chcount(_Right._Chcount)
  {
  _Myios::init();
  _Myios::move(::std:: move(_Right));
  _Right._Chcount = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  _Myios::swap(_Right);
  ::std:: swap(_Chcount, _Right._Chcount);
  }

public:
                    basic_istream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_istream() throw ()
  {
  }

 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;


 class _Sentry_base
  {
 public:
                     _Sentry_base(_Myt& _Istr)
   : _Myistr(_Istr)
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Lock();
   }

                     ~_Sentry_base() throw ()
   {
   if (_Myistr.rdbuf() != 0)
    _Myistr.rdbuf()->_Unlock();
   }

  _Myt& _Myistr;

 private:
  _Sentry_base& operator=(const _Sentry_base&);
  };

 class sentry
  : public _Sentry_base
  {
 public:
  explicit sentry(_Myt& _Istr, bool _Noskip = false)
   : _Sentry_base(_Istr)
   {
   _Ok = this->_Myistr._Ipfx(_Noskip);
   }

  explicit operator bool() const
   {
   return (_Ok);
   }

 private:
  bool _Ok;

 public:
                     sentry(const sentry&) = delete;
  sentry& operator=(const sentry&) = delete;
  };

 bool _Ipfx(bool _Noskip = false)
  {
  if (this->good())
   {
   if (_Myios::tie() != 0)
    _Myios::tie()->flush();

   if (!_Noskip && this->flags() & ios_base::skipws)
    {
    const _Ctype& _Ctype_fac = use_facet< _Ctype >(this->getloc());

    try {
    int_type _Meta = _Myios::rdbuf()->sgetc();

    for (; ; _Meta = _Myios::rdbuf()->snextc())
     if (_Traits::eq_int_type(_Traits::eof(), _Meta))
      {
      _Myios::setstate(ios_base::eofbit);
      break;
      }
     else if (!_Ctype_fac.is(_Ctype::space,
      _Traits::to_char_type(_Meta)))
      break;
    } catch (...) { _Myios::setstate(ios_base::badbit, true); }
    }

   if (this->good())
    return (true);
   }
  _Myios::setstate(ios_base::failbit);
  return (false);
  }

 bool ipfx(bool _Noskip = false)
  {
  return (_Ipfx(_Noskip));
  }

 void isfx()
  {
  }
#line 198 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"
 _Myt& operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
  {
                      ;
  return ((*_Pfn)(*this));
  }

 _Myt& operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
  {
                      ;
  (*_Pfn)(*(_Myios *)this);
  return (*this);
  }

 _Myt& operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
  {
                      ;
  (*_Pfn)(*(ios_base *)this);
  return (*this);
  }

 _Myt& operator>>(_Bool& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-32768) || 32767 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = (short)_Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }
#line 272 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"
 _Myt& operator>>(unsigned short& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   long _Tmp = 0;
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Tmp);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }

   if (_State & ios_base::failbit
    || _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
    _State |= ios_base::failbit;
   else
    _Val = _Tmp;
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned int& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned long& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(__int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(unsigned __int64& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }


 _Myt& operator>>(float& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);
  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(long double& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());
   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(void *& _Val)
  {
  ios_base::iostate _State = ios_base::goodbit;
  const sentry _Ok(*this);

  if (_Ok)
   {
   const _Nget& _Nget_fac = use_facet< _Nget >(this->getloc());

   try {
   _Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
    *this, _State, _Val);
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& operator>>(_Mysb *_Strbuf)
  {
  ios_base::iostate _State = ios_base::goodbit;
  bool _Copied = false;
  const sentry _Ok(*this);

  if (_Ok && _Strbuf != 0)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      if (_Traits::eq_int_type(_Traits::eof(),
       _Strbuf->sputc(_Traits::to_char_type(_Meta))))
       break;
     } catch (...) {
      break;
     }
     _Copied = true;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
  return (*this);
  }

 int_type get()
  {
  int_type _Meta = 0;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   _Meta = _Myios::rdbuf()->sgetc();

   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    _State |= ios_base::eofbit | ios_base::failbit;
   else
    {
    _Myios::rdbuf()->sbumpc();
    ++_Chcount;
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& get(_Elem *_Str, streamsize _Count)
  {
  return (get(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& get(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
                      ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Traits::to_char_type(_Meta) == _Delim)
     break;
    else
     {
     *_Str++ = _Traits::to_char_type(_Meta);
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_Chcount == 0
   ? _State | ios_base::failbit : _State);
  *_Str = _Elem();
  return (*this);
  }

 _Myt& get(_Elem& _Ch)
  {
  int_type _Meta = get();
  if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
   _Ch = _Traits::to_char_type(_Meta);
  return (*this);
  }

 _Myt& get(_Mysb& _Strbuf)
  {
  return (get(_Strbuf, _Myios::widen('\n')));
  }

 _Myt& get(_Mysb& _Strbuf, _Elem _Delim)
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     try {
      _Elem _Ch = _Traits::to_char_type(_Meta);
      if (_Ch == _Delim
       || _Traits::eq_int_type(_Traits::eof(),
        _Strbuf.sputc(_Ch)))
       break;
     } catch (...) {
      break;
     }
     ++_Chcount;
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  if (_Chcount == 0)
   _State |= ios_base::failbit;
  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& getline(_Elem *_Str, streamsize _Count)
  {
  return (getline(_Str, _Count, _Myios::widen('\n')));
  }

 _Myt& getline(_Elem *_Str,
  streamsize _Count, _Elem _Delim)
  {
                      ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   int_type _Metadelim = _Traits::to_int_type(_Delim);

   try {
   int_type _Meta = _Myios::rdbuf()->sgetc();

   for (; ; _Meta = _Myios::rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (_Meta == _Metadelim)
     {
     ++_Chcount;
     _Myios::rdbuf()->sbumpc();
     break;
     }
    else if (--_Count <= 0)
     {
     _State |= ios_base::failbit;
     break;
     }
    else
     {
     ++_Chcount;
     *_Str++ = _Traits::to_char_type(_Meta);
     }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  *_Str = _Elem();
  _Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
  return (*this);
  }

 _Myt& ignore(streamsize _Count = 1,
  int_type _Metadelim = _Traits::eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok && 0 < _Count)
   {
   try {
   for (; ; )
    {
    int_type _Meta;
    if (_Count != 2147483647 && --_Count < 0)
     break;
    else if (_Traits::eq_int_type(_Traits::eof(),
     _Meta = _Myios::rdbuf()->sbumpc()))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else
     {
     ++_Chcount;
     if (_Meta == _Metadelim)
      break;
     }
    }
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& read(_Elem *_Str, streamsize _Count)
  {
                      ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
   _Chcount += _Num;
   if (_Num != _Count)
    _State |= ios_base::eofbit | ios_base::failbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize readsome(_Elem *_Str,
  streamsize _Count)
  {
                      ;
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  const sentry _Ok(*this, true);
  streamsize _Num;

  if (!_Ok)
   _State |= ios_base::failbit;
  else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
   _State |= ios_base::eofbit;
  else if (0 < _Num)
   read(_Str, _Num < _Count ? _Num : _Count);

  _Myios::setstate(_State);
  return (gcount());
  }

 int_type peek()
  {
  ios_base::iostate _State = ios_base::goodbit;
  _Chcount = 0;
  int_type _Meta = 0;
  const sentry _Ok(*this, true);

  if (!_Ok)
   _Meta = _Traits::eof();
  else
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Meta = _Myios::rdbuf()->sgetc()))
    _State |= ios_base::eofbit;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (_Meta);
  }

 _Myt& putback(_Elem _Ch)
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sputbackc(_Ch)))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 _Myt& unget()
  {
  _Chcount = 0;
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (_Ok)
   {
   try {
   if (_Traits::eq_int_type(_Traits::eof(),
    _Myios::rdbuf()->sungetc()))
    _State |= ios_base::badbit | _Oldstate;
   } catch (...) { _Myios::setstate(ios_base::badbit, true); }
   }

  _Myios::setstate(_State);
  return (*this);
  }

 streamsize gcount() const
  {
  return (_Chcount);
  }

 int sync()
  {
  const sentry _Ok(*this, true);

  if (_Myios::rdbuf() == 0)
   return (-1);
  else if (_Myios::rdbuf()->pubsync() == -1)
   {
   _Myios::setstate(ios_base::badbit);
   return (-1);
   }
  else
   return (0);
  }

 _Myt& seekg(pos_type _Pos)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 _Myt& seekg(off_type _Off, ios_base::seekdir _Way)
  {
  ios_base::iostate _State = ios_base::goodbit;
  ios_base::iostate _Oldstate = _Myios::rdstate();
  _Myios::clear(_Oldstate & ~ios_base::eofbit);
  const sentry _Ok(*this, true);

  if (!this->fail()
   && (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
    ios_base::in) == _BADOFF)
   _Myios::setstate(_State | ios_base::failbit);
  return (*this);
  }

 pos_type tellg()
  {
  const sentry _Ok(*this, true);

  if (!this->fail())
   return (_Myios::rdbuf()->pubseekoff(0,
    ios_base::cur, ios_base::in));
  else
   return (pos_type(_BADOFF));
  }

private:
 streamsize _Chcount;
 };



#pragma vtordisp(pop)
#line 923 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"
template class __declspec(dllimport) basic_istream<char, char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t, char_traits<wchar_t> >;
#line 934 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"
template<class _Elem,
 class _Traits>
 class basic_iostream
 : public basic_istream<_Elem, _Traits>,
  public basic_ostream<_Elem, _Traits>
 {
public:
 typedef basic_iostream<_Elem, _Traits> _Myt;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_ios<_Elem, _Traits> _Myios;
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef typename _Traits::int_type int_type;
 typedef typename _Traits::pos_type pos_type;
 typedef typename _Traits::off_type off_type;

 explicit basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
  : _Myis(_Strbuf, false),
   _Myos(_Noinit, false)
  {
  }

protected:
                    basic_iostream(_Myt&& _Right)
  : _Myis(_Right.rdbuf(), false),
   _Myos(_Noinit, false)
  {
  _Myios::init();
  _Myios::move(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  this->swap(_Right);
  return (*this);
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   _Myios::swap(_Right);
  }

public:
                    basic_iostream(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;

 virtual ~basic_iostream() throw ()
  {
  }
 };






template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;
#line 1004 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\istream"
template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
 {
                     ;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;
 ios_base::iostate _State = ios_base::goodbit;
 _Elem *_Str0 = _Str;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

  try {
  streamsize _Count = 0 < _Istr.width() ? _Istr.width() : 2147483647;
  typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
  _Elem _Ch;
  for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Ch = _Traits::to_char_type(_Meta))
     || _Ch == _Elem())
    break;
   else
    *_Str++ = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 *_Str = _Elem();
 _Istr.width(0);
 _Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 typename _Myis::int_type _Meta;
 ios_base::iostate _State = ios_base::goodbit;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  try {
  _Meta = _Istr.rdbuf()->sbumpc();
  if (_Traits::eq_int_type(_Traits::eof(), _Meta))
   _State |= ios_base::eofbit | ios_base::failbit;
  else
   _Ch = _Traits::to_char_type(_Meta);
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, signed char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
 {
 return (_Istr >> (char *)_Str);
 }

template<class _Traits> inline
 basic_istream<char, _Traits>& operator>>(
  basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
 {
 return (_Istr >> (char&)_Ch);
 }

template<class _Elem,
 class _Traits,
 class _Ty> inline
 basic_istream<_Elem, _Traits>&
  operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
 {
 return (_Istr >> _Val);
 }


template<class _Elem,
 class _Traits> inline
 basic_istream<_Elem, _Traits>&
  __cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef ctype<_Elem> _Ctype;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const typename _Myis::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

   try {
   for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(_Ctype::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

__declspec(dllimport) inline basic_istream<char, char_traits<char> >&
 __cdecl ws(basic_istream<char, char_traits<char> >& _Istr)
 {
 typedef char _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

__declspec(dllimport) inline basic_istream<wchar_t, char_traits<wchar_t> >&
 __cdecl ws(basic_istream<wchar_t, char_traits<wchar_t> >& _Istr)
 {
 typedef wchar_t _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
   } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }


__declspec(dllimport) inline basic_istream<unsigned short, char_traits<unsigned short> >&
 __cdecl ws(basic_istream<unsigned short, char_traits<unsigned short> >& _Istr)
 {
 typedef unsigned short _Elem;
 typedef char_traits<_Elem> _Traits;

 if (!_Istr.eof())
  {
  ios_base::iostate _State = ios_base::goodbit;
  const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

  if (_Ok)
   {
   const ctype<_Elem>& _Ctype_fac =
    use_facet< ctype<_Elem> >(_Istr.getloc());

   try {
   for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
    _Meta = _Istr.rdbuf()->snextc())
    if (_Traits::eq_int_type(_Traits::eof(), _Meta))
     {
     _State |= ios_base::eofbit;
     break;
     }
    else if (!_Ctype_fac.is(ctype<_Elem>::space,
     _Traits::to_char_type(_Meta)))
     break;
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
   }

  _Istr.setstate(_State);
  }
 return (_Istr);
 }

}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iterator"



#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Container>
 class back_insert_iterator
  : public _Outit
 {
public:
 typedef back_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit back_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_back(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_back(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<back_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 back_insert_iterator<_Container> back_inserter(_Container& _Cont)
 {
 return (::std:: back_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class front_insert_iterator
  : public _Outit
 {
public:
 typedef front_insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 explicit front_insert_iterator(_Container& _Cont)
  : container(::std:: addressof(_Cont))
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  container->push_front(_Val);
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  container->push_front(::std:: forward<_Valty>(_Val));
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 };

template<class _Container>
 struct _Is_checked_helper<front_insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 front_insert_iterator<_Container> front_inserter(_Container& _Cont)
 {
 return (::std:: front_insert_iterator<_Container>(_Cont));
 }


template<class _Container>
 class insert_iterator
  : public _Outit
 {
public:
 typedef insert_iterator<_Container> _Myt;
 typedef _Container container_type;
 typedef typename _Container::value_type _Valty;

 insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
  : container(::std:: addressof(_Cont)), iter(_Where)
  {
  }

 _Myt& operator=(const _Valty& _Val)
  {
  iter = container->insert(iter, _Val);
  ++iter;
  return (*this);
  }

 _Myt& operator=(_Valty&& _Val)
  {
  iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
  ++iter;
  return (*this);
  }

 _Myt& operator*()
  {
  return (*this);
  }

 _Myt& operator++()
  {
  return (*this);
  }

 _Myt& operator++(int)
  {
  return (*this);
  }

protected:
 _Container *container;
 typename _Container::iterator iter;
 };

template<class _Container>
 struct _Is_checked_helper<insert_iterator<_Container> >
  : public true_type
 {
 };


template<class _Container> inline
 insert_iterator<_Container> inserter(_Container& _Cont,
  typename _Container::iterator _Where)
 {
 return (::std:: insert_iterator<_Container>(_Cont, _Where));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem>,
 class _Diff = ptrdiff_t>
 class istream_iterator
  : public iterator<input_iterator_tag, _Ty, _Diff,
   const _Ty *, const _Ty&>
 {
 typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_istream<_Elem, _Traits> istream_type;

 typedef const _Ty *pointer;

 istream_iterator()
  : _Myistr(0)
  {
  }

 istream_iterator(istream_type& _Istr)
  : _Myistr(&_Istr)
  {
  _Getval();
  }

 const _Ty& operator*() const
  {
  return (_Myval);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  _Getval();
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 bool _Equal(const _Myt& _Right) const
  {
  return (_Myistr == _Right._Myistr);
  }

protected:
 void _Getval()
  {
  if (_Myistr != 0 && !(*_Myistr >> _Myval))
   _Myistr = 0;
  }

 istream_type *_Myistr;
 _Ty _Myval;
 };

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff>
 struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
  : public true_type
 {
 };


template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator==(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (_Left._Equal(_Right));
 }

template<class _Ty,
 class _Elem,
 class _Traits,
 class _Diff> inline
 bool operator!=(
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
  const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
 {
 return (!(_Left == _Right));
 }



template<class _Ty,
 class _Elem = char,
 class _Traits = char_traits<_Elem> >
 class ostream_iterator
  : public _Outit
 {
public:
 typedef _Elem char_type;
 typedef _Traits traits_type;
 typedef basic_ostream<_Elem, _Traits> ostream_type;

 ostream_iterator(ostream_type& _Ostr,
  const _Elem *_Delim = 0)
  : _Myostr(&_Ostr), _Mydelim(_Delim)
  {
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator=(const _Ty& _Val)
  {
  *_Myostr << _Val;
  if (_Mydelim != 0)
   *_Myostr << _Mydelim;
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator*()
  {
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator++()
  {
  return (*this);
  }

 ostream_iterator<_Ty, _Elem, _Traits>& operator++(int)
  {
  return (*this);
  }

protected:
 const _Elem *_Mydelim;
 ostream_type *_Myostr;
 };

template<class _Ty,
 class _Elem,
 class _Traits>
 struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
  : public true_type
 {
 };
}

namespace stdext {
using ::std:: iterator_traits;
using ::std:: size_t;


template<class _Iterator>
 class checked_array_iterator
 {
public:
 typedef checked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  distance_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 checked_array_iterator()
  : _Myarray(), _Mysize(0), _Myindex(0)
  {
  }

 checked_array_iterator(_Iterator _Array, size_t _Size,
  size_t _Index = 0)
  : _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
  {
  { if (!(_Index <= _Size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
  }

 _Iterator base() const
  {
  return (_Myarray + _Myindex);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myindex = _Right - _Myarray;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

  return (_Myarray[_Myindex]);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  { if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

  ++_Myindex;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  { if (!(_Myarray != 0 && 0 < _Myindex)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

  --_Myindex;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  { if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

  _Myindex += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
  return (_Myindex - _Right._Myindex);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
  return (_Myindex == _Right._Myindex);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  { if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
  return (_Myindex < _Right._Myindex);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myarray;
 size_t _Mysize;
 size_t _Myindex;
 };

template<class _Iterator> inline
 typename checked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(checked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator>&
  _Rechecked(checked_array_iterator<_Iterator>& _Iter,
   typename checked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> operator+(
  typename checked_array_iterator<_Iterator>::difference_type _Off,
  checked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 checked_array_iterator<_Iterator> make_checked_array_iterator(
  _Iterator _Array, size_t _Size, size_t _Index = 0)
 {
 return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
 }


template<class _Iterator>
 class unchecked_array_iterator
 {
public:
 typedef unchecked_array_iterator<_Iterator> _Myt;

 typedef typename iterator_traits<_Iterator>::iterator_category
  iterator_category;
 typedef typename iterator_traits<_Iterator>::value_type
  value_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  difference_type;
 typedef typename iterator_traits<_Iterator>::difference_type
  distance_type;
 typedef typename iterator_traits<_Iterator>::pointer
  pointer;
 typedef typename iterator_traits<_Iterator>::reference
  reference;

 unchecked_array_iterator()
  : _Myptr()
  {
  }

 explicit unchecked_array_iterator(_Iterator _Ptr)
  : _Myptr(_Ptr)
  {
  }

 _Iterator base() const
  {
  return (_Myptr);
  }

 typedef _Iterator _Unchecked_type;

 _Myt& _Rechecked(_Unchecked_type _Right)
  {
  _Myptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (base());
  }

 reference operator*() const
  {
  return (*_Myptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myt& operator++()
  {
  ++_Myptr;
  return (*this);
  }

 _Myt operator++(int)
  {
  _Myt _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myt& operator--()
  {
  --_Myptr;
  return (*this);
  }

 _Myt operator--(int)
  {
  _Myt _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myt& operator+=(difference_type _Off)
  {
  _Myptr += _Off;
  return (*this);
  }

 _Myt operator+(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myt& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myt operator-(difference_type _Off) const
  {
  _Myt _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myt& _Right) const
  {
  return (_Myptr - _Right._Myptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myt& _Right) const
  {
  return (_Myptr == _Right._Myptr);
  }

 bool operator!=(const _Myt& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myt& _Right) const
  {
  return (_Myptr < _Right._Myptr);
  }

 bool operator>(const _Myt& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myt& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myt& _Right) const
  {
  return (!(*this < _Right));
  }

private:
 _Iterator _Myptr;
 };

template<class _Iterator> inline
 typename unchecked_array_iterator<_Iterator>::_Unchecked_type
  _Unchecked(unchecked_array_iterator<_Iterator> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator>&
  _Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
   typename unchecked_array_iterator<_Iterator>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> operator+(
  typename unchecked_array_iterator<_Iterator>::difference_type _Off,
  unchecked_array_iterator<_Iterator> _Next)
 {
 return (_Next += _Off);
 }

template<class _Iterator> inline
 unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
  _Iterator _Ptr)
 {
 return (unchecked_array_iterator<_Iterator>(_Ptr));
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4189)
#pragma warning(disable: 4172)

namespace std {

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef ctype<_Elem> _Ctype;
 typedef basic_istream<_Elem, _Traits> _Myis;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr);

 if (_Ok)
  {
  const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
  _Str.erase();

  try {
  _Mysizt _Size = 0 < _Istr.width()
   && (_Mysizt)_Istr.width() < _Str.max_size()
    ? (_Mysizt)_Istr.width() : _Str.max_size();
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
   if(_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Ctype_fac.is(_Ctype::space,
    _Traits::to_char_type(_Meta)))
    break;
   else
    {
    _Str.append(1, _Traits::to_char_type(_Meta));
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 _Istr.width(0);
 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 typedef basic_istream<_Elem, _Traits> _Myis;

 ios_base::iostate _State = ios_base::goodbit;
 bool _Changed = false;
 const typename _Myis::sentry _Ok(_Istr, true);

 if (_Ok)
  {
  try {
  _Str.erase();
  const typename _Traits::int_type _Metadelim =
   _Traits::to_int_type(_Delim);
  typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

  for (; ; _Meta = _Istr.rdbuf()->snextc())
   if (_Traits::eq_int_type(_Traits::eof(), _Meta))
    {
    _State |= ios_base::eofbit;
    break;
    }
   else if (_Traits::eq_int_type(_Meta, _Metadelim))
    {
    _Changed = true;
    _Istr.rdbuf()->sbumpc();
    break;
    }
   else if (_Str.max_size() <= _Str.size())
    {
    _State |= ios_base::failbit;
    break;
    }
   else
    {
    _Str += _Traits::to_char_type(_Meta);
    _Changed = true;
    }
  } catch (...) { (_Istr).setstate(ios_base::badbit, true); }
  }

 if (!_Changed)
  _State |= ios_base::failbit;
 _Istr.setstate(_State);
 return (_Istr);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>&& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(_Istr, _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& operator>>(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: move(_Istr) >> _Str);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str,
  const _Elem _Delim)
 {
 return (getline(::std:: move(_Istr), _Str, _Delim));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_istream<_Elem, _Traits>& getline(
  basic_istream<_Elem, _Traits>& _Istr,
  basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 basic_ostream<_Elem, _Traits>& operator<<(
  basic_ostream<_Elem, _Traits>& _Ostr,
  const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 typedef basic_ostream<_Elem, _Traits> _Myos;
 typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
 typedef typename _Mystr::size_type _Mysizt;

 ios_base::iostate _State = ios_base::goodbit;
 _Mysizt _Size = _Str.size();
 _Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
  ? 0 : (_Mysizt)_Ostr.width() - _Size;
 const typename _Myos::sentry _Ok(_Ostr);

 if (!_Ok)
  _State |= ios_base::badbit;
 else
  {
 try {
  if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }

  if (_State == ios_base::goodbit
   && _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)
    != (streamsize)_Size)
    _State |= ios_base::badbit;
  else
   for (; 0 < _Pad; --_Pad)
    if (_Traits::eq_int_type(_Traits::eof(),
     _Ostr.rdbuf()->sputc(_Ostr.fill())))
     {
     _State |= ios_base::badbit;
     break;
     }
  _Ostr.width(0);
  } catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
  }

 _Ostr.setstate(_State);
 return (_Ostr);
 }
#line 226 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string"
inline int stoi(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: strtol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: strtoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _Longlong stoll(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 char *_Eptr;
 (*_errno()) = 0;
 _Longlong _Ans = :: _strtoi64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _ULonglong stoull(const string& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 _ULonglong _Ans = :: _strtoui64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 float _Ans = (float):: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const string& _Str, size_t *_Idx = 0)
 {
 const char *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 char *_Eptr;
 long double _Ans = :: strtod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }


inline int stoi(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoi argument");
 if ((*_errno()) == 34 || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
  _Xout_of_range("stoi argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return ((int)_Ans);
 }

inline long stol(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 long _Ans = :: wcstol(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stol argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stol argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 unsigned long _Ans = :: wcstoul(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoul argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoul argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _Longlong stoll(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 wchar_t *_Eptr;
 (*_errno()) = 0;
 _Longlong _Ans = :: _wcstoi64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoll argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoll argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline _ULonglong stoull(const wstring& _Str, size_t *_Idx = 0,
 int _Base = 10)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 _ULonglong _Ans = :: _wcstoui64(_Ptr, &_Eptr, _Base);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stoull argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stoull argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline float stof(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 float _Ans = (float):: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stof argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stof argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline double stod(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stod argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stod argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
 {
 const wchar_t *_Ptr = _Str.c_str();
 (*_errno()) = 0;
 wchar_t *_Eptr;
 long double _Ans = :: wcstod(_Ptr, &_Eptr);

 if (_Ptr == _Eptr)
  _Xinvalid_argument("invalid stold argument");
 if ((*_errno()) == 34)
  _Xout_of_range("stold argument out of range");
 if (_Idx != 0)
  *_Idx = (size_t)(_Eptr - _Ptr);
 return (_Ans);
 }
#line 500 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string"
inline string to_string(int _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%d", _Val);
 return (string(_Buf));
 }

inline string to_string(unsigned int _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%u", _Val);
 return (string(_Buf));
 }

inline string to_string(long _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%ld", _Val);
 return (string(_Buf));
 }

inline string to_string(unsigned long _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%lu", _Val);
 return (string(_Buf));
 }

inline string to_string(_Longlong _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%I64" "d", _Val);
 return (string(_Buf));
 }

inline string to_string(_ULonglong _Val)
 {
 char _Buf[2 * 32];

 :: sprintf_s(_Buf, sizeof (_Buf), "%I64" "u", _Val);
 return (string(_Buf));
 }

inline string to_string(long double _Val)
 {
 typedef back_insert_iterator<string> _Iter;
 typedef num_put<char, _Iter> _Nput;
 const _Nput& _Nput_fac = use_facet<_Nput>(locale());
 ostream _Ios((streambuf *)0);
 string _Str;

 _Ios.setf(ios_base::fixed);
 _Nput_fac.put(_Iter(_Str), _Ios, ' ', _Val);
 return (_Str);
 }

inline string to_string(double _Val)
 {
 return (to_string((long double)_Val));
 }

inline string to_string(float _Val)
 {
 return (to_string((long double)_Val));
 }
#line 578 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string"
inline wstring to_wstring(int _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%d", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(unsigned int _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%u", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(long _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%ld", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(unsigned long _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%lu", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(_Longlong _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%I64" L"d", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(_ULonglong _Val)
 {
 wchar_t _Buf[2 * 32];

 :: swprintf_s(_Buf, sizeof (_Buf) / sizeof (wchar_t), L"%I64" L"u", _Val);
 return (wstring(_Buf));
 }

inline wstring to_wstring(long double _Val)
 {
 typedef back_insert_iterator<wstring> _Iter;
 typedef num_put<wchar_t, _Iter> _Nput;
 const _Nput& _Nput_fac = use_facet<_Nput>(locale());
 ostream _Ios((streambuf *)0);
 wstring _Str;

 _Ios.setf(ios_base::fixed);
 _Nput_fac.put(_Iter(_Str), _Ios, L' ', _Val);
 return (_Str);
 }

inline wstring to_wstring(double _Val)
 {
 return (to_wstring((long double)_Val));
 }

inline wstring to_wstring(float _Val)
 {
 return (to_wstring((long double)_Val));
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 3 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../Sender/ISendr.h"


struct ISendr
{
 virtual void sendMessage(const std::string& msg) = 0;
};
#line 36 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/ChannelFactory.h"

#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../Receiver/IRecvr.h"




struct IRecvr
{
 virtual std::string getMessage() = 0;
};
#line 37 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/ChannelFactory.h"

#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/ISendHandler.h"
#line 29 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/ISendHandler.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\memory"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory"







#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4700)

namespace std {

template<class _Ty> inline
 pair<_Ty *, ptrdiff_t>

  get_temporary_buffer(ptrdiff_t _Count) throw ()

 {
 _Ty *_Pbuf;

 if (_Count < 0)
  _Count = 0;
 else if (((size_t)(-1) / sizeof (_Ty) < _Count))
  _Xbad_alloc();
 for (_Pbuf = 0; 0 < _Count; _Count /= 2)
  if ((_Pbuf = (_Ty *)operator new(
   (size_t)_Count * sizeof (_Ty), nothrow)) != 0)
   break;

 return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
 }


template<class _Ty> inline
 void return_temporary_buffer(_Ty *_Pbuf)
 {
 operator delete(_Pbuf);
 }


template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, input_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 _Construct(&*_Dest, *_First);
 while (0 < --_Count)
  _Construct(&*++_Dest, *++_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (++_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, forward_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; 0 < _Count; --_Count, ++_Dest, ++_First)
  _Construct(&*_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Iter_cat(_First)));
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy_n(_First, _Count,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _Diff,
 class _FwdIt> inline
 _FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
  _FwdIt _Dest)
 {
 if (_Count <= 0)
  return (_Dest);
 else
  return (_Rechecked(_Dest,
   _Uninitialized_copy_n(_Unchecked(_First), _Count,
    _Unchecked(_Dest))));
 }
#line 251 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory"
template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
 {
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Construct(&*_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest, _Scalar_ptr_iterator_tag)
 {
 ptrdiff_t _Count = _Last - _First;
 :: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First));
 return (_Dest + _Count);
 }

template<class _InIt,
 class _FwdIt> inline
 _FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Uninitialized_copy0(_First, _Last,
  _Dest, _Ptr_cat(_First, _Dest)));
 }


template<class _InIt,
 class _FwdIt> inline
 _FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
  _FwdIt _Dest)
 {
 return (_Rechecked(_Dest,
  _Uninitialized_copy0(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest))));
 }
#line 366 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xmemory"
template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Nonscalar_ptr_iterator_tag)
 {
                            ;
                      ;
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Al.construct(_Dest, *_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_copy(_First, _Last, _Dest,
  _Al, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2> inline
 _Ty2 *_Uninit_copy(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<allocator<_Ty2> >&, _Scalar_ptr_iterator_tag)
 {
                            ;
                      ;
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_copy(_First, _Last, _Dest, _Al,
  _Ptr_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Rechecked(_Dest,
  _Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
 {
                            ;
                      ;
 _FwdIt _Next = _Dest;

 try {
 for (; _First != _Last; ++_Dest, ++_First)
  _Al.construct(_Dest, (_Valty&&)*_First);
 } catch (...) {
 for (; _Next != _Dest; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 return (_Dest);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc,
 class _Valty> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
 {
 return (_Uninit_move(_First, _Last, _Dest,
  _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));
 }

template<class _Ty1,
 class _Ty2,
 class _Valty> inline
 _Ty2 *_Uninit_move(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
  _Wrap_alloc<allocator<_Ty2> >&, _Valty *, _Scalar_ptr_iterator_tag)
 {
                            ;
                      ;
 size_t _Count = (size_t)(_Last - _First);
 return ((_Ty2 *):: memmove(&*_Dest, &*_First,
  _Count * sizeof (*_First)) + _Count);
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Uninit_move(_First, _Last, _Dest, _Al,
  _Val_type(_First), _Ptr_cat(_First, _Dest)));
 }

template<class _InIt,
 class _FwdIt,
 class _Alloc> inline
 _FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
  _Alloc& _Al)
 {
 return (_Rechecked(_Dest,
  _Uninit_move(_Unchecked(_First), _Unchecked(_Last),
   _Unchecked(_Dest), _Al)));
 }


template<class _FwdIt,
 class _Tval> inline
 void _Uninit_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {
                            ;
 _FwdIt _Next = _First;

 try {
 for (; _First != _Last; ++_First)
  _Construct(&*_First, _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(&*_Next);
 throw;
 }
 }

template<class _Ty,
 class _Tval> inline
 void _Uninit_fill(_Ty *_First, _Ty *_Last, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 ::std:: fill(_First, _Last, _Val);
 }

template<class _FwdIt,
 class _Tval> inline
 void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
 {
 _Uninit_fill(_First, _Last, _Val, _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt _Uninit_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val,
  _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)
  _Construct(&*_First, _Val);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Destroy(&*_Next);
 throw;
 }

 return (_First);
 }

template<class _Ty,
 class _Diff,
 class _Tval> inline
 _Ty *_Uninit_fill_n(_Ty *_First, _Diff _Count, const _Tval& _Val,
  _Scalar_ptr_iterator_tag)
 {
 return (_Fill_n(_First, _Count, _Val));
 }

template<class _FwdIt,
 class _Diff,
 class _Tval> inline
 _FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval& _Val)
 {
 return (_Uninit_fill_n(_First, _Count, _Val, _Ptr_cat(_First, _First)));
 }


template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
   _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)
  _Al.construct(_First, *_Pval);
 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc,
 class _Valty> inline
 void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<_Alloc>& _Al,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_fill_n(_First, _Count,
  _Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Tval,
 class _Valty> inline
 void _Uninit_fill_n(_Ty *_First, _Diff _Count,
  const _Tval *_Pval, _Wrap_alloc<allocator<_Ty> >&,
   _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, *_Pval);
 }

template<class _FwdIt,
 class _Diff,
 class _Tval,
 class _Alloc> inline
 void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
  const _Tval *_Pval, _Alloc& _Al)
 {
 _Uninit_fill_n(_First, _Count, _Pval, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _FwdIt,
 class _Diff,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
 {





 _FwdIt _Next = _First;

 try {
 for (; 0 < _Count; --_Count, ++_First)

  _Al.construct(_First);

 } catch (...) {
 for (; _Next != _First; ++_Next)
  _Al.destroy(_Next);
 throw;
 }
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc,
 class _Valty> inline
 void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
  _Wrap_alloc<_Alloc>& _Al, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Uninit_def_fill_n(_First, _Count,
  _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
 }

template<class _Ty,
 class _Diff,
 class _Valty> inline
 void _Uninit_def_fill_n(_Ty *_First, _Diff _Count,
  _Wrap_alloc<allocator<_Ty> >&, _Valty *, _Scalar_ptr_iterator_tag)
 {
 _Fill_n(_First, _Count, (_Valty)0);
 }

template<class _FwdIt,
 class _Diff,
 class _Alloc> inline
 void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
  _Alloc& _Al)
 {
 _Uninit_def_fill_n(_First, _Count, _Al,
  _Val_type(_First), _Ptr_cat(_First, _First));
 }


template<class _OutIt,
 class _Ty>
 class raw_storage_iterator
  : public _Outit
 {
public:
 typedef _OutIt iterator_type;
 typedef _OutIt iter_type;
 typedef _Ty element_type;

 explicit raw_storage_iterator(_OutIt _First)
  : _Next(_First)
  {
  }

 raw_storage_iterator<_OutIt, _Ty>& operator*()
  {
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty>& operator=(const _Ty& _Val)
  {
  _Construct(&*_Next, _Val);
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty>& operator++()
  {
  ++_Next;
  return (*this);
  }

 raw_storage_iterator<_OutIt, _Ty> operator++(int)
  {
  raw_storage_iterator<_OutIt, _Ty> _Ans = *this;
  ++_Next;
  return (_Ans);
  }

private:
 _OutIt _Next;
 };


template<class _Ty>
 class _Temp_iterator
  : public _Outit
 {
public:
 typedef _Ty *_Pty;

 _Temp_iterator(ptrdiff_t _Count = 0)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = _Count;
  _Pbuf = &_Buf;
  }

 _Temp_iterator(const _Temp_iterator<_Ty>& _Right)
  {
  _Buf._Begin = 0;
  _Buf._Current = 0;
  _Buf._Hiwater = 0;
  _Buf._Size = 0;
  *this = _Right;
  }

 ~_Temp_iterator() throw ()
  {
  if (_Buf._Begin != 0)
   {
   for (_Pty _Next = _Buf._Begin;
    _Next != _Buf._Hiwater; ++_Next)
    _Destroy(&*_Next);
   ::std:: return_temporary_buffer(_Buf._Begin);
   }
  }

 _Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _Right)
  {
  _Pbuf = _Right._Pbuf;
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(const _Ty& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ = _Val;
  else
   {
   _Pty _Ptr = &*_Pbuf->_Current;
   _Construct(_Ptr, _Val);
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator=(_Ty&& _Val)
  {
  if (_Pbuf->_Current < _Pbuf->_Hiwater)
   *_Pbuf->_Current++ =
    ::std:: forward<_Ty>(_Val);
  else
   {
   _Pty _Ptr = &*_Pbuf->_Current;
   _Construct(_Ptr, ::std:: forward<_Ty>(_Val));
   _Pbuf->_Hiwater = ++_Pbuf->_Current;
   }
  return (*this);
  }

 _Temp_iterator<_Ty>& operator*()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++()
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& operator++(int)
  {
  return (*this);
  }

 _Temp_iterator<_Ty>& _Init()
  {
  _Pbuf->_Current = _Pbuf->_Begin;
  return (*this);
  }

 _Pty _First() const
  {
  return (_Pbuf->_Begin);
  }

 _Pty _Last() const
  {
  return (_Pbuf->_Current);
  }

 ptrdiff_t _Maxlen()
  {
  if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
   {
   pair<_Pty, ptrdiff_t> _Pair =

    ::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

   _Pbuf->_Begin = _Pair.first;
   _Pbuf->_Current = _Pair.first;
   _Pbuf->_Hiwater = _Pair.first;
   _Pbuf->_Size = _Pair.second;
   }
  return (_Pbuf->_Size);
  }

private:
 struct _Bufpar
  {
  _Pty _Begin;
  _Pty _Current;
  _Pty _Hiwater;
  ptrdiff_t _Size;
  };
 _Bufpar _Buf;
 _Bufpar *_Pbuf;
 };


template<class _Ty>
 class auto_ptr;

template<class _Ty>
 struct auto_ptr_ref
  {
 explicit auto_ptr_ref(_Ty *_Right)
  : _Ref(_Right)
  {
  }

 _Ty *_Ref;
 };

template<class _Ty>
 class auto_ptr
  {
public:
 typedef auto_ptr<_Ty> _Myt;
 typedef _Ty element_type;

 explicit auto_ptr(_Ty *_Ptr = 0) throw ()
  : _Myptr(_Ptr)
  {
  }

 auto_ptr(_Myt& _Right) throw ()
  : _Myptr(_Right.release())
  {
  }

 auto_ptr(auto_ptr_ref<_Ty> _Right) throw ()
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  _Myptr = _Ptr;
  }

 template<class _Other>
  operator auto_ptr<_Other>() throw ()
  {
  return (auto_ptr<_Other>(*this));
  }

 template<class _Other>
  operator auto_ptr_ref<_Other>() throw ()
  {
  _Other *_Cvtptr = _Myptr;
  auto_ptr_ref<_Other> _Ans(_Cvtptr);
  _Myptr = 0;
  return (_Ans);
  }

 template<class _Other>
  _Myt& operator=(auto_ptr<_Other>& _Right) throw ()
  {
  reset(_Right.release());
  return (*this);
  }

 template<class _Other>
  auto_ptr(auto_ptr<_Other>& _Right) throw ()
  : _Myptr(_Right.release())
  {
  }

 _Myt& operator=(_Myt& _Right) throw ()
  {
  reset(_Right.release());
  return (*this);
  }

 _Myt& operator=(auto_ptr_ref<_Ty> _Right) throw ()
  {
  _Ty *_Ptr = _Right._Ref;
  _Right._Ref = 0;
  reset(_Ptr);
  return (*this);
  }

 ~auto_ptr() throw ()
  {
  delete _Myptr;
  }

 _Ty& operator*() const throw ()
  {





  return (*get());
  }

 _Ty *operator->() const throw ()
  {





  return (get());
  }

 _Ty *get() const throw ()
  {
  return (_Myptr);
  }

 _Ty *release() throw ()
  {
  _Ty *_Tmp = _Myptr;
  _Myptr = 0;
  return (_Tmp);
  }

 void reset(_Ty *_Ptr = 0)
  {
  if (_Ptr != _Myptr)
   delete _Myptr;
  _Myptr = _Ptr;
  }

private:
 _Ty *_Myptr;
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\memory"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdint.h"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdint.h"


typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;
#line 53 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdint.h"
typedef long long intmax_t;
typedef unsigned long long uintmax_t;
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\memory"
#line 17 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\memory"
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 28197)

namespace std {
template<class _Ty>
 struct default_delete;

template<class _Ty,
 class _Dx = default_delete<_Ty> >
 class unique_ptr;


class bad_weak_ptr
 : public ::std:: exception
 {
public:
 explicit bad_weak_ptr(const char * = 0) throw ()
  {
  }

 virtual const char * what() const throw()
  {
  return ("bad_weak_ptr");
  }
 };


class _Ref_count_base
 {
private:
 virtual void _Destroy() = 0;
 virtual void _Delete_this() = 0;

private:
 _Atomic_counter_t _Uses;
 _Atomic_counter_t _Weaks;

protected:
 _Ref_count_base()
  {
  _Init_atomic_counter(_Uses, 1);
  _Init_atomic_counter(_Weaks, 1);
  }

public:
 virtual ~_Ref_count_base() throw ()
  {
  }

 bool _Incref_nz()
  {
  for (; ; )
   {

   _Atomic_integral_t _Count =
    static_cast<volatile _Atomic_counter_t&>(_Uses);

   if (_Count == 0)
    return (false);

   if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
     reinterpret_cast<volatile long *>(&_Uses),
     _Count + 1, _Count)) == _Count)
    return (true);
#line 96 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\memory"
   }
  }

 unsigned int _Get_uses() const
  {
  return (_Get_atomic_count(_Uses));
  }

 void _Incref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
  }

 void _Incwref()
  {
  _InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
  }

 void _Decref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
   {
   _Destroy();
   _Decwref();
   }
  }

 void _Decwref()
  {
  if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
   _Delete_this();
  }

 long _Use_count() const
  {
  return (_Get_uses());
  }

 bool _Expired() const
  {
  return (_Get_uses() == 0);
  }

 virtual void *_Get_deleter(const type_info&) const
  {
  return (0);
  }
 };


template<class _Ty>
 class _Ref_count
 : public _Ref_count_base
 {
public:
 _Ref_count(_Ty *_Px)
  : _Ref_count_base(), _Ptr(_Px)
  {
  }

private:
 virtual void _Destroy()
  {
  delete _Ptr;
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 _Ty * _Ptr;
 };


template<class _Ty,
 class _Dx>
 class _Ref_count_del
 : public _Ref_count_base
 {
public:
 _Ref_count_del(_Ty *_Px, _Dx _Dt)
  : _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt)
  {
  }

 virtual void *_Get_deleter(const type_info& _Typeid) const
  {
  return ((void *)(_Typeid == typeid(_Dx) ? &_Dtor : 0));
  }

private:
 virtual void _Destroy()
  {
  _Dtor(_Ptr);
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 _Ty * _Ptr;
 _Dx _Dtor;
 };


template<class _Ty,
 class _Dx,
 class _Alloc>
 class _Ref_count_del_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myty;
 typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

 _Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, _Myalty _Al)
  : _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt), _Myal(_Al)
  {
  }

 virtual void *_Get_deleter(const type_info& _Typeid) const
  {
  return ((void *)(_Typeid == typeid(_Dx) ? &_Dtor : 0));
  }

private:
 virtual void _Destroy()
  {
  _Dtor(_Ptr);
  }

 virtual void _Delete_this()
  {
  _Myalty _Al = _Myal;
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 _Ty * _Ptr;
 _Dx _Dtor;
 _Myalty _Myal;
 };


template<class _Ty>
 class weak_ptr;
template<class _Ty>
 class shared_ptr;
template<class _Ty>
 class enable_shared_from_this;
struct _Static_tag {};
struct _Const_tag {};
struct _Dynamic_tag {};
template<class _Ty1,
 class _Ty2>
 void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
  _Ref_count_base *);

template<class _Ty>
 inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
  typename _Ty::_EStype * = 0)
 {
 if (_Ptr)
  _Do_enable(_Ptr,
   (enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
 }

inline void _Enable_shared(const volatile void *, const volatile void *)
 {
 }


template<class _Ty>
 class _Ptr_base
 {
public:
 typedef _Ptr_base<_Ty> _Myt;
 typedef _Ty element_type;

 _Ptr_base()
  : _Ptr(0), _Rep(0)
  {
  }

 _Ptr_base(_Myt&& _Right)
  : _Ptr(0), _Rep(0)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 template<class _Ty2>
  _Ptr_base(_Ptr_base<_Ty2>&& _Right)
  : _Ptr(_Right._Ptr), _Rep(_Right._Rep)
  {
  _Right._Ptr = 0;
  _Right._Rep = 0;
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  if (this != &_Right)
   _Swap(_Right);
  }

 long use_count() const throw ()
  {
  return (_Rep ? _Rep->_Use_count() : 0);
  }

 void _Swap(_Ptr_base& _Right)
  {
  ::std:: swap(_Rep, _Right._Rep);
  ::std:: swap(_Ptr, _Right._Ptr);
  }

 template<class _Ty2>
  bool owner_before(const _Ptr_base<_Ty2>& _Right) const
  {
  return (_Rep < _Right._Rep);
  }

 void *_Get_deleter(const type_info& _Typeid) const
  {
  return (_Rep ? _Rep->_Get_deleter(_Typeid) : 0);
  }

 _Ty *_Get() const
  {
  return (_Ptr);
  }

 bool _Expired() const
  {
  return (!_Rep || _Rep->_Expired());
  }

 void _Decref()
  {
  if (_Rep != 0)
   _Rep->_Decref();
  }

 void _Reset()
  {
  _Reset(0, 0);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
  {
  _Reset(_Other._Ptr, _Other._Rep, _Throw);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Static_tag&)
  {
  _Reset(static_cast<_Ty *>(_Other._Ptr), _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Const_tag&)
  {
  _Reset(const_cast<_Ty *>(_Other._Ptr), _Other._Rep);
  }

 template<class _Ty2>
  void _Reset(const _Ptr_base<_Ty2>& _Other, const _Dynamic_tag&)
  {
  _Ty *_Ptr = dynamic_cast<_Ty *>(_Other._Ptr);
  if (_Ptr)
   _Reset(_Ptr, _Other._Rep);
  else
   _Reset();
  }

 template<class _Ty2>
  void _Reset(auto_ptr<_Ty2>&& _Other)
  {
  _Ty2 *_Px = _Other.get();
  _Reset0(_Px, new _Ref_count<_Ty>(_Px));
  _Other.release();
  _Enable_shared(_Px, _Rep);
  }

 template<class _Ty2>
  void _Reset(_Ty *_Ptr, const _Ptr_base<_Ty2>& _Other)
  {
  _Reset(_Ptr, _Other._Rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incref();
  _Reset0(_Other_ptr, _Other_rep);
  }

 void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
  {


  if (_Other_rep && _Other_rep->_Incref_nz())
   _Reset0(_Other_ptr, _Other_rep);
  else if (_Throw)
   throw bad_weak_ptr(0);
  }

 void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Rep != 0)
   _Rep->_Decref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

 void _Decwref()
  {
  if (_Rep != 0)
   _Rep->_Decwref();
  }

 void _Resetw()
  {
  _Resetw((_Ty *)0, 0);
  }

 template<class _Ty2>
  void _Resetw(const _Ptr_base<_Ty2>& _Other)
  {
  _Resetw(_Other._Ptr, _Other._Rep);
  }

 template<class _Ty2>
  void _Resetw(const _Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  _Resetw(const_cast<_Ty2*>(_Other_ptr), _Other_rep);
  }

 template<class _Ty2>
  void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
  {
  if (_Other_rep)
   _Other_rep->_Incwref();
  if (_Rep != 0)
   _Rep->_Decwref();
  _Rep = _Other_rep;
  _Ptr = _Other_ptr;
  }

private:
 _Ty *_Ptr;
 _Ref_count_base *_Rep;
 template<class _Ty0>
  friend class _Ptr_base;
 };


template<class _Ty>
 class shared_ptr
  : public _Ptr_base<_Ty>
 {
public:
 typedef shared_ptr<_Ty> _Myt;
 typedef _Ptr_base<_Ty> _Mybase;

 shared_ptr() throw ()
  {
  }

 template<class _Ux>
  explicit shared_ptr(_Ux *_Px)
  {
  _Resetp(_Px);
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(_Ux *_Px, _Dx _Dt)
  {
  _Resetp(_Px, _Dt);
  }

 shared_ptr(nullptr_t)
  {
  }

 template<class _Dx>
  shared_ptr(nullptr_t, _Dx _Dt)
  {
  _Resetp((_Ty *)0, _Dt);
  }

 template<class _Dx,
  class _Alloc>
  shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp((_Ty *)0, _Dt, _Ax);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  _Resetp(_Px, _Dt, _Ax);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px) throw ()
  {
  this->_Reset(_Px, _Right);
  }

 shared_ptr(const _Myt& _Other) throw ()
  {
  this->_Reset(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(const shared_ptr<_Ty2>& _Other) throw ()
  {
  this->_Reset(_Other);
  }

 template<class _Ty2>
  explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
   bool _Throw = true)
  {
  this->_Reset(_Other, _Throw);
  }

 template<class _Ty2>
  shared_ptr(auto_ptr<_Ty2>&& _Other)
  {
  this->_Reset(::std:: move(_Other));
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Static_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Const_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 template<class _Ty2>
  shared_ptr(const shared_ptr<_Ty2>& _Other, const _Dynamic_tag& _Tag)
  {
  this->_Reset(_Other, _Tag);
  }

 shared_ptr(_Myt&& _Right) throw ()
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  shared_ptr(shared_ptr<_Ty2>&& _Right) throw ()
  : _Mybase(::std:: forward<shared_ptr<_Ty2> >(_Right))
  {
  }

 template<class _Ux,
  class _Dx>
  shared_ptr(unique_ptr<_Ux, _Dx>&& _Right)
  {
  _Resetp(_Right.release(), _Right.get_deleter());
  }

 template<class _Ux,
  class _Dx>
  _Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(shared_ptr<_Ty2>&& _Right) throw ()
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 ~shared_ptr() throw ()
  {
  this->_Decref();
  }

 _Myt& operator=(const _Myt& _Right) throw ()
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(const shared_ptr<_Ty2>& _Right) throw ()
  {
  shared_ptr(_Right).swap(*this);
  return (*this);
  }

 template<class _Ty2>
  _Myt& operator=(auto_ptr<_Ty2>&& _Right)
  {
  shared_ptr(::std:: move(_Right)).swap(*this);
  return (*this);
  }

 void reset() throw ()
  {
  shared_ptr().swap(*this);
  }

 template<class _Ux>
  void reset(_Ux *_Px)
  {
  shared_ptr(_Px).swap(*this);
  }

 template<class _Ux,
  class _Dx>
  void reset(_Ux *_Px, _Dx _Dt)
  {
  shared_ptr(_Px, _Dt).swap(*this);
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  shared_ptr(_Px, _Dt, _Ax).swap(*this);
  }

 void swap(_Myt& _Other) throw ()
  {
  this->_Swap(_Other);
  }

 _Ty *get() const throw ()
  {
  return (this->_Get());
  }

 typename add_reference<_Ty>::type operator*() const throw ()
  {
  return (*this->_Get());
  }

 _Ty *operator->() const throw ()
  {
  return (this->_Get());
  }

 bool unique() const throw ()
  {
  return (this->use_count() == 1);
  }

 explicit operator bool() const throw ()
  {
  return (this->_Get() != 0);
  }

private:
 template<class _Ux>
  void _Resetp(_Ux *_Px)
  {
  try {
  _Resetp0(_Px, new _Ref_count<_Ux>(_Px));
  } catch (...) {
  delete _Px;
  throw;
  }
  }

 template<class _Ux,
  class _Dx>
  void _Resetp(_Ux *_Px, _Dx _Dt)
  {
  try {
  _Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

 template<class _Ux,
  class _Dx,
  class _Alloc>
  void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
  {
  typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
  typename _Alloc::template rebind<_Refd>::other _Al = _Ax;

  try {
  _Refd *_Ptr = _Al.allocate(1);
  ::new (_Ptr) _Refd(_Px, _Dt, _Al);
  _Resetp0(_Px, _Ptr);
  } catch (...) {
  _Dt(_Px);
  throw;
  }
  }

public:
 template<class _Ux>
  void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
  {
  this->_Reset0(_Px, _Rx);
  _Enable_shared(_Px, _Rx);
  }
 };

template<class _Ty1,
 class _Ty2>
 bool operator==(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Ty2>
 bool operator!=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator<(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (less<decltype(_Always_false<_Ty1>::value
  ? _Left.get() : _Right.get())>()(
   _Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Ty2>
 bool operator>(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Ty2>
 bool operator<=(const shared_ptr<_Ty1>& _Left,
  const shared_ptr<_Ty2>& _Right) throw ()
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator==(const shared_ptr<_Ty>& _Left,
  nullptr_t) throw ()
 {
 return (_Left.get() == (_Ty *)0);
 }

template<class _Ty>
 bool operator==(nullptr_t,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return ((_Ty *)0 == _Right.get());
 }

template<class _Ty>
 bool operator!=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator!=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty>
 bool operator<(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (less<_Ty *>()(_Left.get(), (_Ty *)0));
 }

template<class _Ty>
 bool operator<(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (less<_Ty *>()((_Ty *)0, _Right.get()));
 }

template<class _Ty>
 bool operator>=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (!(_Left < _Right));
 }

template<class _Ty>
 bool operator>(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator>(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (_Right < _Left);
 }

template<class _Ty>
 bool operator<=(const shared_ptr<_Ty>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Right < _Left));
 }

template<class _Ty>
 bool operator<=(nullptr_t _Left,
  const shared_ptr<_Ty>& _Right) throw ()
 {
 return (!(_Right < _Left));
 }

template<class _Elem,
 class _Traits,
 class _Ty>
 basic_ostream<_Elem, _Traits>&
 operator<<(basic_ostream<_Elem, _Traits>& _Out,
  const shared_ptr<_Ty>& _Px)
 {
 return (_Out << _Px.get());
 }

template<class _Ty>
 void swap(shared_ptr<_Ty>& _Left,
  shared_ptr<_Ty>& _Right) throw ()
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  static_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
 {
 return (shared_ptr<_Ty1>(_Other, _Static_tag()));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  const_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
 {
 return (shared_ptr<_Ty1>(_Other, _Const_tag()));
 }

template<class _Ty1,
 class _Ty2>
 shared_ptr<_Ty1>
  dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) throw ()
 {
 return (shared_ptr<_Ty1>(_Other, _Dynamic_tag()));
 }

template<class _Dx,
 class _Ty>
 _Dx *get_deleter(const shared_ptr<_Ty>& _Sx) throw ()
 {
 return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
 }


template<class _Ty>
 class _Ref_count_obj
 : public _Ref_count_base
 {
public:
 template<class... _Types>
  _Ref_count_obj(_Types&&... _Args)
  : _Ref_count_base()
  {
  ::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy()
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this()
  {
  delete this;
  }

 typename aligned_storage<sizeof (_Ty),
  alignment_of<_Ty>::value>::type _Storage;
 };


template<class _Ty,
 class _Alloc>
 class _Ref_count_obj_alloc
 : public _Ref_count_base
 {
public:
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myty;
 typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

 template<class... _Types>
  _Ref_count_obj_alloc(_Myalty _Al, _Types&&... _Args)
  : _Ref_count_base(), _Myal(_Al)
  {
  ::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
  }


 _Ty *_Getptr() const
  {
  return ((_Ty *)&_Storage);
  }

private:
 virtual void _Destroy()
  {
  _Getptr()->~_Ty();
  }

 virtual void _Delete_this()
  {
  _Myalty _Al = _Myal;
  _Al.destroy(this);
  _Al.deallocate(this, 1);
  }

 typename aligned_storage<sizeof (_Ty),
  alignment_of<_Ty>::value>::type _Storage;
 _Myalty _Myal;
 };


template<class _Ty,
 class... _Types> inline
  shared_ptr<_Ty> make_shared(_Types&&... _Args)
 {
 _Ref_count_obj<_Ty> *_Rx =
  new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }


template<class _Ty,
 class _Alloc,
 class... _Types> inline
  shared_ptr<_Ty> allocate_shared(
   const _Alloc& _Al_arg, _Types&&... _Args)
 {
 typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
 typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

 _Refoa *_Rx = _Alref.allocate(1);

 try {
  ::new (_Rx) _Refoa(_Al_arg, ::std:: forward<_Types>(_Args)...);
 } catch (...) {
  _Alref.deallocate(_Rx, 1);
 throw;
 }

 shared_ptr<_Ty> _Ret;
 _Ret._Resetp0(_Rx->_Getptr(), _Rx);
 return (_Ret);
 }



template<class _Ty>
 class weak_ptr
  : public _Ptr_base<_Ty>
 {
public:
 weak_ptr() throw ()
  {
  }

 weak_ptr(const weak_ptr& _Other) throw ()
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const shared_ptr<_Ty2>& _Other) throw ()
  {
  this->_Resetw(_Other);
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  weak_ptr(const weak_ptr<_Ty2>& _Other) throw ()
  {
  this->_Resetw(_Other.lock());
  }

 ~weak_ptr() throw ()
  {
  this->_Decwref();
  }

 weak_ptr& operator=(const weak_ptr& _Right) throw ()
  {
  this->_Resetw(_Right);
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) throw ()
  {
  this->_Resetw(_Right.lock());
  return (*this);
  }

 template<class _Ty2>
  weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) throw ()
  {
  this->_Resetw(_Right);
  return (*this);
  }

 void reset() throw ()
  {
  this->_Resetw();
  }

 void swap(weak_ptr& _Other) throw ()
  {
  this->_Swap(_Other);
  }

 bool expired() const throw ()
  {
  return (this->_Expired());
  }

 shared_ptr<_Ty> lock() const throw ()
  {
  return (shared_ptr<_Ty>(*this, false));
  }
 };

template<class _Ty>
 void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2) throw ()
 {
 _W1.swap(_W2);
 }


template<class _Ty>
 class enable_shared_from_this
 {
public:
 typedef _Ty _EStype;

 shared_ptr<_Ty> shared_from_this()
  {
  return (shared_ptr<_Ty>(_Wptr));
  }

 shared_ptr<const _Ty> shared_from_this() const
  {
  return (shared_ptr<const _Ty>(_Wptr));
  }

protected:
 enable_shared_from_this() throw ()
  {
  }

 enable_shared_from_this(const enable_shared_from_this&) throw ()
  {
  }

 enable_shared_from_this&
  operator=(const enable_shared_from_this&) throw ()
  {
  return (*this);
  }

 ~enable_shared_from_this() throw ()
  {
  }

private:
 template<class _Ty1,
  class _Ty2>
  friend void _Do_enable(
   _Ty1 *,
   enable_shared_from_this<_Ty2>*,
   _Ref_count_base *);

 mutable weak_ptr<_Ty> _Wptr;
 };

template<class _Ty1,
 class _Ty2>
 inline void _Do_enable(
  _Ty1 *_Ptr,
  enable_shared_from_this<_Ty2> *_Es,
  _Ref_count_base *_Refptr)
 {
 _Es->_Wptr._Resetw(_Ptr, _Refptr);
 }
}

namespace std {



template<class _Ty>
 struct default_delete
 {
 typedef default_delete<_Ty> _Myt;

 default_delete() throw ()
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
   void>::type>
  default_delete(const default_delete<_Ty2>&) throw ()
  {
  }

 void operator()(_Ty *_Ptr) const throw ()
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete _Ptr;
  }
 };

template<class _Ty>
 struct default_delete<_Ty[]>
 {
 typedef default_delete<_Ty> _Myt;

 default_delete() throw ()
  {
  }

 template<class _Other>
  void operator()(_Other *) const = delete;

 void operator()(_Ty *_Ptr) const throw ()
  {
  static_assert(0 < sizeof (_Ty),
   "can't delete an incomplete type");
  delete[] _Ptr;
  }
 };


template<class _Val,
 class _Ty>
 struct _Get_deleter_pointer_type
 { template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Val *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };



template<class _Ty,
 class _Dx,
 bool _Empty_deleter>
 class _Unique_ptr_base
 {
public:
 typedef typename remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 _Unique_ptr_base(pointer _Ptr, _Dx _Dt)
  : _Myptr(_Ptr), _Mydel(_Dt)
  {
  }

 _Unique_ptr_base(pointer _Ptr)
  : _Myptr(_Ptr)
  {
  }

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
  : _Myptr(_Ptr), _Mydel(_Dt)
  {
  }

 template<class _Ptr2>
  _Unique_ptr_base(_Ptr2 _Ptr)
  : _Myptr(_Ptr)
  {
  }

 _Dx_noref& get_deleter()
  {
  return (_Mydel);
  }

 const _Dx_noref& get_deleter() const
  {
  return (_Mydel);
  }

 pointer _Myptr;
 _Dx _Mydel;
 };

template<class _Ty,
 class _Dx>
 class _Unique_ptr_base<_Ty, _Dx, true>
  : public _Dx
 {
public:
 typedef _Dx _Mybase;
 typedef typename remove_reference<_Dx>::type _Dx_noref;
 typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

 _Unique_ptr_base(pointer _Ptr, _Dx _Dt) throw ()
  : _Myptr(_Ptr), _Mybase(_Dt)
  {
  }

 _Unique_ptr_base(pointer _Ptr) throw ()
  : _Myptr(_Ptr)
  {
  }

 template<class _Ptr2,
  class _Dx2>
  _Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt) throw ()
  : _Myptr(_Ptr), _Mybase(_Dt)
  {
  }

 template<class _Ptr2>
  _Unique_ptr_base(_Ptr2 _Ptr) throw ()
  : _Myptr(_Ptr)
  {
  }

 _Dx_noref& get_deleter() throw ()
  {
  return (*this);
  }

 const _Dx_noref& get_deleter() const throw ()
  {
  return (*this);
  }

 pointer _Myptr;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr
  : private _Unique_ptr_base<_Ty, _Dx,
   is_empty<_Dx>::value
    || is_same<default_delete<_Ty>, _Dx>::value>
 {
public:
 typedef unique_ptr<_Ty, _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx,
  is_empty<_Dx>::value
   || is_same<default_delete<_Ty>, _Dx>::value> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 unique_ptr() throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(nullptr_t) throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) throw ()
  {
  reset();
  return (*this);
  }

 explicit unique_ptr(pointer _Ptr) throw ()
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) throw ()
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) throw ()
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) throw ()
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class _Dx2,
  class = typename enable_if<!is_array<_Ty2>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value
   && ((is_reference<_Dx>::value && is_same<_Dx, _Dx2>::value)
    || (!is_reference<_Dx>::value
     && is_convertible<_Dx2, _Dx>::value)),
   void>::type>
  unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) throw ()
   : _Mybase(_Right.release(),
    ::std:: forward<_Dx2>(_Right.get_deleter()))
  {
  }

 template<class _Ty2,
  class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value
   && is_same<_Dx, default_delete<_Ty> >::value,
   void>::type>
  unique_ptr(auto_ptr<_Ty2>&& _Right) throw ()
   : _Mybase(_Right.release())
  {
  }

 template<class _Ty2,
  class _Dx2>
  typename enable_if<!is_array<_Ty2>::value
   && is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
    pointer>::value,
   _Myt&>::type
  operator=(unique_ptr<_Ty2, _Dx2>&& _Right) throw ()
  {
  reset(_Right.release());
  this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
  return (*this);
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
   }
  return (*this);
  }

 void swap(_Myt& _Right) throw ()
  {
  _Swap_adl(this->_Myptr, _Right._Myptr);
  _Swap_adl(this->get_deleter(),
   _Right.get_deleter());
  }

 ~unique_ptr() throw ()
  {
  if (this->_Myptr != pointer())
   this->get_deleter()(this->_Myptr);
  }

 typename add_reference<_Ty>::type operator*() const
  {
  return (*this->_Myptr);
  }

 pointer operator->() const throw ()
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 pointer get() const throw ()
  {
  return (this->_Myptr);
  }

 explicit operator bool() const throw ()
  {
  return (this->_Myptr != pointer());
  }

 pointer release() throw ()
  {
  pointer _Ans = this->_Myptr;
  this->_Myptr = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) throw ()
  {
  pointer _Old = this->_Myptr;
  this->_Myptr = _Ptr;
  if (_Old != pointer())
   this->get_deleter()(_Old);
  }

 unique_ptr(const _Myt&) = delete;
 _Myt& operator=(const _Myt&) = delete;
 };


template<class _Ty,
 class _Dx>
 class unique_ptr<_Ty[], _Dx>
  : private _Unique_ptr_base<_Ty, _Dx,
   is_empty<_Dx>::value
    || is_same<default_delete<_Ty[]>, _Dx>::value>
 {
public:
 typedef unique_ptr<_Ty[], _Dx> _Myt;
 typedef _Unique_ptr_base<_Ty, _Dx,
  is_empty<_Dx>::value
   || is_same<default_delete<_Ty[]>, _Dx>::value> _Mybase;
 typedef typename _Mybase::pointer pointer;
 typedef _Ty element_type;
 typedef _Dx deleter_type;

 using _Mybase::get_deleter;

 unique_ptr() throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 explicit unique_ptr(pointer _Ptr) throw ()
  : _Mybase(_Ptr)
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 unique_ptr(pointer _Ptr,
  typename _If<is_reference<_Dx>::value, _Dx,
   const typename remove_reference<_Dx>::type&>::type _Dt) throw ()
  : _Mybase(_Ptr, _Dt)
  {
  }

 unique_ptr(pointer _Ptr,
  typename remove_reference<_Dx>::type&& _Dt) throw ()
  : _Mybase(_Ptr, ::std:: move(_Dt))
  {
  static_assert(!is_reference<_Dx>::value,
   "unique_ptr constructed with reference to rvalue deleter");
  }

 unique_ptr(unique_ptr&& _Right) throw ()
  : _Mybase(_Right.release(),
   ::std:: forward<_Dx>(_Right.get_deleter()))
  {
  }

 _Myt& operator=(_Myt&& _Right) throw ()
  {
  if (this != &_Right)
   {
   reset(_Right.release());
   this->get_deleter() = ::std:: move(_Right.get_deleter());
   }
  return (*this);
  }

 unique_ptr(nullptr_t) throw ()
  : _Mybase(pointer())
  {
  static_assert(!is_pointer<_Dx>::value,
   "unique_ptr constructed with null deleter pointer");
  }

 _Myt& operator=(nullptr_t) throw ()
  {
  reset();
  return (*this);
  }

 void reset(nullptr_t) throw ()
  {
  reset();
  }

 void swap(_Myt& _Right) throw ()
  {
  _Swap_adl(this->_Myptr, _Right._Myptr);
  _Swap_adl(this->get_deleter(), _Right.get_deleter());
  }

 ~unique_ptr() throw ()
  {
  _Delete();
  }

 typename add_reference<_Ty>::type operator[](size_t _Idx) const
  {
  return (this->_Myptr[_Idx]);
  }

 pointer get() const throw ()
  {
  return (this->_Myptr);
  }

 explicit operator bool() const throw ()
  {
  return (this->_Myptr != pointer());
  }

 pointer release() throw ()
  {
  pointer _Ans = this->_Myptr;
  this->_Myptr = pointer();
  return (_Ans);
  }

 void reset(pointer _Ptr = pointer()) throw ()
  {
  _Delete();
  this->_Myptr = _Ptr;
  }

 template<class _Ptr2>
  explicit unique_ptr(_Ptr2) = delete;

 template<class _Ptr2,
  class _Dx2>
  unique_ptr(_Ptr2, _Dx2) = delete;

 unique_ptr(const _Myt&) = delete;

 _Myt& operator=(const _Myt&) = delete;

 template<class _Ptr2>
  void reset(_Ptr2) = delete;

private:
 void _Delete()
  {
  if (this->_Myptr != pointer())
   this->get_deleter()(this->_Myptr);
  }
 };


template<class _Ty,
 class... _Types> inline
 typename enable_if<!is_array<_Ty>::value,
  unique_ptr<_Ty> >::type make_unique(_Types&&... _Args)
 {
 return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
 }

template<class _Ty> inline
 typename enable_if<is_array<_Ty>::value && extent<_Ty>::value == 0,
  unique_ptr<_Ty> >::type make_unique(size_t _Size)
 {
 typedef typename remove_extent<_Ty>::type _Elem;
 return (unique_ptr<_Ty>(new _Elem[_Size]()));
 }

template<class _Ty,
 class... _Types>
 typename enable_if<extent<_Ty>::value != 0,
  void>::type make_unique(_Types&&...) = delete;


template<class _Ty,
 class _Dx>
 void swap(unique_ptr<_Ty, _Dx>& _Left,
  unique_ptr<_Ty, _Dx>& _Right) throw ()
 {
 _Left.swap(_Right);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Left.get() == _Right.get());
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
 typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
 typedef typename common_type<_Ptr1, _Ptr2>::type _Common;
 return (less<_Common>()(_Left.get(), _Right.get()));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty1,
 class _Dx1,
 class _Ty2,
 class _Dx2>
 bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
  const unique_ptr<_Ty2, _Dx2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator==(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t) throw ()
 {
 return (!_Left);
 }

template<class _Ty,
 class _Dx>
 bool operator==(nullptr_t,
  const unique_ptr<_Ty, _Dx>& _Right) throw ()
 {
 return (!_Right);
 }

template<class _Ty,
 class _Dx>
 bool operator!=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator!=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right) throw ()
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left.get(), _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator<(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
 return (less<_Ptr>()(_Left, _Right.get()));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class _Ty,
 class _Dx>
 bool operator>(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator>(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Dx>
 bool operator<=(const unique_ptr<_Ty, _Dx>& _Left,
  nullptr_t _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Dx>
 bool operator<=(nullptr_t _Left,
  const unique_ptr<_Ty, _Dx>& _Right)
 {
 return (!(_Right < _Left));
 }



enum class pointer_safety {
 relaxed,
 preferred,
 strict
 };

typedef pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
 {
 }

template<class _Ty> inline
 _Ty *undeclare_reachable(_Ty *_Ptr)
 {
 return (_Ptr);
 }

inline void declare_no_pointers(char *, size_t)
 {
 }

inline void undeclare_no_pointers(char *, size_t)
 {
 }

inline _Pointer_safety get_pointer_safety() throw ()
 {
 return (pointer_safety::relaxed);
 }

namespace tr1 {
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}


template<class _Ty>
 struct owner_less;

template<class _Ty>
 struct owner_less<shared_ptr<_Ty> >
  : public binary_function<shared_ptr<_Ty>, shared_ptr<_Ty>, bool>
 {
 bool operator()(const shared_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };

template<class _Ty>
 struct owner_less<weak_ptr<_Ty> >
  : public binary_function<weak_ptr<_Ty>, weak_ptr<_Ty>, bool>
 {
 bool operator()(const weak_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const weak_ptr<_Ty>& _Left,
  const shared_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }

 bool operator()(const shared_ptr<_Ty>& _Left,
  const weak_ptr<_Ty>& _Right) const
  {
  return (_Left.owner_before(_Right));
  }
 };


template<class _Ty,
 class _Dx>
 struct hash<unique_ptr<_Ty, _Dx> >
  : public unary_function<unique_ptr<_Ty, _Dx>, size_t>
 {
 typedef unique_ptr<_Ty, _Dx> _Kty;
 typedef typename _Kty::pointer _Ptrtype;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (hash<_Ptrtype>()(_Keyval.get()));
  }
 };

template<class _Ty>
 struct hash<shared_ptr<_Ty> >
  : public unary_function<shared_ptr<_Ty>, size_t>
 {
 typedef shared_ptr<_Ty> _Kty;
 typedef _Ty *_Ptrtype;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (hash<_Ptrtype>()(_Keyval.get()));
  }
 };


inline void *align(size_t _Bound, size_t _Size,
 void *& _Ptr, size_t& _Space) throw ()
 {
 size_t _Off = (size_t)((uintptr_t)_Ptr & (_Bound - 1));
 if (0 < _Off)
  _Off = _Bound - _Off;
 if (_Space < _Off || _Space - _Off < _Size)
  return (0);
 else
  {
  _Ptr = (char *)_Ptr + _Off;
  _Space -= _Off;
  return (_Ptr);
  }
 }


struct _Shared_ptr_spin_lock
 {
 _Shared_ptr_spin_lock()
  {
  _Lock_shared_ptr_spin_lock();
  }

 ~_Shared_ptr_spin_lock() throw ()
  {
  _Unlock_shared_ptr_spin_lock();
  }
 };

template <class _Ty> inline
 bool atomic_is_lock_free(const shared_ptr<_Ty> *)
 {
 return (false);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> *_Ptr,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 return (_Result);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> *_Ptr)
 {
 return (atomic_load_explicit(_Ptr, memory_order_seq_cst));
 }

template <class _Ty> inline
 void atomic_store_explicit(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 _Ptr->swap(_Other);
 }

template <class _Ty> inline
 void atomic_store(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 atomic_store_explicit(_Ptr, _Other, memory_order_seq_cst);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_exchange_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
  memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 shared_ptr<_Ty> _Result = *_Ptr;
 _Ptr->swap(_Other);
 return (_Result);
 }

template <class _Ty> inline
 shared_ptr<_Ty> atomic_exchange(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
 {
 return (atomic_exchange_explicit(_Ptr, _Other, memory_order_seq_cst));
 }

template <class _Ty> inline
 bool atomic_compare_exchange_weak_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 _Shared_ptr_spin_lock _Lock;
 bool _Success = _Ptr->get() == _Exp->get();
 if (_Success)
  *_Ptr = _Value;
 else
  {
  *_Exp = *_Ptr;
  }
 return (_Success);
 }

template <class _Ty> inline
 bool atomic_compare_exchange_weak(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
   shared_ptr<_Ty> _Value)
 {
 return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }

template <class _Ty> inline
 bool atomic_compare_exchange_strong_explicit(
  shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
  memory_order, memory_order)
 {
 return (atomic_compare_exchange_weak_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }

template <class _Ty> inline
 bool atomic_compare_exchange_strong(
 shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
  shared_ptr<_Ty> _Value)
 {
 return (atomic_compare_exchange_strong_explicit(_Ptr, _Exp, _Value,
  memory_order_seq_cst, memory_order_seq_cst));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 29 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/ISendHandler.h"

#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/SendCommand.h"
#line 42 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/SendCommand.h"
#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/../MsgMgr/MsgMgr.h"
#line 44 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/../MsgMgr/MsgMgr.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
#pragma warning(disable: 4244)

namespace std {



template<class _Myvec>
 class _Vector_const_iterator
  : public _Iterator012<random_access_iterator_tag,
   typename _Myvec::value_type,
   typename _Myvec::difference_type,
   typename _Myvec::const_pointer,
   typename _Myvec::const_reference,
   _Iterator_base>
 {
public:
 typedef _Vector_const_iterator<_Myvec> _Myiter;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::const_pointer pointer;
 typedef typename _Myvec::const_reference reference;
 typedef typename _Myvec::pointer _Tptr;

 _Vector_const_iterator()
  : _Ptr()
  {
  }

 _Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
  : _Ptr(_Parg)
  {
  this->_Adopt(_Pvector);
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = (_Tptr)_Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
#line 84 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
                                          ;

  return (*this->_Ptr);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
#line 112 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  ++this->_Ptr;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
#line 141 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  --this->_Ptr;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
#line 170 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  _Ptr += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr - _Right._Ptr);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Myiter& _Right) const
  {
  _Compat(_Right);
  return (this->_Ptr < _Right._Ptr);
  }

 bool operator>(const _Myiter& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Myiter& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Myiter& _Right) const
  {
  return (!(*this < _Right));
  }
#line 253 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 void _Compat(const _Myiter&) const
  {
  }


 _Tptr _Ptr;
 };

template<class _Myvec> inline
 typename _Vector_const_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_const_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec>&
  _Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
   typename _Vector_const_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_const_iterator<_Myvec> operator+(
  typename _Vector_const_iterator<_Myvec>::difference_type _Off,
  _Vector_const_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Myvec>
 class _Vector_iterator
  : public _Vector_const_iterator<_Myvec>
 {
public:
 typedef _Vector_iterator<_Myvec> _Myiter;
 typedef _Vector_const_iterator<_Myvec> _Mybase;
 typedef random_access_iterator_tag iterator_category;

 typedef typename _Myvec::value_type value_type;
 typedef typename _Myvec::difference_type difference_type;
 typedef typename _Myvec::pointer pointer;
 typedef typename _Myvec::reference reference;

 _Vector_iterator()
  {
  }

 _Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
  : _Mybase(_Parg, _Pvector)
  {
  }

 typedef pointer _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Myiter& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Myiter operator+(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Myiter& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Myiter operator-(difference_type _Off) const
  {
  _Myiter _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Myvec> inline
 typename _Vector_iterator<_Myvec>::_Unchecked_type
  _Unchecked(_Vector_iterator<_Myvec> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec>&
  _Rechecked(_Vector_iterator<_Myvec>& _Iter,
   typename _Vector_iterator<_Myvec>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }

template<class _Myvec> inline
 _Vector_iterator<_Myvec> operator+(
  typename _Vector_iterator<_Myvec>::difference_type _Off,
  _Vector_iterator<_Myvec> _Next)
 {
 return (_Next += _Off);
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference>
 struct _Vec_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 };

template<class _Ty,
 class _Alloc0>
 struct _Vec_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _Vec_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Alty::pointer _Tptr;
 typedef typename _Alty::template rebind<_Tptr>::other _Alpty;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _Simple_types<typename _Alty::value_type>,
  _Vec_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference> >::type
  _Val_types;
 };


template<class _Val_types>
 class _Vector_val
  : public _Container_base
 {
public:
 typedef _Vector_val<_Val_types> _Myt;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _Vector_iterator<_Myt> iterator;
 typedef _Vector_const_iterator<_Myt> const_iterator;

 _Vector_val()
  {
  _Myfirst = pointer();
  _Mylast = pointer();
  _Myend = pointer();
  }

 pointer _Myfirst;
 pointer _Mylast;
 pointer _Myend;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _Vector_alloc
  : public _Vector_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alty _Alval;

 typedef _Vector_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alty _Alty;


 _Vector_alloc(const _Alloc& _Al = _Alloc())
  : _Alval(_Al)
  {
  }

 void _Change_alloc(const _Alty& _Al)
  {
  this->_Alval = _Al;
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alval, _Right._Alval);
  }
#line 566 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 _Alty& _Getal()
  {
  return (this->_Alval);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alval);
  }
 };

template<class _Alloc_types>
 class _Vector_alloc<false, _Alloc_types>
  : public _Vector_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _Vector_alloc<false, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;

 typedef typename _Alloc_types::_Alty _Alty;


 _Vector_alloc(const _Alloc& = _Alloc())
  {
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt&)
  {
  }
#line 640 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class vector
  : public _Vector_alloc<!is_empty<_Alloc>::value,
   _Vec_base_types<_Ty, _Alloc> >
 {
public:
 typedef vector<_Ty, _Alloc> _Myt;
 typedef _Vector_alloc<!is_empty<_Alloc>::value,
  _Vec_base_types<_Ty, _Alloc> > _Mybase;
 typedef _Alloc allocator_type;

 typedef typename _Mybase::_Alty _Alty;

 typedef typename _Mybase::value_type value_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;




 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 vector()
  : _Mybase()
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  }

 explicit vector(size_type _Count)
  : _Mybase()
  {
  if (_Buy(_Count))
   {
   _Alty _Alval(this->_Getal());
   try {
   _Uninitialized_default_fill_n(this->_Myfirst, _Count, _Alval);
   this->_Mylast += _Count;
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(size_type _Count, const value_type& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, ::std:: addressof(_Val));
  }

 vector(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst);
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  if (_Buy(_Right.size()))
   try {
   this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
    this->_Myfirst);
   } catch (...) {
   _Tidy();
   throw;
   }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>:: type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>:: type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  _Construct(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last, input_iterator_tag)
  {
  try {

  for (; _First != _Last; ++_First)
   emplace_back(*_First);

  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last, forward_iterator_tag)
  {
  if (_Buy(::std:: distance(_First, _Last)))
   {
   try {
   this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 void _Construct_n(size_type _Count, const value_type *_Pval)
  {
  if (_Buy(_Count))
   {
   try {
   this->_Mylast = _Ufill(this->_Myfirst, _Count, _Pval);
   } catch (...) {
   _Tidy();
   throw;
   }
   }
  }

 vector(_Myt&& _Right)
  : _Mybase(_Right._Getal())
  {
  _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   _Tidy();
   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right, true_type)
  {
  this->_Swap_all((_Myt&)_Right);
  this->_Myfirst = _Right._Myfirst;
  this->_Mylast = _Right._Mylast;
  this->_Myend = _Right._Myend;

  _Right._Myfirst = pointer();
  _Right._Mylast = pointer();
  _Right._Myend = pointer();
  }

 void _Assign_rv(_Myt&& _Right, false_type)
  {
  if (get_allocator() == _Right.get_allocator())
   _Assign_rv(::std:: forward<_Myt>(_Right), true_type());
  else
   _Construct(::std:: make_move_iterator(_Right.begin()),
    ::std:: make_move_iterator(_Right.end()));
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right),
   typename _Alty::propagate_on_container_move_assignment());
  }


 void push_back(value_type&& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    ::std:: forward<value_type>(this->_Myfirst[_Idx]));
   ++this->_Mylast;
   }
  else
   {
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    ::std:: forward<value_type>(_Val));
   ++this->_Mylast;
   }
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: move(_Val)));
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  if (this->_Mylast == this->_Myend)
   _Reserve(1);
  _Orphan_range(this->_Mylast, this->_Mylast);
  this->_Getal().construct(this->_Mylast,
   ::std:: forward<_Valty>(_Val)...);
  ++this->_Mylast;
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst;






  emplace_back(::std:: forward<_Valty>(_Val)...);
  ::std:: rotate(begin() + _Off, end() - 1, end());
  return (begin() + _Off);
  }


 vector(::std:: initializer_list<value_type> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<value_type> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<value_type> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() throw ()
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    _Tidy();
    this->_Change_alloc(_Right._Getal());
    }

   this->_Orphan_all();

   if (_Right.empty())
    clear();
   else if (_Right.size() <= size())
    {
    pointer _Ptr = _Copy_impl(_Right._Myfirst,
     _Right._Mylast, this->_Myfirst);
    _Destroy(_Ptr, this->_Mylast);
    this->_Mylast = this->_Myfirst + _Right.size();
    }
   else if (_Right.size() <= capacity())
    {
    pointer _Ptr = _Right._Myfirst + size();
    _Copy_impl(_Right._Myfirst,
     _Ptr, this->_Myfirst);
    this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
    }
   else
    {
    if (this->_Myfirst != pointer())
     {
     _Destroy(this->_Myfirst, this->_Mylast);
     this->_Getal().deallocate(this->_Myfirst,
      this->_Myend - this->_Myfirst);
     }
    if (_Buy(_Right.size()))
     try {
     this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
      this->_Myfirst);
     } catch (...) {
     _Tidy();
     throw;
     }
    }
   }
  return (*this);
  }

 void reserve(size_type _Count)
  {
  if (capacity() < _Count)
   {
   if (max_size() < _Count)
    _Xlen();
   _Reallocate(_Count);
   }
  }

 size_type capacity() const throw ()
  {
  return (this->_Myend - this->_Myfirst);
  }

 size_type _Unused_capacity() const throw ()
  {
  return (this->_Myend - this->_Mylast);
  }

 size_type _Has_unused_capacity() const throw ()
  {
  return (this->_Myend != this->_Mylast);
  }

 iterator begin() throw ()
  {
  return (iterator(this->_Myfirst, this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(this->_Myfirst, this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Mylast, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Mylast, this));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if (_Has_unused_capacity())
   {
   if (empty())
    _Tidy();
   else
    _Reallocate(size());
   }
  }

 void resize(size_type _Newsize)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   _Alty _Alval(this->_Getal());
   _Reserve(_Newsize - size());
   try {
   _Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
    _Alval);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast += _Newsize - size();
   }
  }

 void resize(size_type _Newsize, const value_type& _Val)
  {
  if (_Newsize < size())
   _Pop_back_n(size() - _Newsize);
  else if (size() < _Newsize)
   {
   const value_type *_Ptr = ::std:: addressof(_Val);

   if (_Inside(_Ptr))
    {
    const difference_type _Idx = _Ptr
     - ::std:: addressof(*this->_Myfirst);
    _Reserve(_Newsize - size());
    _Ptr = ::std:: addressof(*this->_Myfirst) + _Idx;
    }
   else
    _Reserve(_Newsize - size());

   try {
   _Ufill(this->_Mylast, _Newsize - size(), _Ptr);
   } catch (...) {
   _Tidy();
   throw;
   }
   this->_Mylast += _Newsize - size();
   }
  }

 size_type size() const throw ()
  {
  return (this->_Mylast - this->_Myfirst);
  }

 size_type max_size() const throw ()
  {
  return (this->_Getal().max_size());
  }

 bool empty() const throw ()
  {
  return (this->_Myfirst == this->_Mylast);
  }

 _Alloc get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 const_reference at(size_type _Pos) const
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst + _Pos));
  }

 reference at(size_type _Pos)
  {
  if (size() <= _Pos)
   _Xran();
  return (*(this->_Myfirst + _Pos));
  }

 const_reference operator[](size_type _Pos) const
  {
#line 1193 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  return (*(this->_Myfirst + _Pos));
  }

 reference operator[](size_type _Pos)
  {
#line 1209 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  return (*(this->_Myfirst + _Pos));
  }

 pointer data() throw ()
  {
  return (this->_Myfirst);
  }

 const_pointer data() const throw ()
  {
  return (this->_Myfirst);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const value_type& _Val)
  {
  if (_Inside(::std:: addressof(_Val)))
   {
   size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    this->_Myfirst[_Idx]);
   ++this->_Mylast;
   }
  else
   {
   if (this->_Mylast == this->_Myend)
    _Reserve(1);
   _Orphan_range(this->_Mylast, this->_Mylast);
   this->_Getal().construct(this->_Mylast,
    _Val);
   ++this->_Mylast;
   }
  }
#line 1279 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 void pop_back()
  {
  this->_Getal().destroy(this->_Mylast - 1);
  --this->_Mylast;
  }


 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  clear();
  _Assign(_First, _Last, _Iter_cat(_First));
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
  {
  for (; _First != _Last; ++_First)
   emplace_back(*_First);
  }

 template<class _Iter>
  void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)
  {
  if (_First == _Last)
   return;

  size_type _Newsize = ::std:: distance(_First, _Last);

  if (capacity() < _Newsize)
   {
   size_type _Newcapacity = _Grow_to(_Newsize);
   _Tidy();
   _Buy(_Newcapacity);
   }

  this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);
  }

 void assign(size_type _Count, const value_type& _Val)
  {
  clear();
  insert(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const _Ty& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst;
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  size_type _Off = (_Where)._Ptr - this->_Myfirst;






  if (_First != _Last)
   {
   size_type _Oldsize = size();

   try {
   for (; _First != _Last; ++_First)
    push_back(*_First);

   } catch (...) {
   erase(begin() + _Oldsize, end());
   throw;
   }

   ::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
   }
  }

 template<class _Iter>
  void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
#line 1387 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);

  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   pointer _Ptr = _Newvec;

   try {
   _Ptr = _Umove(this->_Myfirst, (_Where)._Ptr,
    _Newvec);
   _Ptr = _Ucopy(_First, _Last, _Ptr);
   _Umove((_Where)._Ptr, this->_Mylast,
    _Ptr);
   } catch (...) {
   _Destroy(_Newvec, _Ptr);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst != pointer())
    {
    _Destroy(this->_Myfirst, this->_Mylast);
    this->_Getal().deallocate(this->_Myfirst,
     this->_Myend - this->_Myfirst);
    }

   this->_Orphan_all();
   this->_Myend = _Newvec + _Capacity;
   this->_Mylast = _Newvec + _Count;
   this->_Myfirst = _Newvec;
   }
  else
   {
   _Ucopy(_First, _Last, this->_Mylast);
   ::std:: rotate((_Where)._Ptr, this->_Mylast,
    this->_Mylast + _Count);
   this->_Mylast += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast);
   }
  }
#line 1451 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 iterator erase(const_iterator _Where)
  {
  _Move((_Where)._Ptr + 1, this->_Mylast,
   (_Where)._Ptr);
  _Destroy(this->_Mylast - 1, this->_Mylast);
  --this->_Mylast;
  return (_Make_iter(_Where));
  }


 iterator erase(const_iterator _First_arg,
  const_iterator _Last_arg)
  {
  if (_First_arg == begin() && _Last_arg == end())
   clear();
  else if (_First_arg != _Last_arg)
   {
   iterator _First = _Make_iter(_First_arg);
   iterator _Last = _Make_iter(_Last_arg);

   if (_First != _Last)
    {
#line 1483 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
    pointer _Ptr = _Move((_Last)._Ptr, this->_Mylast,
     (_First)._Ptr);


    _Destroy(_Ptr, this->_Mylast);
    this->_Mylast = _Ptr;
    }
   }
  return (_Make_iter(_First_arg));
  }

 void _Pop_back_n(size_type _Count)
  {
  pointer _Ptr = this->_Mylast - _Count;





  _Destroy(_Ptr, this->_Mylast);
  this->_Mylast = _Ptr;
  }

 void clear() throw ()
  {
  this->_Orphan_all();
  _Destroy(this->_Myfirst, this->_Mylast);
  this->_Mylast = this->_Myfirst;
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myfirst, _Right._Myfirst);
   _Swap_adl(this->_Mylast, _Right._Mylast);
   _Swap_adl(this->_Myend, _Right._Myend);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_adl(this->_Myfirst, _Right._Myfirst);
   _Swap_adl(this->_Mylast, _Right._Mylast);
   _Swap_adl(this->_Myend, _Right._Myend);
   }

  else
   {




   ::std:: terminate();

   }
  }

protected:
 bool _Buy(size_type _Capacity)
  {
  this->_Myfirst = pointer();
  this->_Mylast = pointer();
  this->_Myend = pointer();

  if (_Capacity == 0)
   return (false);
  else if (max_size() < _Capacity)
   _Xlen();
  else
   {
   this->_Myfirst = this->_Getal().allocate(_Capacity);
   this->_Mylast = this->_Myfirst;
   this->_Myend = this->_Myfirst + _Capacity;
   }
  return (true);
  }

 void _Destroy(pointer _First, pointer _Last)
  {
  _Alty _Alval(this->_Getal());
  _Destroy_range(_First, _Last, _Alval);
  }

 size_type _Grow_to(size_type _Count) const
  {
  size_type _Capacity = capacity();

  _Capacity = max_size() - _Capacity / 2 < _Capacity
   ? 0 : _Capacity + _Capacity / 2;
  if (_Capacity < _Count)
   _Capacity = _Count;
  return (_Capacity);
  }

 bool _Inside(const value_type *_Ptr) const
  {
  return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
  }

 void _Reallocate(size_type _Count)
  {
  pointer _Ptr = this->_Getal().allocate(_Count);

  try {
  _Umove(this->_Myfirst, this->_Mylast, _Ptr);
  } catch (...) {
  this->_Getal().deallocate(_Ptr, _Count);
  throw;
  }

  size_type _Size = size();
  if (this->_Myfirst != pointer())
   {
   _Destroy(this->_Myfirst, this->_Mylast);
   this->_Getal().deallocate(this->_Myfirst,
    this->_Myend - this->_Myfirst);
   }

  this->_Orphan_all();
  this->_Myend = _Ptr + _Count;
  this->_Mylast = _Ptr + _Size;
  this->_Myfirst = _Ptr;
  }

 void _Reserve(size_type _Count)
  {
  if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();
   _Reallocate(_Grow_to(size() + _Count));
   }
  }

 void _Tidy()
  {
  if (this->_Myfirst != pointer())
   {
   this->_Orphan_all();
   _Destroy(this->_Myfirst, this->_Mylast);
   this->_Getal().deallocate(this->_Myfirst,
    this->_Myend - this->_Myfirst);
   this->_Myfirst = pointer();
   this->_Mylast = pointer();
   this->_Myend = pointer();
   }
  }

 template<class _Iter>
  pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  _Alty _Alval(this->_Getal());
  return (_Uninitialized_copy(_First, _Last,
   _Ptr, _Alval));
  }

 template<class _Iter>
  pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
  {
  _Alty _Alval(this->_Getal());
  return (_Uninitialized_move(_First, _Last,
   _Ptr, _Alval));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const value_type& _Val)
  {







  size_type _Off = (_Where)._Ptr - this->_Myfirst;
  if (_Count == 0)
   ;
  else if (_Unused_capacity() < _Count)
   {
   if (max_size() - size() < _Count)
    _Xlen();

   size_type _Capacity = _Grow_to(size() + _Count);
   pointer _Newvec = this->_Getal().allocate(_Capacity);
   size_type _Whereoff = (_Where)._Ptr - this->_Myfirst;
   int _Ncopied = 0;

   try {
   _Ufill(_Newvec + _Whereoff, _Count,
    ::std:: addressof(_Val));
   ++_Ncopied;
   _Umove(this->_Myfirst, (_Where)._Ptr,
    _Newvec);
   ++_Ncopied;
   _Umove((_Where)._Ptr, this->_Mylast,
    _Newvec + (_Whereoff + _Count));
   } catch (...) {
   if (1 < _Ncopied)
    _Destroy(_Newvec, _Newvec + _Whereoff);
   if (0 < _Ncopied)
    _Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
   this->_Getal().deallocate(_Newvec, _Capacity);
   throw;
   }

   _Count += size();
   if (this->_Myfirst != pointer())
    {
    _Destroy(this->_Myfirst, this->_Mylast);
    this->_Getal().deallocate(this->_Myfirst,
     this->_Myend - this->_Myfirst);
    }

   this->_Orphan_all();
   this->_Myend = _Newvec + _Capacity;
   this->_Mylast = _Newvec + _Count;
   this->_Myfirst = _Newvec;
   }
  else if ((size_type)(this->_Mylast - (_Where)._Ptr)
   < _Count)
   {
   value_type _Tmp = _Val;

   _Umove((_Where)._Ptr, this->_Mylast,
    (_Where)._Ptr + _Count);

   try {
   _Ufill(this->_Mylast,
    _Count - (this->_Mylast - (_Where)._Ptr),
    ::std:: addressof(_Tmp));
   } catch (...) {
   _Destroy((_Where)._Ptr + _Count,
    this->_Mylast + _Count);
   throw;
   }

   this->_Mylast += _Count;
   _Orphan_range((_Where)._Ptr, this->_Mylast);
   ::std:: fill((_Where)._Ptr, this->_Mylast - _Count,
    _Tmp);
   }
  else
   {
   value_type _Tmp = _Val;

   pointer _Oldend = this->_Mylast;
   this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
    this->_Mylast);

   _Orphan_range((_Where)._Ptr, this->_Mylast);
   _Copy_backward((_Where)._Ptr, _Oldend - _Count,
    _Oldend);
   ::std:: fill((_Where)._Ptr,
    (_Where)._Ptr + _Count, _Tmp);
   }
  return (begin() + _Off);
  }

 pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
  {
  _Alty _Alval(this->_Getal());
  _Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
  return (_Ptr + _Count);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("vector<T> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid vector<T> subscript");
  }
#line 1779 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 void _Orphan_range(pointer, pointer) const
  {
  }

 };



template<class _Ty,
 class _Alloc> inline
 void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const vector<_Ty, _Alloc>& _Left,
  const vector<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }




typedef unsigned int _Vbase;
const int _VBITS = 8 * sizeof (_Vbase);


template<class _Alloc>
 class _Vb_iter_base
  : public _Iterator012<random_access_iterator_tag,
   _Bool,
   typename _Alloc::difference_type,
   bool *,
   bool,
   _Iterator_base>
 {
public:
 typedef typename _Alloc::size_type _Sizet;
 typedef vector<_Bool, _Alloc> _Mycont;

 _Vb_iter_base()
  : _Myptr(0), _Myoff(0)
  {
  }

 _Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
  const _Container_base *_Mypvbool)
  : _Myptr(_Ptr), _Myoff(_Off)
  {
  this->_Adopt(_Mypvbool);
  }

 void _Advance(_Sizet _Off)
  {
  _Myoff += _Off;
  _Myptr += _Myoff / _VBITS;
  _Myoff %= _VBITS;
  }

 int _Valid(_Sizet _Inc) const
  {
#line 1895 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  return (-1);

  }

 const _Vbase *_Myptr;
 _Sizet _Myoff;
 };


template<class _Alloc>
 class _Vb_reference
  : public _Vb_iter_base<_Alloc>
 {
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_reference<_Alloc> _Mytype;

 _Vb_reference() throw ()
  {
  }

public:
 _Vb_reference(const _Mybase& _Right)
  : _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
  {
  }

 _Mytype& operator=(const _Mytype& _Right) throw ()
  {
  return (*this = bool(_Right));
  }

 _Mytype& operator=(bool _Val) throw ()
  {
  if (_Val)
   *(_Vbase *)_Getptr() |= _Mask();
  else
   *(_Vbase *)_Getptr() &= (~_Mask());
  return (*this);
  }

 void flip() throw ()
  {
  *(_Vbase *)_Getptr() ^= _Mask();
  }

 operator bool() const throw ()
  {
  return ((*_Getptr() & _Mask()) != 0);
  }

 const _Vbase *_Getptr() const
  {
#line 1961 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  return (this->_Myptr);
  }

protected:
 _Vbase _Mask() const
  {
  return ((_Vbase)(1 << this->_Myoff));
  }
 };

template<class _Alloc> inline
 void swap(_Vb_reference<_Alloc> _Left,
  _Vb_reference<_Alloc> _Right)
 {
 bool _Val = _Left;
 _Left = _Right;
 _Right = _Val;
 }


template<class _Alloc>
 class _Vb_const_iterator
  : public _Vb_iter_base<_Alloc>
 {
public:
 typedef _Vb_iter_base<_Alloc> _Mybase;
 typedef _Vb_const_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef _Bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef const_reference *pointer;
 typedef const_reference reference;

 _Vb_const_iterator()
  {
  }

 _Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
  : _Mybase(_Ptr, 0, _Mypvbool)
  {
  }

 const_reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  _Inc();
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  _Dec();
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
   {
   this->_Myoff += _Off;
   this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
   this->_Myoff %= _VBITS;
   }
  else
   {
   this->_Myoff += _Off;
   this->_Myptr += this->_Myoff / _VBITS;
   this->_Myoff %= _VBITS;
   }
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(
  const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (_VBITS * (this->_Myptr - _Right._Myptr)
   + (difference_type)this->_Myoff
   - (difference_type)_Right._Myoff);
  }

 const_reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }

 bool operator==(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr == _Right._Myptr
   && this->_Myoff == _Right._Myoff);
  }

 bool operator!=(const _Mytype& _Right) const
  {
  return (!(*this == _Right));
  }

 bool operator<(const _Mytype& _Right) const
  {
  _Compat(_Right);
  return (this->_Myptr < _Right._Myptr
   || (this->_Myptr == _Right._Myptr
    && this->_Myoff < _Right._Myoff));
  }

 bool operator>(const _Mytype& _Right) const
  {
  return (_Right < *this);
  }

 bool operator<=(const _Mytype& _Right) const
  {
  return (!(_Right < *this));
  }

 bool operator>=(const _Mytype& _Right) const
  {
  return (!(*this < _Right));
  }
#line 2138 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 void _Compat(const _Mytype&) const
  {
  }


 void _Dec()
  {
  if (this->_Myoff != 0)
   --this->_Myoff;
  else
   {
#line 2161 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
   this->_Myoff = _VBITS - 1;
   --this->_Myptr;
   }
  }

 void _Inc()
  {
  if (this->_Myoff < _VBITS - 1)
   ++this->_Myoff;
  else
   {
#line 2184 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
   this->_Myoff = 0;
   ++this->_Myptr;
   }
  }
 };

template<class _Alloc> inline
 _Vb_const_iterator<_Alloc> operator+(
  typename _Alloc::difference_type _Off,
  _Vb_const_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_iterator
  : public _Vb_const_iterator<_Alloc>
 {
public:
 typedef _Vb_const_iterator<_Alloc> _Mybase;
 typedef _Vb_iterator<_Alloc> _Mytype;

 typedef _Vb_reference<_Alloc> _Reft;
 typedef bool const_reference;

 typedef random_access_iterator_tag iterator_category;
 typedef _Bool value_type;
 typedef typename _Alloc::size_type size_type;
 typedef typename _Alloc::difference_type difference_type;
 typedef _Reft *pointer;
 typedef _Reft reference;

 _Vb_iterator()
  {
  }

 _Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
  : _Mybase(_Ptr, _Mypvbool)
  {
  }

 reference operator*() const
  {
  return (_Reft(*this));
  }

 _Mytype& operator++()
  {
  ++*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator++(int)
  {
  _Mytype _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Mytype& operator--()
  {
  --*(_Mybase *)this;
  return (*this);
  }

 _Mytype operator--(int)
  {
  _Mytype _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 _Mytype& operator+=(difference_type _Off)
  {
  *(_Mybase *)this += _Off;
  return (*this);
  }

 _Mytype operator+(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp += _Off);
  }

 _Mytype& operator-=(difference_type _Off)
  {
  return (*this += -_Off);
  }

 _Mytype operator-(difference_type _Off) const
  {
  _Mytype _Tmp = *this;
  return (_Tmp -= _Off);
  }

 difference_type operator-(const _Mybase& _Right) const
  {
  return (*(_Mybase *)this - _Right);
  }

 reference operator[](difference_type _Off) const
  {
  return (*(*this + _Off));
  }
 };

template<class _Alloc> inline
 _Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
  _Vb_iterator<_Alloc> _Right)
  {
  return (_Right += _Off);
  }

template<class _Alloc>
 struct _Is_checked_helper<_Vb_iterator<_Alloc> >
  : public true_type
 {
 };


template<class _Alloc>
 class _Vb_val
  : public _Container_base
 {
public:
 typedef ::std:: vector<_Vbase, _Alloc> _Vectype;
 typedef typename _Vectype::_Alty _Alty;
 typedef typename _Alty::size_type size_type;

 _Vb_val(size_type _Count, const bool& _Val, const _Alloc& _Al = _Alloc())
  : _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
  {
  _Alloc_proxy();
  _Mysize = 0;
  }

 _Vb_val(const _Vb_val& _Right)
  : _Myvec(_Right._Myvec),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(const _Vb_val& _Right, const _Alloc& _Al)
  : _Myvec(_Right._Myvec, _Al),
   _Mysize(_Right._Mysize)
  {
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec)),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 _Vb_val(_Vb_val&& _Right, const _Alloc& _Al)
  : _Myvec(::std:: forward<_Vectype>(_Right._Myvec), _Al),
   _Mysize(_Right._Mysize)
  {
  _Right._Mysize = 0;
  _Alloc_proxy();
  }

 ~_Vb_val() throw ()
  {
  _Free_proxy();
  }


 void _Swap_alloc(_Vb_val&)
  {
  }

 void _Alloc_proxy()
  {
  }

 void _Free_proxy()
  {
  }
#line 2401 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 static size_type _Nw(size_type _Count)
  {
  return ((_Count + _VBITS - 1) / _VBITS);
  }

 _Vectype _Myvec;
 typename _Alty::size_type _Mysize;
 };



template<class _Alloc>
 class vector<_Bool, _Alloc>
  : public _Vb_val<_Alloc>
 {
public:
 typedef ::std:: vector<_Bool, _Alloc> _Myt;
 typedef _Vb_val<_Alloc> _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Vectype _Vectype;

 typedef typename _Alty::size_type size_type;
 typedef typename _Alty::difference_type difference_type;
 typedef _Bool _Ty;
 typedef _Alloc allocator_type;

 typedef _Vb_reference<_Alty> reference;
 typedef bool const_reference;
 typedef bool value_type;

 typedef reference _Reft;
 typedef _Vb_const_iterator<_Alty> const_iterator;
 typedef _Vb_iterator<_Alty> iterator;

 typedef iterator pointer;
 typedef const_iterator const_pointer;
 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 static const int _VBITS = ::std:: _VBITS;
 enum {_EEN_VBITS = _VBITS};
 vector()
  : _Mybase(0, false)
  {
  }

 explicit vector(const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  }

 explicit vector(size_type _Count, const bool& _Val = false)
  : _Mybase(_Count, _Val)
  {
  _Trim(_Count);
  }

 vector(size_type _Count, const bool& _Val, const _Alloc& _Al)
  : _Mybase(_Count, _Val, _Al)
  {
  _Trim(_Count);
  }

 vector(const _Myt& _Right)
  : _Mybase(_Right)
  {
  }

 vector(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last)
  : _Mybase(0, false)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(0, false, _Al)
  {
  _BConstruct(_First, _Last);
  }

 template<class _Iter>
  void _BConstruct(_Iter _First, _Iter _Last)
  {
  insert(begin(), _First, _Last);
  }

 vector(_Myt&& _Right)
  : _Mybase(::std:: forward<_Myt>(_Right))
  {
  }

 vector(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(::std:: forward<_Myt>(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->get_allocator() != _Right.get_allocator())
    {
    this->_Free_proxy();
    this->_Myvec = ::std:: move(_Right._Myvec);
    this->_Alloc_proxy();
    }
   else
    this->_Myvec = ::std:: move(_Right._Myvec);


   this->_Mysize = _Right._Mysize;
   _Right._Mysize = 0;
   }
  return (*this);
  }

 vector(::std:: initializer_list<bool> _Ilist,
   const _Alloc& _Al = allocator_type())
  : _Mybase(0, false, _Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<bool> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
   ::std:: initializer_list<bool> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~vector() throw ()
  {
  this->_Mysize = 0;
  }

 _Myt& operator=(const _Myt& _Right)
  {
  this->_Mysize = _Right._Mysize;
  this->_Myvec = _Right._Myvec;
  return (*this);
  }

 void reserve(size_type _Count)
  {
  this->_Myvec.reserve(this->_Nw(_Count));
  }

 size_type capacity() const throw ()
  {
  return (this->_Myvec.capacity() * _VBITS);
  }

 iterator begin() throw ()
  {
  return (iterator((_Vbase *)this->_Myvec._Myfirst, this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator((_Vbase *)this->_Myvec._Myfirst, this));
  }

 iterator end() throw ()
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator end() const throw ()
  {
  const_iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += this->_Mysize;
  return (_Tmp);
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void shrink_to_fit()
  {
  if (this->_Myvec._Has_unused_capacity())
   {
   _Myt _Tmp(*this);
   swap(_Tmp);
   }
  }

 iterator _Make_iter(const_iterator _Where)
  {
  iterator _Tmp = begin();
  if (0 < this->_Mysize)
   _Tmp += _Where - begin();
  return (_Tmp);
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 void resize(size_type _Newsize, bool _Val = false)
  {
  if (size() < _Newsize)
   _Insert_n(end(), _Newsize - size(), _Val);
  else if (_Newsize < size())
   erase(begin() + _Newsize, end());
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  const size_type _Maxsize = this->_Myvec.max_size();
  return (_Maxsize < (size_type)(-1) / _VBITS
   ? _Maxsize * _VBITS : (size_type)(-1));
  }

 bool empty() const throw ()
  {
  return (size() == 0);
  }

 _Alloc get_allocator() const throw ()
  {
  return (this->_Myvec.get_allocator());
  }

 const_reference at(size_type _Off) const
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 reference at(size_type _Off)
  {
  if (size() <= _Off)
   _Xran();
  return ((*this)[_Off]);
  }

 const_reference operator[](size_type _Off) const
  {
  const_iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference operator[](size_type _Off)
  {
  iterator _It = begin();
  _It._Advance(_Off);
  return (*_It);
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(end() - 1));
  }

 const_reference back() const
  {
  return (*(end() - 1));
  }

 void push_back(const bool& _Val)
  {
  insert(end(), _Val);
  }

 void pop_back()
  {
  erase(end() - 1);
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  erase(begin(), end());
  insert(begin(), _First, _Last);
  }

 void assign(size_type _Count, const bool& _Val)
  {
  erase(begin(), end());
  _Insert_n(begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const bool& _Val)
  {
  return (_Insert_n(_Where, (size_type)1, _Val));
  }

 iterator insert(const_iterator _Where, size_type _Count,
  const bool& _Val)
  {
  return (_Insert_n(_Where, _Count, _Val));
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {
  size_type _Off = _Where - begin();
  _Insert(_Where, _First, _Last, _Iter_cat(_First));
  return (begin() + _Off);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
   input_iterator_tag)
  {
  size_type _Off = _Where - begin();

  for (; _First != _Last; ++_First, ++_Off)
   insert(begin() + _Off, *_First);
  }

 template<class _Iter>
  void _Insert(const_iterator _Where,
   _Iter _First, _Iter _Last,
   forward_iterator_tag)
  {
                             ;
  size_type _Count = 0;
  _Distance(_First, _Last, _Count);

  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: copy(_First, _Last, begin() + _Off);
  }

 iterator erase(const_iterator _Where_arg)
  {
  iterator _Where = _Make_iter(_Where_arg);
  size_type _Off = _Where - begin();
#line 2819 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
  ::std:: copy(_Where + 1, end(), _Where);


  _Trim(this->_Mysize - 1);
  return (begin() + _Off);
  }

 iterator erase(const_iterator _First_arg, const_iterator _Last_arg)
  {
  iterator _First = _Make_iter(_First_arg);
  iterator _Last = _Make_iter(_Last_arg);
  size_type _Off = _First - begin();

  if (_First != _Last)
   {
#line 2843 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
   iterator _Next = ::std:: copy(_Last, end(), _First);
   _Trim(_Next - begin());

   }
  return (begin() + _Off);
  }

 void clear() throw ()
  {
  erase(begin(), end());
  }

 void flip() throw ()
  {
  for (typename _Vectype::iterator _Next = this->_Myvec.begin();
   _Next != this->_Myvec.end(); ++_Next)
   *_Next = (_Vbase)~*_Next;
  _Trim(this->_Mysize);
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->get_allocator() == _Right.get_allocator())
   {
   this->_Swap_all(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   this->_Myvec.swap(_Right._Myvec);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else
   {




   ::std:: terminate();

   }
  }

 static void swap(reference _Left, reference _Right) throw ()
  {
  bool _Val = _Left;

  _Left = _Right;
  _Right = _Val;
  }

 size_t hash() const
  {
  return (_Hash_seq((const unsigned char *)this->_Myvec.data(),
   this->_Myvec.size() * sizeof (_Vbase)));
  }

 iterator _Insert_n(const_iterator _Where,
  size_type _Count, const bool& _Val)
  {
  size_type _Off = _Insert_x(_Where, _Count);
  ::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
  return (begin() + _Off);
  }

 size_type _Insert_x(const_iterator _Where, size_type _Count)
  {
  size_type _Off = _Where - begin();







  if (_Count == 0)
   ;
  else if (max_size() - size() < _Count)
   _Xlen();
  else
   {
   this->_Myvec.resize(this->_Nw(size() + _Count), 0);
   if (empty())
    this->_Mysize += _Count;
   else
    {
    iterator _Oldend = end();
    this->_Mysize += _Count;
    ::std:: copy_backward(begin() + _Off, _Oldend, end());
    }




   }
  return (_Off);
  }
#line 2972 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vector"
 void _Orphan_range(size_type, size_type) const
  {
  }


 void _Trim(size_type _Size)
  {
  if (max_size() < _Size)
   _Xlen();
  size_type _Words = this->_Nw(_Size);

  if (_Words < this->_Myvec.size())
   this->_Myvec.erase(this->_Myvec.begin() + _Words,
    this->_Myvec.end());
  this->_Mysize = _Size;
  _Size %= _VBITS;
  if (0 < _Size)
   this->_Myvec[_Words - 1] &= (_Vbase)((1 << _Size) - 1);
  }

 __declspec(noreturn) void _Xlen() const
  {
  _Xlength_error("vector<bool> too long");
  }

 __declspec(noreturn) void _Xran() const
  {
  _Xout_of_range("invalid vector<bool> subscript");
  }
 };

template<class _Alloc> inline
 bool operator==(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left._Myvec.begin(), _Left._Myvec.end(),
   _Right._Myvec.begin()));
 }

template<class _Alloc> inline
 bool operator!=(const vector<bool, _Alloc>& _Left,
  const vector<bool, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Alloc>
 struct hash<vector<_Bool, _Alloc> >
  : public unary_function<vector<_Bool, _Alloc>, size_t>
 {
 typedef vector<_Bool, _Alloc> _Kty;

 size_t operator()(const _Kty& _Keyval) const
  {
  return (_Keyval.hash());
  }
 };
}


#pragma warning(pop)
#pragma pack(pop)
#line 44 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/../MsgMgr/MsgMgr.h"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\unordered_map"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xhash"







#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"








#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)
namespace std {

template<class _Mylist,
 class _Base = _Iterator_base0>
 class _List_unchecked_const_iterator
  : public _Iterator012<bidirectional_iterator_tag,
   typename _Mylist::value_type,
   typename _Mylist::difference_type,
   typename _Mylist::const_pointer,
   typename _Mylist::const_reference,
   _Base>
 {
public:
 typedef _List_unchecked_const_iterator<_Mylist, _Base> _Myiter;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::const_pointer pointer;
 typedef typename _Mylist::const_reference reference;

 _List_unchecked_const_iterator()
  : _Ptr(0)
  {
  }

 _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Ptr(_Pnode)
  {
  this->_Adopt(_Plist);
  }

 reference operator*() const
  {
  return (_Mylist::_Myval(_Ptr));
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  _Ptr = _Mylist::_Nextnode(_Ptr);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  _Ptr = _Mylist::_Prevnode(_Ptr);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {
  return (_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }

 _Nodeptr _Mynode() const
  {
  return (_Ptr);
  }

 _Nodeptr _Ptr;
 };


template<class _Mylist>
 class _List_unchecked_iterator
  : public _List_unchecked_const_iterator<_Mylist>
 {
public:
 typedef _List_unchecked_iterator<_Mylist> _Myiter;
 typedef _List_unchecked_const_iterator<_Mylist> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::pointer pointer;
 typedef typename _Mylist::reference reference;

 _List_unchecked_iterator()
  {
  }

 _List_unchecked_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };


template<class _Mylist>
 class _List_const_iterator
  : public _List_unchecked_const_iterator<_Mylist, _Iterator_base>
 {
public:
 typedef _List_const_iterator<_Mylist> _Myiter;
 typedef _List_unchecked_const_iterator<_Mylist, _Iterator_base> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::const_pointer pointer;
 typedef typename _Mylist::const_reference reference;

 _List_const_iterator()
  : _Mybase()
  {
  }

 _List_const_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _List_unchecked_const_iterator<_Mylist> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
  }

 reference operator*() const
  {
#line 220 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
  return (_Mylist::_Myval(this->_Ptr));
  }

 _Myiter& operator++()
  {
#line 240 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
  this->_Ptr = _Mylist::_Nextnode(this->_Ptr);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
#line 270 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
  this->_Ptr = _Mylist::_Prevnode(this->_Ptr);


  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }

 bool operator==(const _Myiter& _Right) const
  {
#line 298 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
  return (this->_Ptr == _Right._Ptr);
  }

 bool operator!=(const _Myiter& _Right) const
  {
  return (!(*this == _Right));
  }
 };

template<class _Mylist> inline
 typename _List_const_iterator<_Mylist>::_Unchecked_type
  _Unchecked(_List_const_iterator<_Mylist> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mylist> inline
 _List_const_iterator<_Mylist>&
  _Rechecked(_List_const_iterator<_Mylist>& _Iter,
   typename _List_const_iterator<_Mylist>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Mylist>
 class _List_iterator
  : public _List_const_iterator<_Mylist>
 {
public:
 typedef _List_iterator<_Mylist> _Myiter;
 typedef _List_const_iterator<_Mylist> _Mybase;
 typedef bidirectional_iterator_tag iterator_category;

 typedef typename _Mylist::_Nodeptr _Nodeptr;
 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::pointer pointer;
 typedef typename _Mylist::reference reference;

 _List_iterator()
  {
  }

 _List_iterator(_Nodeptr _Pnode, const _Mylist *_Plist)
  : _Mybase(_Pnode, _Plist)
  {
  }

 typedef _List_unchecked_iterator<_Mylist> _Unchecked_type;

 _Myiter& _Rechecked(_Unchecked_type _Right)
  {
  this->_Ptr = _Right._Ptr;
  return (*this);
  }

 _Unchecked_type _Unchecked() const
  {
  return (_Unchecked_type(this->_Ptr, (_Mylist *)this->_Getcont()));
  }

 reference operator*() const
  {
  return ((reference)**(_Mybase *)this);
  }

 pointer operator->() const
  {
  return (::std:: pointer_traits<pointer>::pointer_to(**this));
  }

 _Myiter& operator++()
  {
  ++(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator++(int)
  {
  _Myiter _Tmp = *this;
  ++*this;
  return (_Tmp);
  }

 _Myiter& operator--()
  {
  --(*(_Mybase *)this);
  return (*this);
  }

 _Myiter operator--(int)
  {
  _Myiter _Tmp = *this;
  --*this;
  return (_Tmp);
  }
 };

template<class _Mylist> inline
 typename _List_iterator<_Mylist>::_Unchecked_type
  _Unchecked(_List_iterator<_Mylist> _Iter)
 {
 return (_Iter._Unchecked());
 }

template<class _Mylist> inline
 _List_iterator<_Mylist>&
  _Rechecked(_List_iterator<_Mylist>& _Iter,
   typename _List_iterator<_Mylist>
    ::_Unchecked_type _Right)
 {
 return (_Iter._Rechecked(_Right));
 }


template<class _Value_type,
 class _Size_type,
 class _Difference_type,
 class _Pointer,
 class _Const_pointer,
 class _Reference,
 class _Const_reference,
 class _Nodeptr_type>
 struct _List_iter_types
 {
 typedef _Value_type value_type;
 typedef _Size_type size_type;
 typedef _Difference_type difference_type;
 typedef _Pointer pointer;
 typedef _Const_pointer const_pointer;
 typedef _Reference reference;
 typedef _Const_reference const_reference;
 typedef _Nodeptr_type _Nodeptr;
 };

template<class _Value_type,
 class _Voidptr>
 struct _List_node
  {
  _Voidptr _Next;
  _Voidptr _Prev;
  _Value_type _Myval;

 private:
  _List_node& operator=(const _List_node&);
  };

template<class _Value_type>
 struct _List_node<_Value_type, void *>
  {
  typedef _List_node<_Value_type, void *> *_Nodeptr;
  _Nodeptr _Next;
  _Nodeptr _Prev;
  _Value_type _Myval;

 private:
  _List_node& operator=(const _List_node&);
  };

template<class _Ty>
 struct _List_simple_types
  : public _Simple_types<_Ty>
 {
 typedef _List_node<_Ty, void *> _Node;
 typedef _Node *_Nodeptr;
 };

template<class _Ty,
 class _Alloc0>
 struct _List_base_types
 {
 typedef _Alloc0 _Alloc;
 typedef _List_base_types<_Ty, _Alloc> _Myt;

 typedef _Wrap_alloc<_Alloc> _Alty0;
 typedef typename _Alty0::template rebind<_Ty>::other _Alty;


 typedef typename _Get_voidptr<_Alty, typename _Alty::pointer>::type
  _Voidptr;
 typedef _List_node<typename _Alty::value_type,
  _Voidptr> _Node;

 typedef typename _Alty::template rebind<_Node>::other _Alnod_type;
 typedef typename _Alnod_type::pointer _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _If<_Is_simple_alloc<_Alty>::value,
  _List_simple_types<typename _Alty::value_type>,
  _List_iter_types<typename _Alty::value_type,
   typename _Alty::size_type,
   typename _Alty::difference_type,
   typename _Alty::pointer,
   typename _Alty::const_pointer,
   typename _Alty::reference,
   typename _Alty::const_reference,
   _Nodeptr> >::type
  _Val_types;
 };


template<class _Val_types>
 class _List_val
  : public _Container_base
 {
public:
 typedef _List_val<_Val_types> _Myt;

 typedef typename _Val_types::_Nodeptr _Nodeptr;
 typedef _Nodeptr& _Nodepref;

 typedef typename _Val_types::value_type value_type;
 typedef typename _Val_types::size_type size_type;
 typedef typename _Val_types::difference_type difference_type;
 typedef typename _Val_types::pointer pointer;
 typedef typename _Val_types::const_pointer const_pointer;
 typedef typename _Val_types::reference reference;
 typedef typename _Val_types::const_reference const_reference;

 typedef _List_const_iterator<_Myt> const_iterator;
 typedef _List_iterator<_Myt> iterator;

 typedef _List_unchecked_const_iterator<_Myt> _Unchecked_const_iterator;
 typedef _List_unchecked_iterator<_Myt> _Unchecked_iterator;

 _List_val()
  {
  this->_Myhead = 0;
  this->_Mysize = 0;
  }

 static _Nodepref _Nextnode(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Next);
  }

 static _Nodepref _Prevnode(_Nodeptr _Pnode)
  {
  return ((_Nodepref)_Pnode->_Prev);
  }

 static reference _Myval(_Nodeptr _Pnode)
  {
  return ((reference)_Pnode->_Myval);
  }

 _Nodeptr _Myhead;
 size_type _Mysize;
 };


template<bool _Al_has_storage,
 class _Alloc_types>
 class _List_alloc
  : public _List_val<typename _Alloc_types::_Val_types>
 {
public:
 typename _Alloc_types::_Alnod_type _Alnod;

 typedef _List_alloc<_Al_has_storage, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;


 _List_alloc(const _Alloc& _Al = _Alloc())
  : _Alnod(_Al)
  {
  this->_Myhead = _Buyheadnode();
  }

 ~_List_alloc() throw ()
  {
  _Freeheadnode(this->_Myhead);
  }

 void _Change_alloc(const _Alty& _Al)
  {
  this->_Alnod = _Al;
  }

 void _Swap_alloc(_Myt& _Right)
  {
  _Swap_adl(this->_Alnod, _Right._Alnod);
  }
#line 639 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
 _Nodeptr _Buyheadnode()
  {
  return (_Buynode0(_Nodeptr(), _Nodeptr()));
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  this->_Alnod.destroy(
   ::std:: addressof(this->_Nextnode(_Pnode)));
  this->_Alnod.destroy(
   ::std:: addressof(this->_Prevnode(_Pnode)));
  this->_Alnod.deallocate(_Pnode, 1);
  }

 _Nodeptr _Buynode0(_Nodeptr _Next,
  _Nodeptr _Prev)
  {
  _Nodeptr _Pnode = this->_Alnod.allocate(1);

  if (_Next == _Nodeptr())
   {
   _Next = _Pnode;
   _Prev = _Pnode;
   }
  try {
  this->_Alnod.construct(
   ::std:: addressof(this->_Nextnode(_Pnode)), _Next);
  this->_Alnod.construct(
   ::std:: addressof(this->_Prevnode(_Pnode)), _Prev);
  } catch (...) {
  this->_Alnod.deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 _Alty& _Getal()
  {
  return (this->_Alnod);
  }

 const _Alty& _Getal() const
  {
  return (this->_Alnod);
  }
 };


template<class _Alloc_types>
 class _List_alloc<false, _Alloc_types>
  : public _List_val<typename _Alloc_types::_Val_types>
 {
public:
 typedef _List_alloc<false, _Alloc_types> _Myt;
 typedef typename _Alloc_types::_Alloc _Alloc;
 typedef typename _Alloc_types::_Alnod_type _Alty;
 typedef typename _Alloc_types::_Node _Node;
 typedef typename _Alloc_types::_Nodeptr _Nodeptr;


 _List_alloc(const _Alloc& = _Alloc())
  {
  this->_Myhead = _Buyheadnode();
  }

 ~_List_alloc() throw ()
  {
  _Freeheadnode(this->_Myhead);
  }

 void _Change_alloc(const _Alty&)
  {
  }

 void _Swap_alloc(_Myt&)
  {
  }
#line 765 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
 _Nodeptr _Buyheadnode()
  {
  return (_Buynode0(_Nodeptr(), _Nodeptr()));
  }

 void _Freeheadnode(_Nodeptr _Pnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Nextnode(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Prevnode(_Pnode)));
  this->_Getal().deallocate(_Pnode, 1);
  }

 _Nodeptr _Buynode0(_Nodeptr _Next,
  _Nodeptr _Prev)
  {
  _Nodeptr _Pnode = this->_Getal().allocate(1);

  if (_Next == _Nodeptr())
   {
   _Next = _Pnode;
   _Prev = _Pnode;
   }
  try {
  this->_Getal().construct(
   ::std:: addressof(this->_Nextnode(_Pnode)), _Next);
  this->_Getal().construct(
   ::std:: addressof(this->_Prevnode(_Pnode)), _Prev);
  } catch (...) {
  this->_Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }

 _Alty _Getal() const
  {
  return (_Alty());
  }
 };


template<class _Ty,
 class _Alloc>
 class _List_buy
  : public _List_alloc<!is_empty<_Alloc>::value,
   _List_base_types<_Ty, _Alloc> >
 {
public:
 typedef _List_alloc<!is_empty<_Alloc>::value,
  _List_base_types<_Ty, _Alloc> > _Mybase;
 typedef typename _Mybase::_Alty _Alty;
 typedef typename _Mybase::_Nodeptr _Nodeptr;

 _List_buy(const _Alloc& _Al = _Alloc())
  : _Mybase(_Al)
  {
  }

 template<class... _Valty>
  _Nodeptr _Buynode(_Nodeptr _Next, _Nodeptr _Prev,
   _Valty&&... _Val)
  {
  _Nodeptr _Pnode = this->_Buynode0(_Next, _Prev);

  try {
  this->_Getal().construct(
   ::std:: addressof(this->_Myval(_Pnode)),
    ::std:: forward<_Valty>(_Val)...);
  } catch (...) {
  this->_Getal().deallocate(_Pnode, 1);
  throw;
  }

  return (_Pnode);
  }


 void _Freenode(_Nodeptr _Pnode)
  {
  this->_Getal().destroy(
   ::std:: addressof(this->_Nextnode(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Prevnode(_Pnode)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Pnode)));
  this->_Getal().deallocate(_Pnode, 1);
  }
 };


template<class _Ty,
 class _Alloc = allocator<_Ty> >
 class list
  : public _List_buy<_Ty, _Alloc>
 {
public:
 typedef list<_Ty, _Alloc> _Myt;
 typedef _List_buy<_Ty, _Alloc> _Mybase;
 typedef typename _Mybase::_Node _Node;
 typedef typename _Mybase::_Nodeptr _Nodeptr;
 typedef typename _Mybase::_Alty _Alty;

 typedef _Alloc allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::const_iterator const_iterator;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::_Unchecked_const_iterator
  _Unchecked_const_iterator;
 typedef typename _Mybase::_Unchecked_iterator
  _Unchecked_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 list()
  : _Mybase()
  {
  }

 explicit list(const _Alloc& _Al)
  : _Mybase(_Al)
  {
  }

 explicit list(size_type _Count)
  : _Mybase()
  {
  resize(_Count);
  }

 list(size_type _Count, const _Ty& _Val)
  : _Mybase()
  {
  _Construct_n(_Count, _Val);
  }

 list(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct_n(_Count, _Val);
  }

 list(const _Myt& _Right)

  : _Mybase(_Right._Getal().select_on_container_copy_construction())


  {
  try {
  insert(begin(), _Right.begin(), _Right.end());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 list(const _Myt& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  try {
  insert(begin(), _Right.begin(), _Right.end());
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  list(_Iter _First, _Iter _Last)
  : _Mybase()
  {
  _Construct(_First, _Last);
  }

 template<class _Iter,
  class = typename enable_if<_Is_iterator<_Iter>::value,
   void>::type>
  list(_Iter _First, _Iter _Last, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Construct(_First, _Last);
  }

 template<class _Iter>
  void _Construct(_Iter _First, _Iter _Last)
  {
  try {
  insert(begin(), _First, _Last);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 void _Construct_n(size_type _Count,
  const _Ty& _Val)
  {
  try {
  _Insert_n(_Unchecked_begin(), _Count, _Val);
  } catch (...) {
  _Tidy();
  throw;
  }
  }

 list(_Myt&& _Right)
  : _Mybase(_Right._Getal())
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 list(_Myt&& _Right, const _Alloc& _Al)
  : _Mybase(_Al)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   {
   clear();

   if (_Alty::propagate_on_container_move_assignment::value
    && this->_Getal() != _Right._Getal())
    this->_Change_alloc(_Right._Getal());

   _Assign_rv(::std:: forward<_Myt>(_Right));
   }
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  this->_Swap_all(_Right);
  _Swap_adl(this->_Myhead, _Right._Myhead);
  ::std:: swap(this->_Mysize, _Right._Mysize);
  }

 void push_front(_Ty&& _Val)
  {
  _Insert(_Unchecked_begin(), ::std:: forward<_Ty>(_Val));
  }

 void push_back(_Ty&& _Val)
  {
  _Insert(_Unchecked_end(), ::std:: forward<_Ty>(_Val));
  }

 iterator insert(const_iterator _Where, _Ty&& _Val)
  {
  return (emplace(_Where, ::std:: forward<_Ty>(_Val)));
  }

 template<class... _Valty>
  void emplace_front(_Valty&&... _Val)
  {
  _Insert(_Unchecked_begin(), ::std:: forward<_Valty>(_Val)...);
  }

 template<class... _Valty>
  void emplace_back(_Valty&&... _Val)
  {
  _Insert(_Unchecked_end(), ::std:: forward<_Valty>(_Val)...);
  }

 template<class... _Valty>
  iterator emplace(const_iterator _Where, _Valty&&... _Val)
  {





  _Insert(_Where._Unchecked(), ::std:: forward<_Valty>(_Val)...);
  return (_Make_iter(--_Where));
  }

 template<class... _Valty>
  void _Insert(_Unchecked_const_iterator _Where,
  _Valty&&... _Val)
  {
  _Nodeptr _Pnode = _Where._Mynode();
  _Nodeptr _Newnode =
   this->_Buynode(_Pnode, this->_Prevnode(_Pnode),
    ::std:: forward<_Valty>(_Val)...);
  _Incsize(1);
  this->_Prevnode(_Pnode) = _Newnode;
  this->_Nextnode(this->_Prevnode(_Newnode)) = _Newnode;
  }


 list(::std:: initializer_list<_Ty> _Ilist,
  const _Alloc& _Al = allocator_type())
  : _Mybase(_Al)
  {
  insert(begin(), _Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<_Ty> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void assign(::std:: initializer_list<_Ty> _Ilist)
  {
  assign(_Ilist.begin(), _Ilist.end());
  }

 iterator insert(const_iterator _Where,
  ::std:: initializer_list<_Ty> _Ilist)
  {
  return (insert(_Where, _Ilist.begin(), _Ilist.end()));
  }

 ~list() throw ()
  {
  _Tidy();
  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   {
   if (this->_Getal() != _Right._Getal()
    && _Alty::propagate_on_container_copy_assignment::value)
    {
    clear();
    this->_Change_alloc(_Right._Getal());
    }

   assign(_Right.begin(), _Right.end());
   }
  return (*this);
  }

 iterator begin() throw ()
  {
  return (iterator(this->_Nextnode(this->_Myhead), this));
  }

 const_iterator begin() const throw ()
  {
  return (const_iterator(this->_Nextnode(this->_Myhead), this));
  }

 iterator end() throw ()
  {
  return (iterator(this->_Myhead, this));
  }

 const_iterator end() const throw ()
  {
  return (const_iterator(this->_Myhead, this));
  }

 _Unchecked_iterator _Unchecked_begin()
  {
  return (_Unchecked_iterator(this->_Nextnode(this->_Myhead),
   this));
  }

 _Unchecked_const_iterator _Unchecked_begin() const
  {
  return (_Unchecked_const_iterator(this->_Nextnode(this->_Myhead),
   this));
  }

 _Unchecked_iterator _Unchecked_end()
  {
  return (_Unchecked_iterator(this->_Myhead, this));
  }

 _Unchecked_const_iterator _Unchecked_end() const
  {
  return (_Unchecked_const_iterator(this->_Myhead, this));
  }

 iterator _Make_iter(const_iterator _Where) const throw ()
  {
  return (iterator(_Where._Ptr, this));
  }

 iterator _Make_iter(_Unchecked_const_iterator _Where) const
  {
  return (iterator(_Where._Ptr, this));
  }

 reverse_iterator rbegin() throw ()
  {
  return (reverse_iterator(end()));
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (const_reverse_iterator(end()));
  }

 reverse_iterator rend() throw ()
  {
  return (reverse_iterator(begin()));
  }

 const_reverse_iterator rend() const throw ()
  {
  return (const_reverse_iterator(begin()));
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 void resize(size_type _Newsize)
  {
  if (this->_Mysize < _Newsize)
   {
   size_type _Count = 0;
   try {
   for (; this->_Mysize < _Newsize; ++_Count)
    _Insert(_Unchecked_end());
   } catch (...) {
   for (; 0 < _Count; --_Count)
    pop_back();
   throw;
   }
   }
  else
   while (_Newsize < this->_Mysize)
    pop_back();
  }

 void resize(size_type _Newsize, const _Ty& _Val)
  {
  if (this->_Mysize < _Newsize)
   _Insert_n(_Unchecked_end(), _Newsize - this->_Mysize, _Val);
  else
   while (_Newsize < this->_Mysize)
    pop_back();
  }

 size_type size() const throw ()
  {
  return (this->_Mysize);
  }

 size_type max_size() const throw ()
  {
  return (this->_Getal().max_size());
  }

 bool empty() const throw ()
  {
  return (this->_Mysize == 0);
  }

 allocator_type get_allocator() const throw ()
  {
  return (this->_Getal());
  }

 reference front()
  {
  return (*begin());
  }

 const_reference front() const
  {
  return (*begin());
  }

 reference back()
  {
  return (*(--end()));
  }

 const_reference back() const
  {
  return (*(--end()));
  }

 void push_front(const _Ty& _Val)
  {
  _Insert(_Unchecked_begin(), _Val);
  }

 void pop_front()
  {
  erase(begin());
  }

 void push_back(const _Ty& _Val)
  {
  _Insert(_Unchecked_end(), _Val);
  }

 void pop_back()
  {
  erase(--end());
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   void>::type
  assign(_Iter _First, _Iter _Last)
  {
  iterator _Old = begin();
  try {
  for (; _First != _Last && _Old != end(); ++_First, ++_Old)
   _Reusenode(_Old, *_First);
  for (; _First != _Last; ++_First)
   _Insert(_Unchecked_end(), *_First);
  } catch (...) {
  clear();
  throw;
  }
  erase(_Old, end());
  }

 template<class _TArg>
  void _Reusenode(iterator _Where, _TArg&& _Arg)
  {
  try {
  this->_Getal().destroy(
   ::std:: addressof(this->_Myval(_Where._Ptr)));
  this->_Getal().construct(
   ::std:: addressof(this->_Myval(_Where._Ptr)),
   ::std:: forward<_TArg>(_Arg));
  } catch (...) {
  _Unlinknode(_Where);
  this->_Getal().destroy(
   ::std:: addressof(this->_Nextnode(_Where._Ptr)));
  this->_Getal().destroy(
   ::std:: addressof(this->_Prevnode(_Where._Ptr)));
  this->_Getal().deallocate(_Where._Ptr, 1);
  throw;
  }
  }

 void assign(size_type _Count, const _Ty& _Val)
  {
  clear();
  _Insert_n(_Unchecked_begin(), _Count, _Val);
  }

 iterator insert(const_iterator _Where, const _Ty& _Val)
  {





  _Insert(_Where._Unchecked(), _Val);
  return (_Make_iter(--_Where));
  }

 iterator insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
  {





  iterator _Prev = _Make_iter(_Where);
  if (_Prev == begin())
   {
   _Insert_n(_Where._Unchecked(), _Count, _Val);
   return (begin());
   }
  else
   {
   --_Prev;
   _Insert_n(_Where._Unchecked(), _Count, _Val);
   return (++_Prev);
   }
  }

 template<class _Iter>
  typename enable_if<_Is_iterator<_Iter>::value,
   iterator>::type
  insert(const_iterator _Where, _Iter _First, _Iter _Last)
  {





  iterator _Prev = _Make_iter(_Where);
  if (_Prev == begin())
   {
   _Insert_range(_Where._Unchecked(), _First, _Last,
    _Iter_cat(_First));
   return (begin());
   }
  else
   {
   --_Prev;
   _Insert_range(_Where._Unchecked(), _First, _Last,
    _Iter_cat(_First));
   return (++_Prev);
   }
  }

 template<class _Iter>
  void _Insert_range(_Unchecked_const_iterator _Where,
   _Iter _First, _Iter _Last, input_iterator_tag)
  {
  size_type _Num = 0;

  try {
  for (; _First != _Last; ++_First, ++_Num)
   _Insert(_Where, *_First);
  } catch (...) {
  for (; 0 < _Num; --_Num)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 template<class _Iter>
  void _Insert_range(_Unchecked_const_iterator _Where,
   _Iter _First, _Iter _Last, forward_iterator_tag)
  {
                             ;
  _Iter _Next = _First;

  try {
  for (; _First != _Last; ++_First)
   _Insert(_Where, *_First);
  } catch (...) {
  for (; _Next != _First; ++_Next)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 _Nodeptr _Unlinknode(const_iterator _Where)
  {







  _Nodeptr _Pnode = (_Where)._Mynode();


  this->_Nextnode(this->_Prevnode(_Pnode)) =
   this->_Nextnode(_Pnode);
  this->_Prevnode(this->_Nextnode(_Pnode)) =
   this->_Prevnode(_Pnode);

  --this->_Mysize;
  return (_Pnode);
  }

 iterator erase(const_iterator _Where)
  {
  _Nodeptr _Pnode = _Unlinknode(_Where++);
  this->_Freenode(_Pnode);
  return (_Make_iter(_Where));
  }

 void _Unchecked_erase(_Unchecked_const_iterator _Where)
  {
  _Nodeptr _Pnode = _Where._Mynode();

  this->_Nextnode(this->_Prevnode(_Pnode)) =
   this->_Nextnode(_Pnode);
  this->_Prevnode(this->_Nextnode(_Pnode)) =
   this->_Prevnode(_Pnode);
  this->_Freenode(_Pnode);
  --this->_Mysize;
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
  if (_First == begin() && _Last == end())
   {
   clear();
   return (end());
   }
  else
   {
   while (_First != _Last)
    _First = erase(_First);
   return (_Make_iter(_Last));
   }
  }

 void clear() throw ()
  {




  _Nodeptr _Pnode = this->_Nextnode(this->_Myhead);
  this->_Nextnode(this->_Myhead) = this->_Myhead;
  this->_Prevnode(this->_Myhead) = this->_Myhead;
  this->_Mysize = 0;

  for (_Nodeptr _Pnext; _Pnode != this->_Myhead; _Pnode = _Pnext)
   {
   _Pnext = this->_Nextnode(_Pnode);
   this->_Freenode(_Pnode);
   }
  }

 void swap(_Myt& _Right)
  {
  if (this == &_Right)
   ;
  else if (this->_Getal() == _Right._Getal())
   {
   this->_Swap_all(_Right);
   _Swap_adl(this->_Myhead, _Right._Myhead);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else if (_Alty::propagate_on_container_swap::value)
   {
   this->_Swap_alloc(_Right);
   _Swap_adl(this->_Myhead, _Right._Myhead);
   ::std:: swap(this->_Mysize, _Right._Mysize);
   }

  else





   ::std:: terminate();

  }

 void splice(const_iterator _Where, _Myt& _Right)
  {
  if (this != &_Right && !_Right.empty())
   {
   _Splice(_Where, _Right, _Right.begin(), _Right.end(),
    _Right._Mysize);
   }
  }

 void splice(const_iterator _Where, _Myt&& _Right)
  {
  splice(_Where, (_Myt&)_Right);
  }

 void splice(const_iterator _Where, _Myt& _Right,
  const_iterator _First)
  {






  if (_First != _Right.end())


   {
   const_iterator _Last = _First;
   ++_Last;
   if (this != &_Right
    || (_Where != _First && _Where != _Last))
    _Splice(_Where, _Right, _First, _Last, 1);
   }
  }

 void splice(const_iterator _Where, _Myt&& _Right,
  const_iterator _First)
  {
  splice(_Where, (_Myt&)_Right, _First);
  }

 void splice(const_iterator _Where,
  _Myt& _Right, const_iterator _First, const_iterator _Last)
  {
  if (_First != _Last && (this != &_Right || _Where != _Last))
   {
   size_type _Count = 0;

   if (this == &_Right)
    ;
   else if (_First == _Right.begin() && _Last == _Right.end())
    _Count = _Right._Mysize;
   else
    {
    const_iterator _Next = _First;

    for (; _Next != _Last; ++_Next, ++_Count)
     if (_Next == _Right.end())
      _Xlength_error("list<T> bad splice");
    }
   _Splice(_Where, _Right, _First, _Last, _Count);
   }
  }

 void splice(const_iterator _Where,
  _Myt&& _Right, const_iterator _First, const_iterator _Last)
  {
  splice(_Where, (_Myt&)_Right, _First, _Last);
  }

 void remove(const _Ty& _Val)
  {
  iterator _Val_it = end();

  for (iterator _First = begin(); _First != end(); )
   if (*_First == _Val)
    if (::std:: addressof(*_First) == ::std:: addressof(_Val))
     _Val_it = _First++;
    else
     _First = erase(_First);
   else
    ++_First;

  if (_Val_it != end())
   erase(_Val_it);
  }

 template<class _Pr1>
  void remove_if(_Pr1 _Pred)
  {
  for (iterator _First = begin(); _First != end(); )
   if (_Pred(*_First))
    _First = erase(_First);
   else
    ++_First;
  }

 void unique()
  {
  unique(equal_to<>());
  }

 template<class _Pr2>
  void unique(_Pr2 _Pred)
  {
  const _Nodeptr _Phead = this->_Myhead;
  _Nodeptr _Pprev = this->_Nextnode(_Phead);
  _Nodeptr _Pnode = this->_Nextnode(_Pprev);

  while (_Pnode != _Phead)
   if (_Pred(_Pprev->_Myval, _Pnode->_Myval))
    {
    const _Nodeptr _Perase = _Pnode;
    _Pnode = this->_Nextnode(_Pnode);

    this->_Nextnode(_Pprev) = _Pnode;
    this->_Prevnode(_Pnode) = _Pprev;
    this->_Freenode(_Perase);

    --this->_Mysize;
    }
   else
    {
    _Pprev = _Pnode;
    _Pnode = this->_Nextnode(_Pnode);
    }
  }

 void merge(_Myt& _Right)
  {
  merge(_Right, less<>());
  }

 void merge(_Myt&& _Right)
  {
  merge((_Myt&)_Right);
  }

 template<class _Pr2>
  void merge(_Myt& _Right, _Pr2 _Pred)
  {
  if (&_Right != this)
   {
   iterator _First1 = begin(), _Last1 = end();
   iterator _First2 = _Right.begin(), _Last2 = _Right.end();
                                            ;
                                            ;

   while (_First1 != _Last1 && _First2 != _Last2)
    if (_Pred(*_First2, *_First1))
     {
     iterator _Mid2 = _First2;
     _Splice(_First1, _Right, _First2, ++_Mid2, 1);
     _First2 = _Mid2;
     }
    else
     ++_First1;

   if (_First2 != _Last2)
    _Splice(_Last1, _Right, _First2, _Last2,
     _Right._Mysize);
   }
  }

 template<class _Pr2>
  void merge(_Myt&& _Right, _Pr2 _Pred)
  {
  merge((_Myt&)_Right, _Pred);
  }

 void sort()
  {
  sort(less<>());
  }

 template<class _Pr2>
  void sort(_Pr2 _Pred)
  {
  if (2 <= this->_Mysize)
   {
   const size_t _MAXBINS = 25;
   _Myt _Templist(this->_Getal()), _Binlist[_MAXBINS + 1];
   size_t _Maxbin = 0;

   while (!empty())
    {
    _Templist._Splice_same(_Templist.begin(), *this, begin(),
     ++begin(), 1);

    size_t _Bin;
    for (_Bin = 0; _Bin < _Maxbin && !_Binlist[_Bin].empty();
     ++_Bin)
     {
     _Binlist[_Bin].merge(_Templist, _Pred);
     _Binlist[_Bin].swap(_Templist);
     }

    if (_Bin == _MAXBINS)
     _Binlist[_Bin - 1].merge(_Templist, _Pred);
    else
     {
     _Binlist[_Bin].swap(_Templist);
     if (_Bin == _Maxbin)
      ++_Maxbin;
     }
    }

   for (size_t _Bin = 1; _Bin < _Maxbin; ++_Bin)
    _Binlist[_Bin].merge(_Binlist[_Bin - 1],
     _Pred);

                                 ;

   splice(begin(), _Binlist[_Maxbin - 1]);
   }
  }

 void reverse() throw ()
  {
  const _Nodeptr _Phead = this->_Myhead;
  _Nodeptr _Pnode = _Phead;

  for (; ; )
   {
   const _Nodeptr _Pnext = this->_Nextnode(_Pnode);
   this->_Nextnode(_Pnode) = this->_Prevnode(_Pnode);
   this->_Prevnode(_Pnode) = _Pnext;

   if (_Pnext == _Phead)
    break;
   _Pnode = _Pnext;
   }
  }

 void _Splice(const_iterator _Where,
  _Myt& _Right, const_iterator _First, const_iterator _Last,
  size_type _Count)
  {
#line 1831 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
  if (this->_Getal() != _Right._Getal())
   ::std:: terminate();


  _Splice_same(_Where, _Right, _First, _Last, _Count);
  }

 void _Splice_same(const_iterator _Where,
  _Myt& _Right, const_iterator _First, const_iterator _Last,
  size_type _Count)
  {
  if (this != &_Right)
   {
   _Incsize(_Count);
   _Right._Mysize -= _Count;
   }
  this->_Nextnode(this->_Prevnode(_First._Mynode())) =
   _Last._Mynode();
  this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
   _Where._Mynode();
  this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
   _First._Mynode();

  _Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
  this->_Prevnode(_Where._Mynode()) =
   this->_Prevnode(_Last._Mynode());
  this->_Prevnode(_Last._Mynode()) =
   this->_Prevnode(_First._Mynode());
  this->_Prevnode(_First._Mynode()) = _Pnode;
  }

 void _Unchecked_splice(_Unchecked_const_iterator _Where,
  _Unchecked_const_iterator _First,
  _Unchecked_const_iterator _Last)
  {
  this->_Nextnode(this->_Prevnode(_First._Mynode())) =
   _Last._Mynode();
  this->_Nextnode(this->_Prevnode(_Last._Mynode())) =
   _Where._Mynode();
  this->_Nextnode(this->_Prevnode(_Where._Mynode())) =
   _First._Mynode();

  _Nodeptr _Pnode = this->_Prevnode(_Where._Mynode());
  this->_Prevnode(_Where._Mynode()) =
   this->_Prevnode(_Last._Mynode());
  this->_Prevnode(_Last._Mynode()) =
   this->_Prevnode(_First._Mynode());
  this->_Prevnode(_First._Mynode()) = _Pnode;
  }

 void _Tidy()
  {
  clear();
  }

 void _Insert_n(_Unchecked_const_iterator _Where,
  size_type _Count, const _Ty& _Val)
  {
  size_type _Countsave = _Count;

  try {
  for (; 0 < _Count; --_Count)
   _Insert(_Where, _Val);
  } catch (...) {
  for (; _Count < _Countsave; ++_Count)
   {
   _Unchecked_const_iterator _Before = _Where;
   _Unchecked_erase(--_Before);
   }
  throw;
  }
  }

 void _Incsize(size_type _Count)
  {
  if (max_size() - this->_Mysize - 1 < _Count)
   _Xlength_error("list<T> too long");
  this->_Mysize += _Count;
  }
#line 1928 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\list"
 };



template<class _Ty,
 class _Alloc> inline
 void swap(list<_Ty, _Alloc>& _Left, list<_Ty, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator==(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (_Left.size() == _Right.size()
  && equal(_Left.begin(), _Left.end(), _Right.begin()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator!=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (lexicographical_compare(_Left.begin(), _Left.end(),
  _Right.begin(), _Right.end()));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Ty,
 class _Alloc> inline
 bool operator<=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Ty,
 class _Alloc> inline
 bool operator>=(const list<_Ty, _Alloc>& _Left,
  const list<_Ty, _Alloc>& _Right)
 {
 return (!(_Left < _Right));
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 8 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xhash"



#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4127)

namespace stdext {
using ::std:: basic_string;
using ::std:: is_empty;
using ::std:: less;
using ::std:: size_t;




template<class _Kty> inline
 size_t hash_value(const _Kty& _Keyval)
 {
 return ((size_t)_Keyval ^ (size_t)0xdeadbeef);
 }

template<class _Elem,
 class _Traits,
 class _Alloc> inline
 size_t hash_value(const basic_string<_Elem, _Traits, _Alloc>& _Str)
 {
 return (::std:: _Hash_seq((const unsigned char *)_Str.c_str(),
  _Str.size() * sizeof (_Elem)));
 }

inline size_t hash_value( const char *_Str)
 {
 return (::std:: _Hash_seq((const unsigned char *)_Str,
  :: strlen(_Str)));
 }

inline size_t hash_value( const wchar_t *_Str)
 {
 return (::std:: _Hash_seq((const unsigned char *)_Str,
  :: wcslen(_Str) * sizeof (wchar_t)));
 }


template<bool _Comp_has_storage,
 class _Kty,
 class _Pr>
 class _Hash_pr
 {
public:
 _Hash_pr(_Pr _Pred)
  : comp(_Pred)
  {
  }

 const _Pr& _Getcomp() const
  {
  return (comp);
  }

 _Pr comp;
 };

template<class _Kty,
 class _Pr>
 class _Hash_pr<false, _Kty, _Pr>
 {
public:
 _Hash_pr(_Pr)
  {
  }

 _Pr _Getcomp() const
  {
  return (_Pr());
  }
 };


template<class _Kty,
 class _Pr = less<_Kty> >
 class hash_compare
  : public _Hash_pr<!is_empty<_Pr>::value,
   _Kty, _Pr>
 {
public:
 typedef _Hash_pr<!is_empty<_Pr>::value,
  _Kty, _Pr> _Mybase;
 enum
  {
  bucket_size = 1
  };

 hash_compare(_Pr _Pred = _Pr())
  : _Mybase(_Pred)
  {
  }

 size_t operator()(const _Kty& _Keyval) const
  {
  long _Quot = (long)(hash_value(_Keyval) & 2147483647L);
  ldiv_t _Qrem = :: ldiv(_Quot, 127773);

  _Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
  if (_Qrem.rem < 0)
   _Qrem.rem += 2147483647L;
  return ((size_t)_Qrem.rem);
  }

 bool operator()(const _Kty& _Keyval1, const _Kty& _Keyval2) const
  {
  return (this->_Getcomp()(_Keyval1, _Keyval2));
  }
 };
}
namespace std {
using stdext::hash_compare;
using stdext::hash_value;
}

namespace std {

template<bool _Hasher_has_storage,
 class _Hasher>
 class _Hash_oper1
 {
public:
 typedef _Hasher hasher;

 _Hash_oper1(_Hasher _Hasharg)
  : _Hashobj(_Hasharg)
  {
  }

 const hasher& _Gethash() const
  {
  return (_Hashobj);
  }

 _Hasher _Hashobj;
 };

template<class _Hasher>
 class _Hash_oper1<false, _Hasher>
 {
public:
 typedef _Hasher hasher;

 _Hash_oper1(_Hasher)
  {
  }

 hasher _Gethash() const
  {
  return (_Hasher());
  }
 };


template<bool _Comparator_has_storage,
 class _Hasher,
 class _Keyeq>
 class _Hash_oper2
  : public _Hash_oper1<!is_empty<_Hasher>::value,
   _Hasher>
 {
public:
 typedef _Hash_oper1<!is_empty<_Hasher>::value, _Hasher> _Mybase;

 _Hash_oper2(_Hasher _Hasharg = _Hasher(), _Keyeq _Keyeqarg = _Keyeq())
  : _Mybase(_Hasharg), _Keyeqobj(_Keyeqarg)
  {
  }

 const _Keyeq& _Getkeyeq() const
  {
  return (_Keyeqobj);
  }

 _Keyeq _Keyeqobj;
 };

template<class _Hasher,
 class _Keyeq>
 class _Hash_oper2<false, _Hasher, _Keyeq>
  : public _Hash_oper1<!is_empty<_Hasher>::value,
   _Hasher>
 {
public:
 typedef _Hash_oper1<!is_empty<_Hasher>::value, _Hasher> _Mybase;

 _Hash_oper2(_Hasher _Hasharg = _Hasher(), _Keyeq = _Keyeq())
  : _Mybase(_Hasharg)
  {
  }

 _Keyeq _Getkeyeq() const
  {
  return (_Keyeq());
  }
 };


template<class _Kty,
 class _Hasher,
 class _Keyeq>
 class _Uhash_compare
  : public _Hash_oper2<!is_empty<_Keyeq>::value,
   _Hasher, _Keyeq>
 {
public:
 typedef _Hash_oper2<!is_empty<_Keyeq>::value,
  _Hasher, _Keyeq> _Mybase;

 enum
  {
  bucket_size = 1
  };

 _Uhash_compare(_Hasher _Hasharg = _Hasher(), _Keyeq _Keyeqarg = _Keyeq())
  : _Mybase(_Hasharg, _Keyeqarg)
  {
  }

 _Uhash_compare(_Keyeq _Keyeqarg)
  : _Mybase(_Hasher(), _Keyeqarg)
  {
  }

 size_t operator()(const _Kty& _Keyval) const
  {
  return ((size_t)this->_Gethash()(_Keyval));
  }

 bool operator()(const _Kty& _Keyval1, const _Kty& _Keyval2) const
  {
  return (!this->_Getkeyeq()(_Keyval1, _Keyval2));
  }
 };


template<class _Traits>
 class _Hash
  : public _Traits
 {
public:
 typedef _Hash<_Traits> _Myt;

 typedef typename _Traits::key_type key_type;
 typedef typename _Traits::key_compare key_compare;
 typedef typename _Traits::value_compare value_compare;
 enum
  {
  _Bucket_size = key_compare::bucket_size,
  _Min_buckets = 8,
  _Multi = _Traits::_Multi};
 typedef list<typename _Traits::value_type,
  typename _Traits::allocator_type> _Mylist;
 typedef typename _Mylist::_Alty _Alty;

 typedef typename _Mylist::value_type value_type;
 typedef typename _Mylist::allocator_type allocator_type;
 typedef typename _Mylist::size_type size_type;
 typedef typename _Mylist::difference_type difference_type;
 typedef typename _Mylist::pointer pointer;
 typedef typename _Mylist::const_pointer const_pointer;
 typedef typename _Mylist::reference reference;
 typedef typename _Mylist::const_reference const_reference;

 typedef typename _If<is_same<key_type, value_type>::value,
  typename _Mylist::const_iterator,
  typename _Mylist::iterator>::type iterator;
 typedef typename _Mylist::const_iterator const_iterator;

 typedef typename _If<is_same<key_type, value_type>::value,
  typename _Mylist::_Unchecked_const_iterator,
  typename _Mylist::_Unchecked_iterator>::type
  _Unchecked_iterator;
 typedef typename _Mylist::_Unchecked_const_iterator
  _Unchecked_const_iterator;

 typedef ::std:: reverse_iterator<iterator> reverse_iterator;
 typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

 typedef vector<_Unchecked_iterator,
  typename _Alty::template
   rebind<_Unchecked_iterator>::other> _Myvec;

 typedef pair<iterator, bool> _Pairib;
 typedef pair<iterator, iterator> _Pairii;
 typedef pair<const_iterator, const_iterator> _Paircc;

 _Hash(const key_compare& _Parg,
  const allocator_type& _Al)
  : _Traits(_Parg),

   _List(_Al),
   _Vec(_Al),

   _Max_bucket_size(_Bucket_size)
  {
  _Init();
  }

 _Hash(const value_type *_First, const value_type *_Last,
  const key_compare& _Parg, const allocator_type& _Al)
  : _Traits(_Parg),

   _List(_Al),
   _Vec(_Al),

   _Max_bucket_size(_Bucket_size)
  {
  _Init();
  insert(_First, _Last);
  }

 _Hash(const _Myt& _Right, const allocator_type& _Al)
  : _Traits(),

   _List(_Al),
   _Vec(_Al),

   _Max_bucket_size(_Bucket_size)
  {
  _Copy(_Right);
  }

 _Hash(_Myt&& _Right, const allocator_type& _Al)
  : _Traits(),

   _List(_Al),
   _Vec(_Al),

   _Max_bucket_size(_Bucket_size)
  {
  _Assign_rv(::std:: forward<_Myt>(_Right));
  }

 _Myt& operator=(_Myt&& _Right)
  {
  if (this != &_Right)
   _Assign_rv(::std:: forward<_Myt>(_Right));
  return (*this);
  }

 void _Assign_rv(_Myt&& _Right)
  {
  _Right.swap(*this);
  _Right.clear();
  }

 _Pairib insert(value_type&& _Val)
  {
  return (_Insert(::std:: forward<value_type>(_Val), _Nil_obj));
  }

 iterator insert(const_iterator, value_type&& _Val)
  {
  return (_Insert(::std:: forward<value_type>(_Val), _Nil_obj).first);
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   _Pairib>::type
  insert(_Valty&& _Val)
  {
  _List.emplace_front(::std:: forward<_Valty>(_Val));
  return (_Insert(_List.front(), _Unchecked_begin()));
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(const_iterator, _Valty&& _Val)
  {
  _List.emplace_front(::std:: forward<_Valty>(_Val));
  return (_Insert(_List.front(), _Unchecked_begin()).first);
  }

 template<class... _Valty>
  _Pairib emplace(_Valty&&... _Val)
  {
  _List.emplace_front(::std:: forward<_Valty>(_Val)...);
  return (_Insert(_List.front(), _Unchecked_begin()));
  }

 template<class... _Valty>
  iterator emplace_hint(const_iterator, _Valty&&... _Val)
  {
  _List.emplace_front(::std:: forward<_Valty>(_Val)...);
  return (_Insert(_List.front(), _Unchecked_begin()).first);
  }


 ~_Hash() throw ()
  {

  }

 _Myt& operator=(const _Myt& _Right)
  {
  if (this != &_Right)
   _Copy(_Right);
  return (*this);
  }

 iterator begin() throw ()
  {
  return (_List.begin());
  }

 const_iterator begin() const throw ()
  {
  return (_List.begin());
  }

 iterator end() throw ()
  {
  return (_List.end());
  }

 const_iterator end() const throw ()
  {
  return (_List.end());
  }

 _Unchecked_iterator _Unchecked_begin()
  {
  return (_List._Unchecked_begin());
  }

 _Unchecked_const_iterator _Unchecked_begin() const
  {
  return (_List._Unchecked_begin());
  }

 _Unchecked_iterator _Unchecked_end()
  {
  return (_List._Unchecked_end());
  }

 _Unchecked_const_iterator _Unchecked_end() const
  {
  return (_List._Unchecked_end());
  }

 iterator _Make_iter(_Unchecked_const_iterator _Where) const
  {
  return (_List._Make_iter(_Where));
  }

 iterator _Make_iter(const_iterator _Where) const
  {
  return (_List._Make_iter(_Where));
  }

 reverse_iterator rbegin() throw ()
  {
  return (_List.rbegin());
  }

 const_reverse_iterator rbegin() const throw ()
  {
  return (_List.rbegin());
  }

 reverse_iterator rend() throw ()
  {
  return (_List.rend());
  }

 const_reverse_iterator rend() const throw ()
  {
  return (_List.rend());
  }

 const_iterator cbegin() const throw ()
  {
  return (((const _Myt *)this)->begin());
  }

 const_iterator cend() const throw ()
  {
  return (((const _Myt *)this)->end());
  }

 const_reverse_iterator crbegin() const throw ()
  {
  return (((const _Myt *)this)->rbegin());
  }

 const_reverse_iterator crend() const throw ()
  {
  return (((const _Myt *)this)->rend());
  }

 size_type size() const throw ()
  {
  return (_List.size());
  }

 size_type max_size() const throw ()
  {
  return (_List.max_size());
  }

 bool empty() const throw ()
  {
  return (_List.empty());
  }

 allocator_type get_allocator() const throw ()
  {
  return (_List.get_allocator());
  }

 key_compare key_comp() const
  {
  return (*this);
  }

 value_compare value_comp() const
  {
  return (value_compare(key_comp()));
  }


 typedef iterator local_iterator;
 typedef const_iterator const_local_iterator;

 size_type bucket_count() const throw ()
  {
  return (_Maxidx);
  }

 size_type max_bucket_count() const throw ()
  {
  return (_Vec.size() / 2);
  }

 size_type bucket(const key_type& _Keyval) const
  {
  return (_Hashval(_Keyval));
  }

 size_type bucket_size(size_type _Bucket) const
  {
  size_type _Ans = 0;
  if (_Bucket < _Maxidx)
   for (_Unchecked_const_iterator _Plist = _Begin(_Bucket);
    _Plist != _End(_Bucket); ++_Plist)
    ++_Ans;
  return (_Ans);
  }

 local_iterator begin(size_type _Bucket)
  {
  if (_Bucket < bucket_count())
   return (_Make_iter(_Begin(_Bucket)));
  else
   return (end());
  }

 const_local_iterator begin(size_type _Bucket) const
  {
  if (_Bucket < bucket_count())
   return (_Make_iter(_Begin(_Bucket)));
  else
   return (end());
  }

 local_iterator end(size_type _Bucket)
  {
  if (_Bucket < bucket_count())
   return (_Make_iter(_End(_Bucket)));
  else
   return (end());
  }

 const_local_iterator end(size_type _Bucket) const
  {
  if (_Bucket < bucket_count())
   return (_Make_iter(_End(_Bucket)));
  else
   return (end());
  }

 const_local_iterator cbegin(size_type _Bucket) const throw ()
  {
  if (_Bucket < bucket_count())
   return (_Make_iter(_Begin(_Bucket)));
  else
   return (end());
  }

 const_local_iterator cend(size_type _Bucket) const throw ()
  {
  if (_Bucket < bucket_count())
   return (_Make_iter(_End(_Bucket)));
  else
   return (end());
  }

 float load_factor() const throw ()
  {
  return ((float)size() / (float)bucket_count());
  }

 float max_load_factor() const throw ()
  {
  return (_Max_bucket_size);
  }

 void max_load_factor(float _Newmax)
  {
  if (_Newmax != _Newmax
   || _Newmax < 0)
   _Xout_of_range("invalid hash load factor");

  _Max_bucket_size = _Newmax;
  }

 void rehash(size_type _Buckets)
  {
  size_type _Maxsize = _Vec.max_size() / 4;
  size_type _Newsize = _Min_buckets;

  for (; _Newsize < _Buckets && _Newsize < _Maxsize; )
   _Newsize *= 2;
  if (_Newsize < _Buckets)
   _Xout_of_range("invalid hash bucket count");
  for (float _Size = (float)size();
   max_load_factor() < _Size / _Newsize && _Newsize < _Maxsize; )
   _Newsize *= 2;

  _Init(_Newsize);
  _Reinsert();
  }

 void reserve(size_type _Maxcount)
  {
  rehash((size_type)((float)(_Maxcount / max_load_factor() + 0.5F)));
  }


 _Pairib insert(const value_type& _Val)
  {
  return (_Insert(_Val, _Nil_obj));
  }

 iterator insert(const_iterator,
  const value_type& _Val)
  {
  return (_Insert(_Val, _Nil_obj).first);
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
                             ;
  for (; _First != _Last; ++_First)

   emplace(*_First);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  insert(_Ilist.begin(), _Ilist.end());
  }

 iterator erase(const_iterator _Plist)
  {
  size_type _Bucket = _Hashval(this->_Kfn(*_Plist));

  _Erase_bucket(_Make_iter(_Plist), _Bucket);
  return (_List.erase(_Plist));
  }

 iterator erase(const_iterator _First, const_iterator _Last)
  {
                             ;
  if (_First == begin() && _Last == end())
   {
   clear();
   return (begin());
   }
  else
   {
   while (_First != _Last)
    erase(_First++);
   return (_Make_iter(_First));
   }
  }

 size_type erase(const key_type& _Keyval)
  {
  _Pairii _Where = equal_range(_Keyval);
  size_type _Num = 0;
  _Distance(_Where.first, _Where.second, _Num);
  erase(_Where.first, _Where.second);
  return (_Num);
  }

 void clear() throw ()
  {
  _List.clear();
  _Init();
  }

 iterator find(const key_type& _Keyval)
  {
  return (lower_bound(_Keyval));
  }

 const_iterator find(const key_type& _Keyval) const
  {
  return (lower_bound(_Keyval));
  }

 size_type count(const key_type& _Keyval) const
  {
  _Paircc _Ans = equal_range(_Keyval);
  size_type _Num = 0;
  _Distance(_Ans.first, _Ans.second, _Num);
  return (_Num);
  }

 iterator lower_bound(const key_type& _Keyval)
  {
  size_type _Bucket = _Hashval(_Keyval);
  for (_Unchecked_iterator _Where = _Begin(_Bucket);
   _Where != _End(_Bucket); ++_Where)
   if (!((_Traits&)*this)(this->_Kfn(*_Where), _Keyval))
    return (((_Traits&)*this)(_Keyval,
     this->_Kfn(*_Where)) ? end() : _Make_iter(_Where));
  return (end());
  }

 const_iterator lower_bound(const key_type& _Keyval) const
  {
  size_type _Bucket = _Hashval(_Keyval);
  for (_Unchecked_const_iterator _Where = _Begin(_Bucket);
   _Where != _End(_Bucket); ++_Where)
   if (!((_Traits&)*this)(this->_Kfn(*_Where), _Keyval))
    return (((_Traits&)*this)(_Keyval,
     this->_Kfn(*_Where)) ? end() : _Make_iter(_Where));
  return (end());
  }

 iterator upper_bound(const key_type& _Keyval)
  {
  size_type _Bucket = _Hashval(_Keyval);
  for (_Unchecked_iterator _Where = _End(_Bucket);
   _Where != _Begin(_Bucket); )
   if (!((_Traits&)*this)(_Keyval, this->_Kfn(*--_Where)))
    return (((_Traits&)*this)(this->_Kfn(*_Where),
     _Keyval) ? end() : _Make_iter(++_Where));
  return (end());
  }

 const_iterator upper_bound(const key_type& _Keyval) const
  {
  size_type _Bucket = _Hashval(_Keyval);
  for (_Unchecked_const_iterator _Where = _End(_Bucket);
   _Where != _Begin(_Bucket); )
   if (!((_Traits&)*this)(_Keyval, this->_Kfn(*--_Where)))
    return (((_Traits&)*this)(this->_Kfn(*_Where),
     _Keyval) ? end() : _Make_iter(++_Where));
  return (end());
  }

 _Pairii equal_range(const key_type& _Keyval)
  {
  size_type _Bucket = _Hashval(_Keyval);
  for (_Unchecked_iterator _Where = _Begin(_Bucket);
   _Where != _End(_Bucket); ++_Where)
   if (!((_Traits&)*this)(this->_Kfn(*_Where), _Keyval))
    {
    _Unchecked_iterator _First = _Where;
    for (; _Where != _End(_Bucket); ++_Where)
     if (((_Traits&)*this)(_Keyval, this->_Kfn(*_Where)))
      break;
    if (_First == _Where)
     break;
    return (_Pairii(_Make_iter(_First),
     _Make_iter(_Where)));
    }
  return (_Pairii(end(), end()));
  }

 _Paircc equal_range(const key_type& _Keyval) const
  {
  size_type _Bucket = _Hashval(_Keyval);
  for (_Unchecked_const_iterator _Where = _Begin(_Bucket);
   _Where != _End(_Bucket); ++_Where)
   if (!((_Traits&)*this)(this->_Kfn(*_Where), _Keyval))
    {
    _Unchecked_const_iterator _First = _Where;
    for (; _Where != _End(_Bucket); ++_Where)
     if (((_Traits&)*this)(_Keyval, this->_Kfn(*_Where)))
      break;
    if (_First == _Where)
     break;
    return (_Paircc(_Make_iter(_First),
     _Make_iter(_Where)));
    }
  return (_Paircc(end(), end()));
  }

 void swap(_Myt& _Right)
  {
  if (this != &_Right)
   {
   _Swap_adl((_Traits&)*this, (_Traits&)_Right);
   this->_List.swap(_Right._List);
   this->_Vec.swap(_Right._Vec);
   ::std:: swap(this->_Mask, _Right._Mask);
   ::std:: swap(this->_Maxidx, _Right._Maxidx);
   ::std:: swap(this->_Max_bucket_size, _Right._Max_bucket_size);
   }
  }

protected:
 template<class _Valty>
  _Unchecked_iterator _Buynode_if_nil(_Valty&&,
   _Unchecked_iterator _Plist)
  {
  return (_Plist);
  }

 template<class _Valty>
  _Unchecked_iterator _Buynode_if_nil(_Valty&& _Val, _Nil)
  {
  _List.push_front(::std:: forward<_Valty>(_Val));
  return (_Unchecked_begin());
  }

 void _Destroy_if_not_nil(_Unchecked_iterator _Plist)
  {
  _List.erase(_Make_iter(_Plist));
  }

 void _Destroy_if_not_nil(_Nil)
  {
  }

 template<class _Valty,
  class _Nodety>
  _Pairib _Insert(_Valty&& _Val, _Nodety _Pnode)
  {
  size_type _Bucket;
  _Unchecked_iterator _Where;

  try {
  _Bucket = _Hashval(this->_Kfn(_Val));
  _Where = _End(_Bucket);
  for (; _Where != _Begin(_Bucket); )
   if (((_Traits&)*this)(this->_Kfn(_Val), this->_Kfn(*--_Where)))
    ;
   else if (_Multi
    || ((_Traits&)*this)(this->_Kfn(*_Where), this->_Kfn(_Val)))
    {
    ++_Where;
    break;
    }
   else
    {
    _Destroy_if_not_nil(_Pnode);
    return (_Pairib(_Make_iter(_Where), false));
    }
  } catch (...) {
  _Destroy_if_not_nil(_Pnode);
  throw;
  }

  _Unchecked_iterator _Plist =
   _Buynode_if_nil(::std:: forward<_Valty>(_Val), _Pnode);
  _Unchecked_iterator _Next = _Plist;

  if (_Where != ++_Next)
   _List._Unchecked_splice(_Where, _Plist, _Next);

  _Insert_bucket(_Plist, _Where, _Bucket);
  _Check_size();
  return (_Pairib(_Make_iter(_Plist), true));
  }

 _Unchecked_iterator& _Vec_lo(size_type _Bucket)
  {
  return (_Vec[2 * _Bucket]);
  }

 _Unchecked_const_iterator& _Vec_lo(size_type _Bucket) const
  {
  return ((_Unchecked_const_iterator&)_Vec[2 * _Bucket]);
  }

 _Unchecked_iterator& _Vec_hi(size_type _Bucket)
  {
  return (_Vec[2 * _Bucket + 1]);
  }

 _Unchecked_const_iterator& _Vec_hi(size_type _Bucket) const
  {
  return ((_Unchecked_const_iterator&)_Vec[2 * _Bucket + 1]);
  }

 _Unchecked_iterator _Begin(size_type _Bucket)
  {
  return (_Vec_lo(_Bucket));
  }

 _Unchecked_const_iterator _Begin(size_type _Bucket) const
  {
  return (_Vec_lo(_Bucket));
  }

 _Unchecked_iterator _End(size_type _Bucket)
  {
  if (_Vec_lo(_Bucket) == _Unchecked_end())
   return (_Unchecked_end());
  else
   {
   _Unchecked_iterator _Ans = _Vec_hi(_Bucket);
   return (++_Ans);
   }
  }
 _Unchecked_const_iterator _End(size_type _Bucket) const
  {
  if (_Vec_lo(_Bucket) == _Unchecked_end())
   return (_Unchecked_end());
  else
   {
   _Unchecked_const_iterator _Ans = _Vec_hi(_Bucket);
   return (++_Ans);
   }
  }

 void _Erase_bucket(iterator _Plist_arg, size_type _Bucket)
  {
  _Unchecked_iterator _Plist = _Plist_arg._Unchecked();
  if (_Vec_hi(_Bucket) == _Plist)
   if (_Vec_lo(_Bucket) == _Plist)
    {
    _Vec_lo(_Bucket) = _Unchecked_end();
    _Vec_hi(_Bucket) = _Unchecked_end();
    }
   else
    _Vec_hi(_Bucket) = --_Plist;
  else if (_Vec_lo(_Bucket) == _Plist)
   _Vec_lo(_Bucket) = ++_Plist;
  }

 void _Insert_bucket(_Unchecked_iterator _Plist,
  _Unchecked_iterator _Where, size_type _Bucket)
  {
  if (_Vec_lo(_Bucket) == _Unchecked_end())
   {
   _Vec_lo(_Bucket) = _Plist;
   _Vec_hi(_Bucket) = _Plist;
   }
  else if (_Vec_lo(_Bucket) == _Where)
   _Vec_lo(_Bucket) = _Plist;
  else if (++_Vec_hi(_Bucket) != _Plist)
   --_Vec_hi(_Bucket);
  }

 void _Copy(const _Myt& _Right)
  {
  _Mask = _Right._Mask;
  _Maxidx = _Right._Maxidx;
  _Max_bucket_size = _Right._Max_bucket_size;
  _List.clear();

  try {
  (_Traits&)*this = (_Traits&)_Right;
  _Vec.assign(_Right._Vec.size(), _Unchecked_end());
  insert(_Right.begin(), _Right.end());
  } catch (...) {
  clear();
  throw;
  }
  }

 size_type _Hashval(const key_type& _Keyval) const
  {
  size_type _Num = ((_Traits&)*this)(_Keyval) & _Mask;
  if (_Maxidx <= _Num)
   _Num -= (_Mask >> 1) + 1;
  return (_Num);
  }

 void _Init(size_type _Buckets = _Min_buckets)
  {
  _Vec.assign(2 * _Buckets, _Unchecked_end());
  _Mask = _Buckets - 1;
  _Maxidx = _Buckets;
  }

 void _Check_size()
  {
  if (max_load_factor() < load_factor())

   {
   size_type _Newsize = bucket_count();

   if (_Newsize < 512)
    _Newsize *= 8;
   else if (_Newsize < _Vec.max_size() / 2)
    _Newsize *= 2;
   _Init(_Newsize);
   _Reinsert();
   }
  }

 void _Reinsert()
  {
  _Unchecked_iterator _Last = _Unchecked_end();
  if (_Unchecked_begin() != _Last)
   for (--_Last; ; )
    {
    _Unchecked_iterator _First = _Unchecked_begin();
    bool _Done = _First == _Last;
    _Insert(*_First, _First);
    if (_Done)
     break;
    }
  }

 _Mylist _List;
 _Myvec _Vec;
 size_type _Mask;
 size_type _Maxidx;
 float _Max_bucket_size;
 };


template<class _Traits> inline
 bool _Hash_equal_elements(
  const _Hash<_Traits>& _Left,
  const _Hash<_Traits>& _Right,
  false_type)
 {
 typedef typename _Hash<_Traits>::const_iterator _Iter;
 for (_Iter _Next1 = _Left.begin(); _Next1 != _Left.end(); ++_Next1)
  {
  _Iter _Next2 = _Right.find(_Left._Kfn(*_Next1));
  if (_Next2 == _Right.end()
   || !(_Left._Nonkfn(*_Next1) == _Right._Nonkfn(*_Next2)))
   return (false);
  }
 return (true);
 }

template<class _Traits> inline
 bool _Hash_equal_elements(
  const _Hash<_Traits>& _Left,
  const _Hash<_Traits>& _Right,
  true_type)
 {
 typedef typename _Hash<_Traits>::const_iterator _Iter;
 typedef pair<_Iter, _Iter> _Iter_pair;

 for (_Iter _Next1 = _Left.begin(); _Next1 != _Left.end(); )
  {
  _Iter_pair _Lrange = _Left.equal_range(_Left._Kfn(*_Next1));
  _Iter_pair _Rrange = _Right.equal_range(_Left._Kfn(*_Next1));

  if (distance(_Lrange.first, _Lrange.second)
   != distance(_Rrange.first, _Rrange.second)
    || !is_permutation(_Lrange.first, _Lrange.second,
     _Rrange.first))
   return (false);
  _Next1 = _Lrange.second;
  }
 return (true);
 }

template<class _Traits> inline
 bool _Hash_equal(
  const _Hash<_Traits>& _Left,
  const _Hash<_Traits>& _Right)
 {
 return (_Left.size() == _Right.size() && _Hash_equal_elements(
  _Left, _Right, integral_constant<bool, _Traits::_Multi>()));
 }
}


#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\unordered_map"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\tuple"
#line 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\tuple"
#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 4100 4521 4522)

namespace std {

template<class _Src,
 class _Dest>
 struct _Tuple_enable
 {
 };

template<>
 struct _Tuple_enable<tuple<>, tuple<> >
 {
 typedef void ** type;
 };

template<class _Src0,
 class... _Types1,
 class _Dest0,
 class... _Types2>
 struct _Tuple_enable<tuple<_Src0, _Types1...>,
  tuple<_Dest0, _Types2...> >
 : _If<is_convertible<_Src0, _Dest0>::value,
  _Tuple_enable<tuple<_Types1...>, tuple<_Types2...> >,
  _Tuple_enable<int, int>
 >::type
 {
 };



class _Ignore
 {
public:
 _Ignore()
  {
  }

 template<class _Ty>
  void operator=(const _Ty&) const
  {
  }
 };

const _Ignore ignore;


struct _Tuple_alloc_t
 {
 };

const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();


template<class _Ty>
 struct _Tuple_val
 {
 _Tuple_val()
  : _Val()
  {
  }

 template<class _Other>
  _Tuple_val(_Other&& _Arg)
  : _Val(::std:: forward<_Other>(_Arg))
  {
  }

 template<class _Other>
  _Tuple_val& operator=(_Other&& _Right)
  {
  _Val = ::std:: forward<_Other>(_Right);
  return (*this);
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc&,
   typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
  {
  }

 template<class _Alloc,
  class... _Other>
  _Tuple_val(const _Alloc& _Al,
   typename enable_if<uses_allocator<_Ty, _Alloc>::value
    && !is_constructible<_Ty,
     allocator_arg_t, _Alloc>::value,
    _Tuple_alloc_t>::type, _Other&&... _Arg)
  : _Val(::std:: forward<_Other>(_Arg)..., _Al)
  {
  }


 _Ty _Val;
 };


template<class... _Types>
 class tuple;

template<>
 class tuple<>
 {
public:
 typedef tuple<> _Myt;

 tuple()
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&) throw ()
  {
  }

 tuple(const tuple&) throw ()
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc&, const tuple&) throw ()
  {
  }

 void swap(_Myt&) throw ()
  {
  }

 bool _Equals(const _Myt&) const throw ()
  {
  return (true);
  }

 bool _Less(const _Myt&) const throw ()
  {
  return (false);
  }
 };

template<class _This,
 class... _Rest>
 class tuple<_This, _Rest...>
  : private tuple<_Rest...>
 {
public:
 typedef _This _This_type;
 typedef tuple<_This, _Rest...> _Myt;
 typedef tuple<_Rest...> _Mybase;
 static const size_t _Mysize = 1 + sizeof...(_Rest);

 tuple()
  : _Mybase(),
   _Myfirst()
  {
  }

 template<class... _Rest2>
  explicit tuple(_Tuple_alloc_t, _Rest2&&... _Rest_arg)
   : _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
    _Myfirst(allocator_arg)
  {
  }

 template<class... _Other,
  class = typename _Tuple_enable<
   tuple<const _Other&...>, _Myt>::type>
  tuple(const tuple<_Other...>& _Right)
  : _Mybase(_Right._Get_rest()), _Myfirst(_Right._Myfirst._Val)
  {
  }

 template<class _Alloc,
  class... _Other,
  class = typename _Tuple_enable<
   tuple<const _Other&...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const tuple<_Other...>& _Right)
  : _Mybase(allocator_arg, _Al, _Right._Get_rest()),
   _Myfirst(_Al, _Tuple_alloc,
    _Right._Myfirst._Val)
  {
  }

 explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)
  : _Mybase(_Rest_arg...),
   _Myfirst(_This_arg)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _This& _This_arg, const _Rest&... _Rest_arg)
  : _Mybase(allocator_arg, _Al, _Rest_arg...),
   _Myfirst(_Al, _Tuple_alloc, _This_arg)
  {
  }

 template<class _This2,
  class... _Rest2,
  class = typename _Tuple_enable<
   tuple<_This2, _Rest2...>, _Myt>::type>
  explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(::std:: forward<_This2>(_This_arg))
  {
  }

 template<class _Alloc,
  class _This2,
  class... _Rest2,
  class = typename _Tuple_enable<
   tuple<_This2, _Rest2...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _This2&& _This_arg, _Rest2&&... _Rest_arg)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<_Rest2>(_Rest_arg)...),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_This2>(_This_arg))
  {
  }

 template<class... _Other,
  class = typename _Tuple_enable<
   tuple<_Other...>, _Myt>::type>
  tuple(tuple<_Other...>&& _Right)
  : _Mybase(::std:: forward<typename tuple<_Other...>::_Mybase>
   (_Right._Get_rest())),
   _Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>
    (_Right._Myfirst._Val))
  {
  }

 template<class _Alloc,
  class... _Other,
  class = typename _Tuple_enable<
   tuple<_Other...>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   tuple<_Other...>&& _Right)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<typename tuple<_Other...>::_Mybase>
     (_Right._Get_rest())),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<typename tuple<_Other...>::_This_type>
     (_Right._Myfirst._Val))
  {
  }

 template<class... _Other>
  _Myt& operator=(const tuple<_Other...>& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  (_Mybase&)*this = _Right._Get_rest();
  return (*this);
  }

 template<class... _Other>
  _Myt& operator=(tuple<_Other...>&& _Right)
  {
  _Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
   (_Right._Myfirst._Val);
  (_Mybase&)*this = ::std:: forward<typename tuple<_Other...>::_Mybase>
   (_Right._Get_rest());
  return (*this);
  }

 template<class... _Other>
  bool _Equals(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val == _Right._Myfirst._Val
   && _Mybase::_Equals(_Right._Get_rest()));
  }

 template<class... _Other>
  bool _Less(const tuple<_Other...>& _Right) const
  {
  static_assert(_Mysize == sizeof...(_Other),
   "comparing tuple to object with different size");
  return (_Myfirst._Val < _Right._Myfirst._Val
   || (!(_Right._Myfirst._Val < _Myfirst._Val)
    && _Mybase::_Less(_Right._Get_rest())));
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al)
  : _Mybase(allocator_arg, _Al),
   _Myfirst(_Al, _Tuple_alloc)
  {
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const _Myt& _Right)
  : _Mybase(allocator_arg, _Al, _Right._Get_rest()),
   _Myfirst(_Al, _Tuple_alloc,
    _Right._Myfirst._Val)
  {
  }

 template<class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<const _First&, const _Second&>, _Myt>::type>
  tuple(const pair<_First, _Second>& _Right)

  : _Mybase(tuple<_Second>(_Right.second)),
   _Myfirst(_Right.first)
  {

  }

 template<class _Alloc,
  class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<const _First&, const _Second&>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   const pair<_First, _Second>& _Right)

  : _Mybase(allocator_arg, _Al, tuple<_Second>(_Right.second)),
   _Myfirst(_Al, _Tuple_alloc,
    _Right.first)
  {

  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Myfirst._Val = _Right._Myfirst._Val;
  (_Mybase&)*this = _Right._Get_rest();
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(const pair<_First, _Second>& _Right)
  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = _Right.first;
  (_Mybase&)*this = tuple<_Second>(_Right.second);
  return (*this);
  }

 template<class _Alloc>
  tuple(allocator_arg_t, const _Alloc& _Al,
   _Myt&& _Right)
  : _Mybase(allocator_arg, _Al,
    ::std:: forward<_Mybase>(_Right._Get_rest())),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_This>(_Right._Myfirst._Val))
  {
  }

 template<class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<_First, _Second>, _Myt>::type>
  tuple(pair<_First, _Second>&& _Right)

  : _Mybase(tuple<_Second>(::std:: forward<_Second>(_Right.second))),
   _Myfirst(::std:: forward<_First>(_Right.first))
  {

  }

 template<class _Alloc,
  class _First,
  class _Second,
  class = typename _Tuple_enable<
   tuple<_First, _Second>, _Myt>::type>
  tuple(allocator_arg_t, const _Alloc& _Al,
   pair<_First, _Second>&& _Right)

  : _Mybase(allocator_arg, _Al,
    tuple<_Second>(::std:: forward<_Second>(_Right.second))),
   _Myfirst(_Al, _Tuple_alloc,
    ::std:: forward<_First>(_Right.first))
  {

  }

 _Myt& operator=(_Myt&& _Right)


  {
  _Myfirst = ::std:: forward<_This>(_Right._Myfirst._Val);
  (_Mybase&)*this = ::std:: forward<_Mybase>(_Right._Get_rest());
  return (*this);
  }

 template<class _First,
  class _Second>
  _Myt& operator=(pair<_First, _Second>&& _Right)




  {
  static_assert(_Mysize == 2,
   "assigning to tuple from object with different size");
  _Myfirst._Val = ::std:: forward<_First>(_Right.first);
  (_Mybase&)*this =
   tuple<_Second>(::std:: forward<_Second>(_Right.second));
  return (*this);
  }

 _Mybase& _Get_rest()
  {
  return (*this);
  }

 const _Mybase& _Get_rest() const
  {
  return (*this);
  }

 void swap(tuple& _Right)



  {
  _Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
  _Mybase::swap((_Mybase&)_Right);
  }

 _Tuple_val<_This> _Myfirst;
 };




template<class... _Types1,
 class... _Types2> inline
 bool operator==(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Equals(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator!=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator<(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Left._Less(_Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator>=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Left < _Right));
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator>(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (_Right < _Left);
 }

template<class... _Types1,
 class... _Types2> inline
 bool operator<=(const tuple<_Types1...>& _Left,
  const tuple<_Types2...>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class... _Types> inline
 void swap(tuple<_Types...>& _Left,
  tuple<_Types...>& _Right)

 {
 return (_Left.swap(_Right));
 }



template<size_t _Index,
 class _Tuple>
 struct tuple_element;

template<class _This,
 class... _Rest>
 struct tuple_element<0, tuple<_This, _Rest...> >
 {
 typedef _This type;
 typedef typename add_lvalue_reference<const _This>::type _Ctype;
 typedef typename add_lvalue_reference<_This>::type _Rtype;
 typedef typename add_rvalue_reference<_This>::type _RRtype;
 typedef tuple<_This, _Rest...> _Ttype;
 };

template<size_t _Index,
 class _This,
 class... _Rest>
 struct tuple_element<_Index, tuple<_This, _Rest...> >
  : public tuple_element<_Index - 1, tuple<_Rest...> >
 {
 };


template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const _Tuple>
 : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_const<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, volatile _Tuple>
 : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_volatile<typename _Mybase::type>::type type;
 };

template<size_t _Index,
 class _Tuple>
 struct tuple_element<_Index, const volatile _Tuple>
 : public tuple_element<_Index, _Tuple>
 {
 typedef tuple_element<_Index, _Tuple> _Mybase;
 typedef typename add_cv<typename _Mybase::type>::type type;
 };


template<size_t _Index,
 class... _Types> inline
 typename tuple_element<_Index, tuple<_Types...> >::_Rtype
  get(tuple<_Types...>& _Tuple)
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 typename tuple_element<_Index, tuple<_Types...> >::_Ctype
  get(const tuple<_Types...>& _Tuple)
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 return (((_Ttype&)_Tuple)._Myfirst._Val);
 }

template<size_t _Index,
 class... _Types> inline
 typename tuple_element<_Index, tuple<_Types...> >::_RRtype
  get(tuple<_Types...>&& _Tuple)
 {
 typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
  _Ttype;
 typedef typename tuple_element<_Index, tuple<_Types...> >::_RRtype
  _RRtype;
 return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
 }


template<class... _Types> inline
 tuple<typename _Unrefwrap<_Types>::type...>
  make_tuple(_Types&&... _Args)
 {
 typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
 return (_Ttype(::std:: forward<_Types>(_Args)...));
 }


template<class... _Types> inline
 tuple<_Types&...>
  tie(_Types&... _Args) throw ()
 {
 typedef tuple<_Types&...> _Ttype;
 return (_Ttype(_Args...));
 }




template<class... _Types> inline
 tuple<_Types&&...>
  forward_as_tuple(_Types&&... _Args) throw ()
 {
 return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
 }



template<class _Arg_idx_type,
 class... _Types>
 struct _Make_arg_idx1
 {
 typedef _Arg_idx_type type;
 };

template<size_t... _Indexes,
 class _Ty,
 class... _Types>
 struct _Make_arg_idx1<_Arg_idx<_Indexes...>, _Ty, _Types...>
  : _Make_arg_idx1<_Arg_idx<sizeof...(_Types), _Indexes...>, _Types...>
 {
 };

template<class... _Types>
 struct _Make_arg_idx
  : _Make_arg_idx1<_Arg_idx<>, _Types...>
 {
 };

template<class _Arg_idx_type1,
 class _Arg_idx_type2>
 struct _Cat_arg_idx;

template<size_t... _Indexes1,
 size_t... _Indexes2>
 struct _Cat_arg_idx<_Arg_idx<_Indexes1...>, _Arg_idx<_Indexes2...> >
 {
 typedef _Arg_idx<_Indexes1..., _Indexes2...> type;
 };

template<size_t _Nx,
 class _Ty>
 struct _Repeat_for
  : integral_constant<size_t, _Nx>
 {
 };


template<class _Ret,
 class _Kx_arg,
 class _Ix_arg,
 size_t _Ix_next,
 class... _Tuples>
 struct _Tuple_cat2
 {
 static_assert(sizeof...(_Tuples) == 0,
  "Unsupported tuple_cat arguments.");
 typedef _Ret type;
 typedef _Kx_arg _Kx_arg_idx;
 typedef _Ix_arg _Ix_arg_idx;
 };

template<class... _Types1,
 class _Kx_arg,
 size_t... _Ix,
 size_t _Ix_next,
 class... _Types2,
 class... _Rest>
 struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg, _Arg_idx<_Ix...>, _Ix_next,
  tuple<_Types2...>, _Rest...>
  : _Tuple_cat2<
   tuple<_Types1..., _Types2...>,
   typename _Cat_arg_idx<_Kx_arg,
    typename _Make_arg_idx<_Types2...>::type>::type,
   _Arg_idx<_Ix..., _Repeat_for<_Ix_next, _Types2>::value...>,
   _Ix_next + 1,
   _Rest...>
 {
 };

template<class... _Tuples>
 struct _Tuple_cat1
  : _Tuple_cat2<tuple<>, _Arg_idx<>, _Arg_idx<>, 0,
   typename decay<_Tuples>::type...>
 {
 };

template<class _Ret,
 size_t... _Kx,
 size_t... _Ix,
 class _Ty> inline
 _Ret _Tuple_cat(_Arg_idx<_Kx...>, _Arg_idx<_Ix...>, _Ty&& _Arg)
 {
 return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
 }

template<class... _Tuples> inline
 typename _Tuple_cat1<_Tuples...>::type
  tuple_cat(_Tuples&&... _Tpls)
 {
 typedef _Tuple_cat1<_Tuples...> _Cat1;
 return (_Tuple_cat<typename _Cat1::type>(
  typename _Cat1::_Kx_arg_idx(), typename _Cat1::_Ix_arg_idx(),
  ::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
 }



template<class _Ty1,
 class _Ty2>
 template<class _Tuple1,
  class _Tuple2,
  size_t... _Indexes1,
  size_t... _Indexes2> inline
  pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
   _Tuple2& _Val2,
   _Arg_idx<_Indexes1...>,
   _Arg_idx<_Indexes2...>)
  : first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
   second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
  {
  }


template<class _Ty1,
 class _Ty2>
 template<class... _Types1,
  class... _Types2> inline
  pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
   tuple<_Types1...> _Val1,
   tuple<_Types2...> _Val2)


  : pair(_Val1, _Val2,
   typename _Make_arg_idx<_Types1...>::type(),
   typename _Make_arg_idx<_Types2...>::type())
  {
  }
}

namespace std {

template<class... _Types,
 class _Alloc>
 struct uses_allocator<tuple<_Types...>, _Alloc>
  : true_type
 {
 };

}

namespace std {
namespace tr1 {
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
using ::std:: tuple_element;
}
}


#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\unordered_map"


#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Kty,
 class _Ty,
 class _Tr,
 class _Alloc,
 bool _Mfl>
 class _Umap_traits
  : public _Tr
 {
public:
 typedef _Kty key_type;
 typedef pair<const _Kty, _Ty> value_type;
 typedef _Tr key_compare;
 typedef _Alloc allocator_type;

 enum
  {
  _Multi = _Mfl};

 _Umap_traits(const _Tr& _Traits = _Tr())
  : _Tr(_Traits)
  {
  }

 class value_compare
  : public binary_function<value_type, value_type, bool>
  {
 public:
  bool operator()(const value_type& _Left,
   const value_type& _Right) const
   {
   return (_Keycompobj(_Left.first, _Right.first));
   }

  value_compare(const key_compare& _Keycomparg)
   : _Keycompobj(_Keycomparg)
   {
   }

  key_compare _Keycompobj;
  };

 template<class _Ty1,
  class _Ty2>
  static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val)
  {
  return (_Val.first);
  }

 template<class _Ty1,
  class _Ty2>
  static const _Ty2& _Nonkfn(const pair<_Ty1, _Ty2>& _Val)
  {
  return (_Val.second);
  }
 };


template<class _Kty,
 class _Ty,
 class _Hasher = hash<_Kty>,
 class _Keyeq = equal_to<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class unordered_map
  : public _Hash<_Umap_traits<_Kty, _Ty,
   _Uhash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, false> >
 {
public:
 typedef unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc> _Myt;
 typedef _Uhash_compare<_Kty, _Hasher, _Keyeq> _Mytraits;
 typedef _Hash<_Umap_traits<_Kty, _Ty,
  _Mytraits, _Alloc, false> > _Mybase;
 typedef _Hasher hasher;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Ty referent_type;
 typedef _Keyeq key_equal;
 typedef _Mytraits key_compare;


 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;



 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::iterator local_iterator;
 typedef typename _Mybase::const_iterator const_local_iterator;

 unordered_map()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit unordered_map(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 unordered_map(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._List._Getal().select_on_container_copy_construction())


  {
  }

 unordered_map(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit unordered_map(size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_map(size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_map(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_map(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  }

 template<class _Iter>
  unordered_map(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_map(_Iter _First, _Iter _Last,
   size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_map(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_map(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_map(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 unordered_map(_Myt&& _Right)
  : _Mybase(::std:: move(_Right), _Right._List._Getal())
  {
  }

 unordered_map(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 mapped_type& operator[](key_type&& _Keyval)
  {
  iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end())
   _Where = this->emplace(
    piecewise_construct,
    ::std:: forward_as_tuple(::std:: move(_Keyval)),
    tuple<>()).first;
  return (_Where->second);
  }

 void swap(_Myt& _Right)
  {
  _Mybase::swap(_Right);
  }

 unordered_map(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_map(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_map(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_map(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_map(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }






 hasher hash_function() const
  {
  return (this->_Gethash());
  }

 key_equal key_eq() const
  {
  return (this->_Getkeyeq());
  }

 mapped_type& operator[](const key_type& _Keyval)
  {
  iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end())

   _Where = this->emplace(
    piecewise_construct,
    ::std:: forward_as_tuple(_Keyval),
    tuple<>()).first;

  return (_Where->second);
  }

 mapped_type& at(const key_type& _Keyval)
  {
  iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end())
   _Xout_of_range("invalid unordered_map<K, T> key");
  return (_Where->second);
  }

 const mapped_type& at(const key_type& _Keyval) const
  {
  const_iterator _Where = this->lower_bound(_Keyval);
  if (_Where == this->end())
   _Xout_of_range("invalid unordered_map<K, T> key");
  return (_Where->second);
  }
 };

template<class _Kty,
 class _Ty,
 class _Hasher,
 class _Keyeq,
 class _Alloc>
 void swap(unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
  unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Kty,
 class _Ty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator==(
  const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (_Hash_equal(_Left, _Right));
 }

template<class _Kty,
 class _Ty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator!=(
  const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_map<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Kty,
 class _Ty,
 class _Hasher = hash<_Kty>,
 class _Keyeq = equal_to<_Kty>,
 class _Alloc = allocator<pair<const _Kty, _Ty> > >
 class unordered_multimap
  : public _Hash<_Umap_traits<_Kty, _Ty,
   _Uhash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, true> >
 {
public:
 typedef unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc> _Myt;
 typedef _Uhash_compare<_Kty, _Hasher, _Keyeq> _Mytraits;
 typedef _Hash<_Umap_traits<_Kty, _Ty,
  _Mytraits, _Alloc, true> > _Mybase;
 typedef _Hasher hasher;
 typedef _Kty key_type;
 typedef _Ty mapped_type;
 typedef _Ty referent_type;
 typedef _Keyeq key_equal;
 typedef _Mytraits key_compare;


 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;



 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::iterator local_iterator;
 typedef typename _Mybase::const_iterator const_local_iterator;

 unordered_multimap()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit unordered_multimap(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 unordered_multimap(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._List._Getal().select_on_container_copy_construction())


  {
  }

 unordered_multimap(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit unordered_multimap(size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_multimap(size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_multimap(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_multimap(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  }

 template<class _Iter>
  unordered_multimap(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multimap(_Iter _First, _Iter _Last,
   size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multimap(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multimap(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multimap(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 unordered_multimap(_Myt&& _Right)
  : _Mybase(::std:: move(_Right), _Right._List._Getal())
  {
  }

 unordered_multimap(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(_Valty&& _Val)
  {
  return (_Mybase::insert(::std:: forward<_Valty>(_Val)).first);
  }

 template<class _Valty>
  typename enable_if<is_convertible<_Valty, value_type>::value,
   iterator>::type
  insert(const_iterator _Where, _Valty&& _Val)
  {
  return (_Mybase::insert(_Where, ::std:: forward<_Valty>(_Val)));
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }


 void swap(_Myt& _Right)
  {
  _Mybase::swap(_Right);
  }

 unordered_multimap(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multimap(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multimap(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multimap(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multimap(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 hasher hash_function() const
  {
  return (this->_Gethash());
  }

 key_equal key_eq() const
  {
  return (this->_Getkeyeq());
  }

 iterator insert(const value_type& _Val)
  {
  return (_Mybase::insert(_Val).first);
  }

 iterator insert(const_iterator _Where, const value_type& _Val)
  {
  return (_Mybase::insert(_Where, _Val));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Mybase::insert(_First, _Last);
  }
 };

template<class _Kty,
 class _Ty,
 class _Hasher,
 class _Keyeq,
 class _Alloc>
 void swap(unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
  unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Kty,
 class _Ty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator==(
  const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (_Hash_equal(_Left, _Right));
 }

template<class _Kty,
 class _Ty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator!=(
  const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_multimap<_Kty, _Ty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

namespace tr1 {
using ::std:: unordered_map;
using ::std:: unordered_multimap;
}
}

#pragma warning(pop)
#pragma pack(pop)
#line 45 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/../MsgMgr/MsgMgr.h"



class MsgMgr
{
public:
 MsgMgr(){}
 MsgMgr(const MsgMgr& other) : body(other.body),
  header(other.header), attrbs(other.attrbs){}
 std::string CreateMessage();
 void Init();
 void ParseMessage(const std::string& msg);
 void AddAttrb(const std::string& attr, const std::string& value);
 bool RemoveAttrb(const std::string& attr);
 std::string GetAttrbVal(const std::string& attr);
 static std::pair<std::string, std::string> ParseAttrb(const std::string& line);
 void SetBody(const std::string& text);
 std::string GetBody();
 std::string GetHeader();
 std::vector<std::string> GetHeaderAttribs();
 ~MsgMgr(){};
private:
 std::string body;
 std::string header;
 std::unordered_map<std::string, std::string> attrbs;
};
#line 42 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/SendCommand.h"



class SendCommand
{
public:
 virtual void Send(ISendr& sender, std::string arg);
 virtual std::string buildMessage(std::string s) = 0;
 virtual ~SendCommand(){}
protected:
 static MsgMgr msgmgr;
};
#line 30 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/ISendHandler.h"


struct ISendHandler
{
 virtual void invoke(std::string command, std::string arg) = 0;
};
#line 38 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/ChannelFactory.h"

#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/IRecvDispatcher.h"
#line 31 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/../HandlerDispatcher/IRecvDispatcher.h"
struct IRecvDispatcher
{
 virtual void invoke(std::string command, std::string arg) = 0;
 virtual std::string getMessage() = 0;
};
#line 39 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../Channel/ChannelFactory.h"



extern "C" {
 struct ChannelFactory
 {
  enum IpVer{IPV4, IPV6};
  __declspec(dllimport) ISendr* CreateSender(const std::string& local_ip, size_t port);
  __declspec(dllimport) IRecvr* CreateReceiver(size_t port, IpVer ipver = IPV6);
  __declspec(dllimport) ISendHandler* CreateSendHandler(ISendr& sender);
  __declspec(dllimport) IRecvDispatcher* CreateRecvDispatcher(ISendr& sender, IRecvr& receiver);
 };
}
#line 52 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/ClientCLR.h"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\unordered_set"







#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<class _Kty,
 class _Tr,
 class _Alloc,
 bool _Mfl>
 class _Uset_traits
  : public _Tr
 {
public:
 typedef _Kty key_type;
 typedef _Kty value_type;
 typedef _Tr key_compare;
 typedef _Alloc allocator_type;

 enum
  {
  _Multi = _Mfl};

 _Uset_traits(const _Tr& _Traits = _Tr())
  : _Tr(_Traits)
  {
  }

 typedef key_compare value_compare;

 static const _Kty& _Kfn(const value_type& _Val)
  {
  return (_Val);
  }

 static int _Nonkfn(const value_type&)
  {
  return (0);
  }
 };


template<class _Kty,
 class _Hasher = hash<_Kty>,
 class _Keyeq = equal_to<_Kty>,
 class _Alloc = allocator<_Kty> >
 class unordered_set
  : public _Hash<_Uset_traits<_Kty,
   _Uhash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, false> >
 {
public:
 typedef unordered_set<_Kty, _Hasher, _Keyeq, _Alloc> _Myt;
 typedef _Uhash_compare<_Kty, _Hasher, _Keyeq> _Mytraits;
 typedef _Hash<_Uset_traits<_Kty,
  _Mytraits, _Alloc, false> > _Mybase;
 typedef _Hasher hasher;
 typedef _Kty key_type;
 typedef _Keyeq key_equal;
 typedef _Mytraits key_compare;

 typedef typename _Mybase::_Pairib _Pairib;

 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;



 typedef typename _Mybase::value_type value_type;

 typedef typename _Mybase::iterator local_iterator;
 typedef typename _Mybase::const_iterator const_local_iterator;

 unordered_set()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit unordered_set(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 unordered_set(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._List._Getal().select_on_container_copy_construction())


  {
  }

 unordered_set(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit unordered_set(size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_set(size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_set(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_set(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  }

 template<class _Iter>
  unordered_set(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_set(_Iter _First, _Iter _Last,
   size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_set(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_set(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_set(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 unordered_set(_Myt&& _Right)
  : _Mybase(::std:: move(_Right), _Right._List._Getal())
  {
  }

 unordered_set(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 _Pairib insert(value_type&& _Val)
  {
  return (_Mybase::insert(::std:: forward<value_type>(_Val)));
  }

 iterator insert(const_iterator _Where, value_type&& _Val)
  {
  return (_Mybase::insert(_Where, ::std:: forward<value_type>(_Val)));
  }

 void swap(_Myt& _Right)
  {
  _Mybase::swap(_Right);
  }

 unordered_set(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_set(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_set(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_set(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_set(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 hasher hash_function() const
  {
  return (this->_Gethash());
  }

 key_equal key_eq() const
  {
  return (this->_Getkeyeq());
  }

 _Pairib insert(const value_type& _Val)
  {
  return (_Mybase::insert(_Val));
  }

 iterator insert(const_iterator _Where, const value_type& _Val)
  {
  return (_Mybase::insert(_Where, _Val));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Mybase::insert(_First, _Last);
  }
 };

template<class _Kty,
 class _Hasher,
 class _Keyeq,
 class _Alloc>
 void swap(unordered_set<_Kty, _Hasher, _Keyeq, _Alloc>& _Left,
  unordered_set<_Kty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Kty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator==(
  const unordered_set<_Kty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_set<_Kty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (_Hash_equal(_Left, _Right));
 }

template<class _Kty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator!=(
  const unordered_set<_Kty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_set<_Kty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }


template<class _Kty,
 class _Hasher = hash<_Kty>,
 class _Keyeq = equal_to<_Kty>,
 class _Alloc = allocator<_Kty> >
 class unordered_multiset
  : public _Hash<_Uset_traits<_Kty,
   _Uhash_compare<_Kty, _Hasher, _Keyeq>, _Alloc, true> >
 {
public:
 typedef unordered_multiset<_Kty, _Hasher, _Keyeq, _Alloc> _Myt;
 typedef _Uhash_compare<_Kty, _Hasher, _Keyeq> _Mytraits;
 typedef _Hash<_Uset_traits<_Kty,
  _Mytraits, _Alloc, true> > _Mybase;
 typedef _Hasher hasher;
 typedef _Kty key_type;
 typedef _Keyeq key_equal;
 typedef _Mytraits key_compare;


 typedef typename _Mybase::allocator_type allocator_type;
 typedef typename _Mybase::size_type size_type;
 typedef typename _Mybase::difference_type difference_type;
 typedef typename _Mybase::pointer pointer;
 typedef typename _Mybase::const_pointer const_pointer;
 typedef typename _Mybase::reference reference;
 typedef typename _Mybase::const_reference const_reference;
 typedef typename _Mybase::iterator iterator;
 typedef typename _Mybase::const_iterator const_iterator;



 typedef typename _Mybase::value_type value_type;

 unordered_multiset()
  : _Mybase(key_compare(), allocator_type())
  {
  }

 explicit unordered_multiset(const allocator_type& _Al)
  : _Mybase(key_compare(), _Al)
  {
  }

 unordered_multiset(const _Myt& _Right)

  : _Mybase(_Right,
   _Right._List._Getal().select_on_container_copy_construction())


  {
  }

 unordered_multiset(const _Myt& _Right, const allocator_type& _Al)
  : _Mybase(_Right, _Al)
  {
  }

 explicit unordered_multiset(size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_multiset(size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_multiset(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  }

 unordered_multiset(size_type _Buckets, const hasher& _Hasharg,
  const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  }

 template<class _Iter>
  unordered_multiset(_Iter _First, _Iter _Last)
  : _Mybase(key_compare(), allocator_type())
  {
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multiset(_Iter _First, _Iter _Last,
   size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multiset(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multiset(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 template<class _Iter>
  unordered_multiset(_Iter _First, _Iter _Last,
   size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  _Mybase::insert(_First, _Last);
  }

 _Myt& operator=(const _Myt& _Right)
  {
  _Mybase::operator=(_Right);
  return (*this);
  }

 unordered_multiset(_Myt&& _Right)
  : _Mybase(::std:: move(_Right), _Right._List._Getal())
  {
  }

 unordered_multiset(_Myt&& _Right, const allocator_type& _Al)
  : _Mybase(::std:: move(_Right), _Al)
  {
  }

 _Myt& operator=(_Myt&& _Right)
  {
  _Mybase::operator=(::std:: move(_Right));
  return (*this);
  }

 iterator insert(value_type&& _Val)
  {
  return (_Mybase::insert(::std:: forward<value_type>(_Val)).first);
  }

 iterator insert(const_iterator _Where, value_type&& _Val)
  {
  return (_Mybase::insert(_Where, ::std:: forward<value_type>(_Val)));
  }

 template<class... _Valty>
  iterator emplace(_Valty&&... _Val)
  {
  return (_Mybase::emplace(::std:: forward<_Valty>(_Val)...).first);
  }


 void swap(_Myt& _Right)
  {
  _Mybase::swap(_Right);
  }

 unordered_multiset(::std:: initializer_list<value_type> _Ilist)
  : _Mybase(key_compare(), allocator_type())
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multiset(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets)
  : _Mybase(key_compare(), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multiset(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg)
  : _Mybase(key_compare(_Hasharg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multiset(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), allocator_type())
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 unordered_multiset(::std:: initializer_list<value_type> _Ilist,
  size_type _Buckets, const hasher& _Hasharg,
   const _Keyeq& _Keyeqarg, const allocator_type& _Al)
  : _Mybase(key_compare(_Hasharg, _Keyeqarg), _Al)
  {
  this->rehash(_Buckets);
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 _Myt& operator=(::std:: initializer_list<value_type> _Ilist)
  {
  this->clear();
  this->insert(_Ilist.begin(), _Ilist.end());
  return (*this);
  }

 void insert(::std:: initializer_list<value_type> _Ilist)
  {
  this->insert(_Ilist.begin(), _Ilist.end());
  }

 hasher hash_function() const
  {
  return (this->_Gethash());
  }

 key_equal key_eq() const
  {
  return (this->_Getkeyeq());
  }

 iterator insert(const value_type& _Val)
  {
  return (_Mybase::insert(_Val).first);
  }

 iterator insert(const_iterator _Where, const value_type& _Val)
  {
  return (_Mybase::insert(_Where, _Val));
  }

 template<class _Iter>
  void insert(_Iter _First, _Iter _Last)
  {
  _Mybase::insert(_First, _Last);
  }
 };

template<class _Kty,
 class _Hasher,
 class _Keyeq,
 class _Alloc>
 void swap(unordered_multiset<_Kty, _Hasher, _Keyeq, _Alloc>& _Left,
  unordered_multiset<_Kty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 _Left.swap(_Right);
 }

template<class _Kty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator==(
  const unordered_multiset<_Kty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_multiset<_Kty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (_Hash_equal(_Left, _Right));
 }

template<class _Kty,
 class _Hasher,
 class _Keyeq,
 class _Alloc> inline
 bool operator!=(
  const unordered_multiset<_Kty, _Hasher, _Keyeq, _Alloc>& _Left,
  const unordered_multiset<_Kty, _Hasher, _Keyeq, _Alloc>& _Right)
 {
 return (!(_Left == _Right));
 }

namespace tr1 {
using ::std:: unordered_multiset;
using ::std:: unordered_set;
}
}

#pragma warning(pop)
#pragma pack(pop)
#line 54 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/ClientCLR.h"


ref class ClientCLR : Window
{
public:
 ClientCLR();
 ~ClientCLR();
private:
 ISendr* sender;
 IRecvr* receiver;
 ISendHandler* sendHandler;
 IRecvDispatcher* recvDispatcher;


 void setUpStatusBar();
 void setUpTabControl();
 void setUpUploadView();
 void setUpFileListView();
 void setUpConnectionView();
 void setUpConnectionViewConnect();
 void setUpConnectionViewListen();
 void setUpTextSearchView();
 void setUpTextSearchViewControlProperty();
 void setUpTextSearchResultView();


 void clear(Object^ sender, RoutedEventArgs^ args);
 void browseForFolder(Object^ sender, RoutedEventArgs^ args);
 void OnLoaded(Object^ sender, RoutedEventArgs^ args);
 void Unloading(Object^ sender, System::ComponentModel::CancelEventArgs^ args);
 void OnListenClick(Object^ sender, RoutedEventArgs^ args);
 void OnConnectClick(Object^ sender, RoutedEventArgs^ args);
 void OnCloseClick(Object^ sender, RoutedEventArgs^ args);
 void OnUploadClick(Object^ sender, RoutedEventArgs^ args);
 void OnDownloadClick(Object^ sender, RoutedEventArgs^ args);
 void OnListFileClick(Object^ sender, RoutedEventArgs^ args);
 void OnAddClick(Object^ sender, RoutedEventArgs^ args);
 void OnRemoveClick(Object^ sender, RoutedEventArgs^ args);
 void OnClearClick(Object^ sender, RoutedEventArgs^ args);
 void OnTextSearchClick(Object^ sdr, RoutedEventArgs^ args);

 void getMessage();
 void UpdateFileListBox(String^ filelist);
 void UpdateTextSearchResult(String^ filelist);

 std::string toStdString(String^ pStr);
 String^ toSystemString(std::string& str);
 void setButtonsProperties();

 Thread^ recvThread;



 DockPanel^ hDockPanel = gcnew DockPanel();
 Grid^ hGrid = gcnew Grid();
 TabControl^ hTabControl = gcnew TabControl();
 TabItem^ hUploadTab = gcnew TabItem();
 TabItem^ hFileListTab = gcnew TabItem();
 TabItem^ hConnectTab = gcnew TabItem();
 TabItem^ hTextSearchTab = gcnew TabItem();
 TabItem^ hTextSearchResultTab = gcnew TabItem();
 StatusBar^ hStatusBar = gcnew StatusBar();
 StatusBarItem^ hStatusBarItem = gcnew StatusBarItem();
 TextBlock^ hStatus = gcnew TextBlock();



 Grid^ hUploadGrid = gcnew Grid();
 Grid^ hConnectGrid = gcnew Grid();
 Grid^ hTextSearchGrid = gcnew Grid();
 Grid^ hTextSearchResultGrid = gcnew Grid();
 Button^ hListenButton = gcnew Button();
 Button^ hConnectButton = gcnew Button();
 Button^ hCloseButton = gcnew Button();
 Button^ hDownloadButton = gcnew Button();
 Button^ hUploadButton = gcnew Button();
 Button^ hClearButton = gcnew Button();
 TextBlock^ hTextSearchTextBlock = gcnew TextBlock();
 TextBox^ txtBoxListenIp = gcnew TextBox();
 TextBox^ txtBoxListenPort = gcnew TextBox();
 TextBox^ txtBoxIp = gcnew TextBox();
 TextBox^ txtBoxPort = gcnew TextBox();
 ScrollViewer^ hScrollViewer1 = gcnew ScrollViewer();
 StackPanel^ hStackPanelConnect = gcnew StackPanel();
 StackPanel^ hStackPanel1 = gcnew StackPanel();



 Grid^ hFileListGrid = gcnew Grid();
 Forms::FolderBrowserDialog^ hFolderBrowserDialog = gcnew Forms::FolderBrowserDialog();
 Forms::OpenFileDialog^ hOpenFileDialog = gcnew Forms::OpenFileDialog();
 ListBox^ hFileListBox = gcnew ListBox();
 Button^ hDirListButton = gcnew Button();
 Grid^ hGrid2 = gcnew Grid();

 TextBox^ txtBoxDirListPath = gcnew TextBox();
 TextBox^ txtBoxDirListPattern = gcnew TextBox();


 TextBox^ txtBoxTextSearchPath = gcnew TextBox();
 TextBox^ txtBoxTextSearchPattern = gcnew TextBox();
 TextBox^ txtBoxTextSearchServerAddress = gcnew TextBox();
 TextBox^ txtBoxTextSearchThreads = gcnew TextBox();
 TextBox^ txtBoxTextSearchFilePattern = gcnew TextBox();
 ListBox^ hListBoxServersTextSearch = gcnew ListBox();
 Button^ hButtonTextSearchServerAdd = gcnew Button();
 Button^ hButtonTextSearchServerRemove = gcnew Button();
 Button^ hButtonTextSearchServerClear = gcnew Button();
 Button^ hButtonTextSearch = gcnew Button();

 Dictionary<int, System::Diagnostics::Stopwatch^>^ textSearchID = gcnew Dictionary<int, System::Diagnostics::Stopwatch^>();
};
#line 9 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR\\ClientCLR.cpp"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iostream"







#pragma pack(push,8)
#pragma warning(push, 3)


namespace std {
#line 26 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\iostream"
                        extern __declspec(dllimport) istream cin, *_Ptr_cin;
                        extern __declspec(dllimport) ostream cout, *_Ptr_cout;
                        extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
                        extern __declspec(dllimport) ostream clog, *_Ptr_clog;

                        extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
                        extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
                        extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
                        extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;


class __declspec(dllimport) _Winit {
public:
 __thiscall _Winit();
 __thiscall ~_Winit() throw ();
private:
                         static int _Init_cnt;
 };

}

#pragma warning(pop)
#pragma pack(pop)
#line 10 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR\\ClientCLR.cpp"


#line 1 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../MsgMgr/MsgType.h"
#line 31 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR/../MsgMgr/MsgType.h"
const std::string UPLOAD_FILE = "UPLOAD_FILE";
const std::string SERVER_UPLOAD_FILE = "SERVER_UPLOAD_FILE";
const std::string DOWNLOAD_FILE = "DOWNLOAD_FILE";
const std::string SEARCH_TEXT = "SEARCH_TEXT";
const std::string FIND_FILES = "FIND_FILES";
const std::string CONNECT = "CONNECT";
const std::string CLOSE_CONNECTION = "CLOSE";
const std::string FEEDBACK_UPLOAD = "FEEDBACK_UPLOAD";
const std::string FEEDBACK_FILELIST = "FEEDBACK_FILELIST";
const std::string FEEDBACK_TEXTSEARCH = "FEEDBACK_TEXTSEARCH";
const std::string QUIT = "QUIT";

const std::string ATTR_COMMAND = "Command";
const std::string ATTR_DESTIP = "DestIP";
const std::string ATTR_DESTPORT = "DestPort";
const std::string ATTR_SRCIP = "SrcIP";
const std::string ATTR_SRCPORT = "SrcPort";
const std::string ATTR_FILENAME = "File";
const std::string ATTR_BLOCK_SIZE = "BlockSize";
const std::string ATTR_PATTERN_TEXT = "TextPattern";
const std::string ATTR_PATTERN_FILE = "FilePattern";
const std::string ATTR_PATH = "Path";
const std::string ATTR_UPLOAD_STATE = "UploadState";
const std::string ATTR_THREAD_COUNT = "Threads";
const std::string ATTR_SEARCH_TIME = "SearchTime";
const std::string ATTR_TEXT_SEARCH_ID = "SearchID";

const int CONNECT_TRY = 20;
const int BLOCK_SIZE = 1024;

const std::string UPLOAD_SUCESS = "Success";
const std::string UPLOAD_FAIL = "Fail";
#line 12 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR\\ClientCLR.cpp"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\chrono"






#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ratio"








#pragma pack(push,8)
#pragma warning(push, 3)



namespace std {

template<intmax_t _Val>
 struct _Abs
 {
 static const intmax_t value = _Val < 0 ? -_Val : _Val;
 };


template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Good>
 struct _Safe_multX
 {
 static const intmax_t value = _Ax * _Bx;
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_multX<_Ax, _Bx, false>
 {
 static_assert(_Always_false<_Safe_multX>::value,
  "integer arithmetic overflow");
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_mult
 {
 static const intmax_t value = _Safe_multX<_Ax, _Bx,
  (_Abs<_Ax>::value <= 9223372036854775807i64 / _Abs<_Bx>::value)>::value;
 };

template<intmax_t _Ax>
 struct _Safe_mult<_Ax, 0>
 {
 static const intmax_t value = 0;
 };


template<intmax_t _Val>
 struct _Sign_of
 {
 static const intmax_t value = _Val < 0 ? -1 : 1;
 };


template<intmax_t _Ax,
 intmax_t _Bx,
 bool _Good,
 bool _Also_good>
 struct _Safe_addX
 {
 static const intmax_t value = _Ax + _Bx;
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_addX<_Ax, _Bx, false, false>
 {
 static_assert(_Always_false<_Safe_addX>::value,
  "integer arithmetic overflow");
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Safe_add
 {
 static const intmax_t value = _Safe_addX<_Ax, _Bx,
  _Sign_of<_Ax>::value != _Sign_of<_Bx>::value,
  (_Abs<_Ax>::value <= 9223372036854775807i64 - _Abs<_Bx>::value)>::value;
 };


template<intmax_t _Ax,
 intmax_t _Bx>
 struct _GcdX
 {
 static const intmax_t value = _GcdX<_Bx, _Ax % _Bx>::value;
 };

template<intmax_t _Ax>
 struct _GcdX<_Ax, 0>
 {
 static const intmax_t value = _Ax;
 };

template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Gcd
 {
 static const intmax_t value =
  _GcdX<_Abs<_Ax>::value, _Abs<_Bx>::value>::value;
 };

template<>
 struct _Gcd<0, 0>
 {
 static const intmax_t value = 1;
 };


template<intmax_t _Nx,
 intmax_t _Dx = 1>
 struct ratio
 {
 static_assert(_Dx != 0,
  "zero denominator");
 static_assert(-9223372036854775807i64 <= _Nx,
  "numerator too negative");
 static_assert(-9223372036854775807i64 <= _Dx,
  "denominator too negative");

 static const intmax_t num = _Sign_of<_Nx>::value * _Sign_of<_Dx>::value
  * _Abs<_Nx>::value / _Gcd<_Nx, _Dx>::value;

 static const intmax_t den = _Abs<_Dx>::value / _Gcd<_Nx, _Dx>::value;

 typedef ratio<num, den> type;
 };


template<class _Ty1,
 class _Ty2>
 struct _Are_ratios
  : false_type
 {
 };

template<intmax_t _N1,
 intmax_t _D1,
 intmax_t _N2,
 intmax_t _D2>
 struct _Are_ratios<ratio<_N1, _D1>, ratio<_N2, _D2> >
  : true_type
 {
 };


template<class _R1,
 class _R2>
 struct _Ratio_add
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_add<R1, R2> requires R1 and R2 to be ratio<>s.");

 static const intmax_t _N1 = _R1::num;
 static const intmax_t _D1 = _R1::den;
 static const intmax_t _N2 = _R2::num;
 static const intmax_t _D2 = _R2::den;

 static const intmax_t _Gx = _Gcd<_D1, _D2>::value;


 typedef typename ratio<
  _Safe_add<
   _Safe_mult<_N1, _D2 / _Gx>::value,
   _Safe_mult<_N2, _D1 / _Gx>::value
   >::value,
  _Safe_mult<_D1, _D2 / _Gx>::value
  >::type type;
 };

template<class _R1,
 class _R2>
 using ratio_add = typename _Ratio_add<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct _Ratio_subtract
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_subtract<R1, R2> requires R1 and R2 to be ratio<>s.");

 static const intmax_t _N2 = _R2::num;
 static const intmax_t _D2 = _R2::den;

 typedef ratio_add<_R1, ratio<-_N2, _D2> > type;
 };

template<class _R1,
 class _R2>
 using ratio_subtract = typename _Ratio_subtract<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct _Ratio_multiply
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_multiply<R1, R2> requires R1 and R2 to be ratio<>s.");

 static const intmax_t _N1 = _R1::num;
 static const intmax_t _D1 = _R1::den;
 static const intmax_t _N2 = _R2::num;
 static const intmax_t _D2 = _R2::den;

 static const intmax_t _Gx = _Gcd<_N1, _D2>::value;
 static const intmax_t _Gy = _Gcd<_N2, _D1>::value;


 typedef ratio<
  _Safe_mult<_N1 / _Gx, _N2 / _Gy>::value,
  _Safe_mult<_D1 / _Gy, _D2 / _Gx>::value
  > type;
 };

template<class _R1,
 class _R2>
 using ratio_multiply = typename _Ratio_multiply<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct _Ratio_divide
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_divide<R1, R2> requires R1 and R2 to be ratio<>s.");

 static const intmax_t _N2 = _R2::num;
 static const intmax_t _D2 = _R2::den;

 typedef ratio_multiply<_R1, ratio<_D2, _N2> > type;
 };

template<class _R1,
 class _R2>
 using ratio_divide = typename _Ratio_divide<_R1, _R2>::type;


template<class _R1,
 class _R2>
 struct ratio_equal
  : _Cat_base<_R1::num == _R2::num && _R1::den == _R2::den>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_not_equal
  : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_not_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct _Ratio_less
 {
 static const intmax_t _N1 = _R1::num;
 static const intmax_t _D1 = _R1::den;
 static const intmax_t _N2 = _R2::num;
 static const intmax_t _D2 = _R2::den;

 static const intmax_t _Gn = _Gcd<_N1, _N2>::value;
 static const intmax_t _Gd = _Gcd<_D1, _D2>::value;

 static const intmax_t _Left = _Safe_mult<_N1 / _Gn, _D2 / _Gd>::value;
 static const intmax_t _Right = _Safe_mult<_N2 / _Gn, _D1 / _Gd>::value;

 typedef integral_constant<bool, (_Left < _Right)> type;
 };

template<class _R1,
 class _R2>
 struct ratio_less
  : _Ratio_less<_R1, _R2>::type
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_less<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_less_equal
  : integral_constant<bool, !ratio_less<_R2, _R1>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_less_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_greater
  : integral_constant<bool, ratio_less<_R2, _R1>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_greater<R1, R2> requires R1 and R2 to be ratio<>s.");
 };


template<class _R1,
 class _R2>
 struct ratio_greater_equal
  : integral_constant<bool, !ratio_less<_R1, _R2>::value>
 {
 static_assert(_Are_ratios<_R1, _R2>::value,
  "ratio_greater_equal<R1, R2> requires R1 and R2 to be ratio<>s.");
 };



typedef ratio<1, 1000000000000000000LL> atto;
typedef ratio<1, 1000000000000000LL> femto;
typedef ratio<1, 1000000000000LL> pico;

typedef ratio<1, 1000000000> nano;
typedef ratio<1, 1000000> micro;
typedef ratio<1, 1000> milli;
typedef ratio<1, 100> centi;
typedef ratio<1, 10> deci;
typedef ratio<10, 1> deca;
typedef ratio<100, 1> hecto;
typedef ratio<1000, 1> kilo;
typedef ratio<1000000, 1> mega;
typedef ratio<1000000000, 1> giga;

typedef ratio<1000000000000LL, 1> tera;
typedef ratio<1000000000000000LL, 1> peta;
typedef ratio<1000000000000000000LL, 1> exa;
}

#pragma warning(pop)
#pragma pack(pop)
#line 7 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\chrono"


#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#line 21 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#line 32 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#pragma pack(push,8)


extern "C" {
#line 89 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
typedef long clock_t;
#line 147 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) int* __cdecl __daylight(void);



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) long* __cdecl __dstbias(void);



               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) long* __cdecl __timezone(void);



                             __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char ** __cdecl __tzname(void);


__declspec(dllimport) errno_t __cdecl _get_daylight( int * _Daylight);
__declspec(dllimport) errno_t __cdecl _get_dstbias( long * _Daylight_savings_bias);
__declspec(dllimport) errno_t __cdecl _get_timezone( long * _Timezone);
__declspec(dllimport) errno_t __cdecl _get_tzname( size_t *_ReturnValue, char *_Buffer, size_t _SizeInBytes, int _Index);
#line 174 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
               __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl asctime( const struct tm * _Tm);

                   __declspec(dllimport) errno_t __cdecl asctime_s( char *_Buf, size_t _SizeInBytes, const struct tm * _Tm);

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(char (&_Buffer)[_Size], const struct tm * _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _ctime32( const __time32_t * _Time);
__declspec(dllimport) errno_t __cdecl _ctime32_s( char *_Buf, size_t _SizeInBytes, const __time32_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], const __time32_t * _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }

               __declspec(dllimport) clock_t __cdecl clock(void);
__declspec(dllimport) double __cdecl _difftime32( __time32_t _Time1, __time32_t _Time2);

               __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) struct tm * __cdecl _gmtime32( const __time32_t * _Time);
                   __declspec(dllimport) errno_t __cdecl _gmtime32_s( struct tm *_Tm, const __time32_t * _Time);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) struct tm * __cdecl _localtime32( const __time32_t * _Time);
__declspec(dllimport) errno_t __cdecl _localtime32_s( struct tm *_Tm, const __time32_t * _Time);

__declspec(dllimport) size_t __cdecl strftime( char * _Buf, size_t _SizeInBytes, const char * _Format, const struct tm * _Tm);
__declspec(dllimport) size_t __cdecl _strftime_l( char *_Buf, size_t _Max_size, const char * _Format, const struct tm *_Tm, _locale_t _Locale);

                   __declspec(dllimport) errno_t __cdecl _strdate_s( char *_Buf, size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strdate( char *_Buffer);

                   __declspec(dllimport) errno_t __cdecl _strtime_s( char *_Buf , size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _strtime( char *_Buffer);

__declspec(dllimport) __time32_t __cdecl _time32( __time32_t * _Time);
__declspec(dllimport) __time32_t __cdecl _mktime32( struct tm * _Tm);
__declspec(dllimport) __time32_t __cdecl _mkgmtime32( struct tm * _Tm);



__declspec(dllimport) void __cdecl _tzset(void);



               __declspec(dllimport) double __cdecl _difftime64( __time64_t _Time1, __time64_t _Time2);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) char * __cdecl _ctime64( const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _ctime64_s( char *_Buf, size_t _SizeInBytes, const __time64_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], const __time64_t * _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) struct tm * __cdecl _gmtime64( const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _gmtime64_s( struct tm *_Tm, const __time64_t *_Time);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) struct tm * __cdecl _localtime64( const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _localtime64_s( struct tm *_Tm, const __time64_t *_Time);

__declspec(dllimport) __time64_t __cdecl _mktime64( struct tm * _Tm);
__declspec(dllimport) __time64_t __cdecl _mkgmtime64( struct tm * _Tm);
__declspec(dllimport) __time64_t __cdecl _time64( __time64_t * _Time);



__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetLocalTime" " instead. See online help for details.")) unsigned __cdecl _getsystime( struct tm * _Tm);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetLocalTime" " instead. See online help for details.")) unsigned __cdecl _setsystime( struct tm * _Tm, unsigned _MilliSec);
#line 276 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.inl"
#line 82 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.inl"
static __inline double __cdecl difftime(time_t _Time1, time_t _Time2)
{
    return _difftime64(_Time1,_Time2);
}
__declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) static __inline char * __cdecl ctime(const time_t * _Time)
{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _ctime64(_Time);
#pragma warning(pop)
}

static __inline errno_t __cdecl ctime_s(char *_Buffer, size_t _SizeInBytes, const time_t * _Time)
{
    return _ctime64_s(_Buffer, _SizeInBytes, _Time);
}

__declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) static __inline struct tm * __cdecl gmtime(const time_t * _Time)
{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _gmtime64(_Time);
#pragma warning(pop)
}

static __inline errno_t __cdecl gmtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _gmtime64_s(_Tm, _Time);
}

__declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) static __inline struct tm * __cdecl localtime(const time_t * _Time)
{
#pragma warning(push)
#pragma warning(disable: 4996)
 return _localtime64(_Time);
#pragma warning(pop)
}
static __inline errno_t __cdecl localtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _localtime64_s(_Tm, _Time);
}
static __inline time_t __cdecl mktime(struct tm * _Tm)
{
    return _mktime64(_Tm);
}
static __inline time_t __cdecl _mkgmtime(struct tm * _Tm)
{
    return _mkgmtime64(_Tm);
}
static __inline time_t __cdecl time(time_t * _Time)
{
    return _time64(_Time);
}
#line 276 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#line 291 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern int daylight;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern long timezone;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(dllimport) extern char * tzname[2];



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_tzset" ". See online help for details.")) __declspec(dllimport) void __cdecl tzset(void);






}


#pragma pack(pop)
#line 9 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\chrono"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\thr/xtimec.h"





#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\thr/xthrcommon.h"







#pragma pack(push,8)
#pragma warning(push, 3)
#line 20 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\thr/xthrcommon.h"
#pragma warning(disable: 4511 4512)

extern "C" {

#pragma warning(disable: 4115 4100 4097 4245)
#line 34 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\thr/xthrcommon.h"
typedef struct
 {
 void *_Hnd;
 unsigned int _Id;
 } _Thrd_imp_t;





typedef unsigned int (__stdcall *_Thrd_callback_t)(void *);
typedef struct _Mtx_internal_imp_t *_Mtx_imp_t;

typedef struct _Cnd_internal_imp_t *_Cnd_imp_t;
typedef int _Tss_imp_t;

typedef char _Once_flag_imp_t;



__declspec(dllimport) void __cdecl _Thrd_abort(const char *);
__declspec(dllimport) int __cdecl _Thrd_start(_Thrd_imp_t *, _Thrd_callback_t, void *);
void _Tss_destroy(void);
#line 69 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\thr/xthrcommon.h"
}








#pragma warning(pop)
#pragma pack(pop)
#line 6 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\thr/xtimec.h"



#pragma pack(push,8)
#pragma warning(push, 3)




extern "C" {


enum {
 TIME_UTC = 1
 };

typedef struct xtime
 {
 time_t sec;
 long nsec;
 } xtime;

__declspec(dllimport) int __cdecl xtime_get(xtime*, int);

__declspec(dllimport) long __cdecl _Xtime_diff_to_millis(const xtime *);
__declspec(dllimport) long __cdecl _Xtime_diff_to_millis2(const xtime*, const xtime *);
__declspec(dllimport) __int64 __cdecl _Xtime_get_ticks();




}


#pragma warning(pop)
#pragma pack(pop)
#line 10 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\chrono"


#pragma pack(push,8)
#pragma warning(push, 3)



#pragma warning(disable: 6326)

namespace std {
namespace chrono {

template<class _Rep>
 struct treat_as_floating_point
  : is_floating_point<_Rep>
 {
 };


template<class _Rep>
 struct duration_values
 {
 static _Rep zero()
  {
  return (_Rep(0));
  }

 static _Rep (min)()
  {
  return ((numeric_limits<_Rep>::lowest)());
  }

 static _Rep (max)()
  {
  return ((numeric_limits<_Rep>::max)());
  }
 };


template<class _Ty>
 struct _Is_ratio
 {
 static const bool value = false;
 };

template<intmax_t _R1,
 intmax_t _R2>
 struct _Is_ratio<ratio<_R1, _R2> >
 {
 static const bool value = true;
 };


template<class _Rep,
 class _Period = ratio<1> >
 class duration;

template<class _Ty>
 struct _Is_duration
 {
 static const bool value = false;
 };

template<class _To,
 class _Rep,
 class _Period> inline
 typename enable_if<_Is_duration<_To>::value,
  _To>::type
  duration_cast(const duration<_Rep, _Period>&);

template<class _Rep,
 class _Period>
 class duration
 {
public:
 typedef duration<_Rep, _Period> _Myt;
 typedef _Rep rep;
 typedef _Period period;

 duration()
  : _MyRep()
  {
  static_assert(_Is_ratio<_Period>::value,
   "period must be an instance of std::ratio");
  static_assert(0 < _Period::num,
   "duration negative or zero");
  }

 template<class _Rep2,
  class = typename enable_if<is_convertible<_Rep2, _Rep>::value
   && (treat_as_floating_point<_Rep>::value
    || !treat_as_floating_point<_Rep2>::value),
   void>::type>
  explicit duration(const _Rep2& _Val)
   : _MyRep(static_cast<_Rep>(_Val))
  {
  static_assert(_Is_ratio<_Period>::value,
   "period not an instance of std::ratio");
  static_assert(0 < _Period::num,
   "duration negative or zero");
  }

 template<class _Rep2,
  class _Period2,
  class = typename enable_if<treat_as_floating_point<_Rep>::value
   || (ratio_divide<_Period2, _Period>::den == 1
    && !treat_as_floating_point<_Rep2>::value),
   void>::type>
  duration(const duration<_Rep2, _Period2>& _Dur)
  : _MyRep(duration_cast<_Myt>(_Dur).count())
  {
  typedef ratio_divide<_Period2, _Period> _Checked_type;

  static_assert(_Is_ratio<_Period>::value,
   "period not an instance of std::ratio");
  static_assert(0 < _Period::num,
   "duration negative or zero");
  }

 _Rep count() const
  {
  return (_MyRep);
  }

 _Myt operator+() const
  {
  return (*this);
  }

 _Myt operator-() const
  {
  return (_Myt(0 - _MyRep));
  }

 _Myt& operator++()
  {
  ++_MyRep;
  return (*this);
  }

 _Myt operator++(int)
  {
  return (_Myt(_MyRep++));
  }

 _Myt& operator--()
  {
  --_MyRep;
  return (*this);
  }

 _Myt operator--(int)
  {
  return (_Myt(_MyRep--));
  }

 _Myt& operator+=(const _Myt& _Right)
  {
  _MyRep += _Right._MyRep;
  return (*this);
  }

 _Myt& operator-=(const _Myt& _Right)
  {
  _MyRep -= _Right._MyRep;
  return (*this);
  }

 _Myt& operator*=(const _Rep& _Right)
  {
  _MyRep *= _Right;
  return (*this);
  }

 _Myt& operator/=(const _Rep& _Right)
  {
  _MyRep /= _Right;
  return (*this);
  }

 _Myt& operator%=(const _Rep& _Right)
  {
  _MyRep %= _Right;
  return (*this);
  }

 _Myt& operator%=(const _Myt& _Right)
  {
  _MyRep %= _Right.count();
  return (*this);
  }

 static _Myt zero()
  {
  return (_Myt(duration_values<_Rep>::zero()));
  }

 static _Myt (min)()
  {
  return (_Myt((duration_values<_Rep>::min)()));
  }
 static _Myt (max)()
  {
  return (_Myt((duration_values<_Rep>::max)()));
  }

private:
 _Rep _MyRep;
 };

template<class _Rep1,
 class _Period1,
 class _Period2>
 class duration<duration<_Rep1, _Period1>, _Period2>
 {
 duration()
  {
  static_assert(_Always_false<_Rep1>::value,
   "duration can't have duration as first template argument");
  }
 };


template<class _Rep,
 class _Period>
 struct _Is_duration<duration<_Rep, _Period> >
 {
 static const bool value = true;
 };

template<class _Clock,
 class _Duration = typename _Clock::duration>
 class time_point
 {
public:
 typedef _Clock clock;
 typedef _Duration duration;
 typedef typename _Duration::rep rep;
 typedef typename _Duration::period period;

 time_point()
  : _MyDur(_Duration::zero())
  {
  static_assert(_Is_duration<_Duration>::value,
   "duration must be an instance of std::duration");
  }

 explicit time_point(const _Duration& _Other)
  : _MyDur(_Other)
  {
  }

 template<class _Duration2,
  class = typename enable_if<is_convertible<_Duration2,
   _Duration>::value,
   void>::type>
  time_point(const time_point<_Clock, _Duration2>& _Tp)
  : _MyDur(_Tp.time_since_epoch())
  {
  }

 _Duration time_since_epoch() const
  {
  return (_MyDur);
  }

 time_point& operator+=(const _Duration& _Dur)
  {
  _MyDur += _Dur;
  return (*this);
  }

 time_point& operator-=(const _Duration& _Dur)
  {
  _MyDur -= _Dur;
  return (*this);
  }

 static time_point (min)()
  {
  return (time_point((_Duration::min)()));
  }
 static time_point (max)()
  {
  return (time_point((_Duration::max)()));
  }

private:
 _Duration _MyDur;
 };
}


template<intmax_t _Ax,
 intmax_t _Bx>
 struct _Lcm
 {
 static const intmax_t _Gx = _Gcd<_Ax, _Bx>::value;
 static const intmax_t value = (_Ax / _Gx) * _Bx;
 };


template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2>
 struct common_type<
  chrono::duration<_Rep1, _Period1>,
  chrono::duration<_Rep2, _Period2> >
 {
 typedef chrono::duration<typename common_type<_Rep1, _Rep2>::type,
  ratio<_Gcd<_Period1::num, _Period2::num>::value,
   _Lcm<_Period1::den, _Period2::den>::value> > type;
 };

template<class _Clock,
 class _Duration1,
 class _Duration2>
 struct common_type<
  chrono::time_point<_Clock, _Duration1>,
  chrono::time_point<_Clock, _Duration2> >
 {
 typedef chrono::time_point<
  _Clock, typename common_type<_Duration1, _Duration2>::type> type;
 };

namespace chrono {

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type
  operator+(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CD;
  return (_CD(_Left) += _Right);
  }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type
  operator-(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_Left) -= _Right);
 }

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 typename enable_if<is_convertible<_Rep2,
  typename common_type<_Rep1, _Rep2>::type>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period1> >::type
  operator*(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 return (duration<_CR, _Period1>(_Left) *= _Right);
 }

template<class _Rep1,
 class _Rep2,
 class _Period2> inline
 typename enable_if<is_convertible<_Rep1,
  typename common_type<_Rep1, _Rep2>::type>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period2> >::type
  operator*(
   const _Rep1& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 return (_Right * _Left);
 }

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 typename enable_if<is_convertible<_Rep2,
  typename common_type<_Rep1, _Rep2>::type>::value
  && !_Is_duration<_Rep2>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period1> >::type
  operator/(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 return (duration<_CR, _Period1>(_Left) /= _Right);
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 typename common_type<_Rep1, _Rep2>::type
  operator/(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_Left).count() / _CD(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2> inline
 typename enable_if<is_convertible<_Rep2,
  typename common_type<_Rep1, _Rep2>::type>::value
  && !_Is_duration<_Rep2>::value,
  duration<typename common_type<_Rep1, _Rep2>::type, _Period1> >::type
  operator%(
   const duration<_Rep1, _Period1>& _Left,
   const _Rep2& _Right)
 {
 typedef typename common_type<_Rep1, _Rep2>::type _CR;
 return (duration<_CR, _Period1>(_Left) %= _Right);
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 typename common_type<_Rep1, _Rep2>::type
  operator%(
   const duration<_Rep1, _Period1>& _Left,
   const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>, duration<_Rep2, _Period2> >::type _CD;
 return (_CD(_Left).count() % _CD(_Right).count());
 }


template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 bool operator==(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CT;
 return (_CT(_Left).count() == _CT(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 bool operator!=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 bool operator<(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 typedef typename common_type<
  duration<_Rep1, _Period1>,
  duration<_Rep2, _Period2> >::type _CT;
 return (_CT(_Left).count() < _CT(_Right).count());
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 bool operator<=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 bool operator>(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Rep1,
 class _Period1,
 class _Rep2,
 class _Period2> inline
 bool operator>=(
  const duration<_Rep1, _Period1>& _Left,
  const duration<_Rep2, _Period2>& _Right)
 {
 return (!(_Left < _Right));
 }


template<class _To,
 class _Rep,
 class _Period> inline
 typename enable_if<_Is_duration<_To>::value,
  _To>::type
  duration_cast(const duration<_Rep, _Period>& _Dur)
 {
 typedef ratio_divide<_Period, typename _To::period> _CF;
 typedef typename _To::rep _ToRep;
 typedef typename common_type<_ToRep, _Rep, intmax_t>::type _CR;
 if (_CF::num == 1 && _CF::den == 1)
  return (_To(static_cast<_ToRep>(_Dur.count())));
 else if (_CF::num != 1 && _CF::den == 1)
  return (_To(static_cast<_ToRep>(
   static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num))));
 else if (_CF::num == 1 && _CF::den != 1)
  return (_To(static_cast<_ToRep>(
   static_cast<_CR>(_Dur.count()) / static_cast<_CR>(_CF::den))));
 else
  return (_To(static_cast<_ToRep>(
   static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
   / static_cast<_CR>(_CF::den))));
 }


typedef duration<long long, nano> nanoseconds;
typedef duration<long long, micro> microseconds;
typedef duration<long long, milli> milliseconds;
typedef duration<long long> seconds;
typedef duration<int, ratio<60> > minutes;
typedef duration<int, ratio<3600> > hours;


template<class _Clock,
 class _Duration,
 class _Rep,
 class _Period> inline
 time_point<_Clock,
  typename common_type<_Duration, duration<_Rep, _Period> >::type>
  operator+(
   const time_point<_Clock, _Duration>& _Left,
   const duration<_Rep, _Period>& _Right)
 {
 typedef time_point<_Clock, typename common_type<
  _Duration, duration<_Rep, _Period> >::type> _RT;
 return (_RT(_Left) += _Right);
 }

template<class _Rep,
 class _Period,
 class _Clock,
 class _Duration> inline
 time_point<_Clock,
  typename common_type<duration<_Rep, _Period>, _Duration>::type>
  operator+(
   const duration<_Rep, _Period>& _Left,
   const time_point<_Clock, _Duration>& _Right)
 {
 return (_Right + _Left);
 }

template<class _Clock,
 class _Duration,
 class _Rep,
 class _Period> inline
 time_point<_Clock,
  typename common_type<_Duration, duration<_Rep, _Period> >::type>
  operator-(
   const time_point<_Clock, _Duration>& _Left,
   const duration<_Rep, _Period>& _Right)
 {
 typedef time_point<_Clock, typename common_type<
  _Duration, duration<_Rep, _Period> >::type> _RT;
 return (_RT(_Left) -= _Right);
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 typename common_type<_Duration1, _Duration2>::type
  operator-(
   const time_point<_Clock, _Duration1>& _Left,
   const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() - _Right.time_since_epoch());
 }


template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 bool operator==(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() == _Right.time_since_epoch());
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 bool operator!=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Left == _Right));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 bool operator<(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Left.time_since_epoch() < _Right.time_since_epoch());
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 bool operator<=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (!(_Right < _Left));
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 bool operator>(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return (_Right < _Left);
 }

template<class _Clock,
 class _Duration1,
 class _Duration2> inline
 bool operator>=(
  const time_point<_Clock, _Duration1>& _Left,
  const time_point<_Clock, _Duration2>& _Right)
 {
 return !(_Left < _Right);
 }


template<class _To,
 class _Clock,
 class _Duration> inline
  typename enable_if<_Is_duration<_To>::value,
   time_point<_Clock, _To> >::type
  time_point_cast(const time_point<_Clock, _Duration>& _Time)
 {
 static_assert(_Is_duration<_To>::value,
  "time_point_cast can only convert to a duration");

 return (time_point<_Clock, _To>(
  duration_cast<_To>(_Time.time_since_epoch())));
 }


struct system_clock
 {
 typedef __int64 rep;
 typedef ratio_multiply<ratio<100, 1>, nano> period;
 typedef chrono::duration<rep, period> duration;
 typedef chrono::time_point<system_clock> time_point;
 static const bool is_monotonic = false;
 static const bool is_steady = false;

 static time_point now() throw ()
  {
  return (time_point(duration(_Xtime_get_ticks())));
  }


 static time_t to_time_t(const time_point& _Time) throw ()
  {
  return ((time_t)(_Time.time_since_epoch().count()
   / (__int64)10000000));
  }

 static time_point from_time_t(time_t _Tm) throw ()
  {
  return (time_point(duration(_Tm * (__int64)10000000)));
  }
 };

class steady_clock
 : public system_clock
 {
public:
 static const bool is_monotonic = true;
 static const bool is_steady = true;
 };

typedef steady_clock monotonic_clock;
typedef system_clock high_resolution_clock;
}


template<class _Rep,
 class _Period> inline
 xtime _To_xtime(const chrono::duration<_Rep, _Period>& _Rel_time)
 {
 xtime _Xt;
 if (_Rel_time <= chrono::duration<_Rep, _Period>::zero())
  {
  _Xt.sec = 0;
  _Xt.nsec = 0;
  }
 else
  {
  chrono::nanoseconds _T0 =
   chrono::system_clock::now().time_since_epoch();
  _T0 += _Rel_time;
  _Xt.sec = chrono::duration_cast<chrono::seconds>(_T0).count();
  _T0 -= chrono::seconds(_Xt.sec);
  _Xt.nsec = (long)_T0.count();
  }
 return (_Xt);
 }
}

#pragma warning(pop)
#pragma pack(pop)
#line 13 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR\\ClientCLR.cpp"

#line 1 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ctime"
#line 17 "D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\ctime"
namespace std {
using :: clock_t; using :: size_t;
using :: time_t; using :: tm;
using :: asctime; using :: clock; using :: ctime;
using :: difftime; using :: gmtime; using :: localtime;
using :: mktime; using :: strftime; using :: time;
}
#line 14 "D:\\CSE 687 Project\\RemoteCodeManagementFacility\\ClientCLR\\ClientCLR.cpp"


ClientCLR::ClientCLR()
{
 this->Loaded +=
  gcnew System::Windows::RoutedEventHandler(this, &ClientCLR::OnLoaded);
 this->Closing +=
  gcnew CancelEventHandler(this, &ClientCLR::Unloading);

 hClearButton->Click += gcnew RoutedEventHandler(this, &ClientCLR::clear);
 hListenButton->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnListenClick);
 hConnectButton->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnConnectClick);
 hCloseButton->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnCloseClick);
 hUploadButton->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnUploadClick);
 hDownloadButton->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnDownloadClick);
 hDirListButton->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnListFileClick);
 hButtonTextSearchServerAdd->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnAddClick);
 hButtonTextSearchServerRemove->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnRemoveClick);
 hButtonTextSearchServerClear->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnClearClick);
 hButtonTextSearch->Click += gcnew RoutedEventHandler(this, &ClientCLR::OnTextSearchClick);


 this->Title = "Remote Code Management Facility";
 this->Width = 800;
 this->Height = 600;



 this->Content = hDockPanel;
 hDockPanel->Children->Add(hStatusBar);
 hDockPanel->SetDock(hStatusBar, Dock::Bottom);
 hDockPanel->Children->Add(hGrid);



 setUpTabControl();
 setUpStatusBar();
 setUpUploadView();
 setUpFileListView();
 setUpConnectionView();
 setUpTextSearchView();
 setUpTextSearchResultView();
}

ClientCLR::~ClientCLR()
{
 delete sender;
 delete receiver;
 delete sendHandler;
 delete recvDispatcher;
 delete textSearchID;
}

void ClientCLR::setUpStatusBar()
{
 hStatusBar->Items->Add(hStatusBarItem);
 hStatus->Text = "very important messages will appear here";

 hStatusBarItem->Content = hStatus;
 hStatusBar->Padding = Thickness(10, 2, 10, 2);
}

void ClientCLR::setUpTabControl()
{
 hGrid->Children->Add(hTabControl);
 hUploadTab->Header = "Upload";
 hFileListTab->Header = "File List & Download";
 hConnectTab->Header = "Connect";
 hTextSearchTab->Header = "Text Search";
 hTextSearchResultTab->Header = "Text Search Result";
 hTabControl->Items->Add(hConnectTab);
 hTabControl->Items->Add(hUploadTab);
 hTabControl->Items->Add(hFileListTab);
 hTabControl->Items->Add(hTextSearchTab);
 hTabControl->Items->Add(hTextSearchResultTab);
}

void ClientCLR::setButtonsProperties()
{
 RowDefinition^ hRow2Def = gcnew RowDefinition();
 hRow2Def->Height = GridLength(75);
 hUploadGrid->RowDefinitions->Add(hRow2Def);
 hUploadButton->Content = "Upload";
 hUploadButton->IsEnabled = false;
 Border^ hBorder3 = gcnew Border();
 hBorder3->Width = 120;
 hBorder3->Height = 30;
 hBorder3->BorderThickness = Thickness(1);
 hBorder3->BorderBrush = Brushes::Black;
 hBorder3->Child = hUploadButton;
 TextBlock^ hSpacer = gcnew TextBlock();
 hSpacer->Width = 10;
 hStackPanel1->Children->Add(hSpacer);
 hStackPanel1->Children->Add(hBorder3);
 hStackPanel1->Orientation = Orientation::Horizontal;
 hStackPanel1->HorizontalAlignment = System::Windows::HorizontalAlignment::Center;
 hUploadGrid->SetRow(hStackPanel1, 1);
 hUploadGrid->Children->Add(hStackPanel1);
}

void ClientCLR::setUpUploadView()
{
 Console::Write("\n  setting up Upload view");
 hUploadGrid->Margin = Thickness(20);
 hUploadTab->Content = hUploadGrid;
 setButtonsProperties();
}

std::string ClientCLR::toStdString(String^ pStr)
{
 std::string dst;
 for (int i = 0; i < pStr->Length; ++i)
  dst += (char)pStr[i];
 return dst;
}

String^ ClientCLR::toSystemString(std::string& str)
{
 StringBuilder^ pStr = gcnew StringBuilder();
 for (size_t i = 0; i < str.size(); ++i)
  pStr->Append((Char)str[i]);
 return pStr->ToString();
}


void ClientCLR::clear(Object^ sender, RoutedEventArgs^ args)
{
 Console::Write("\n  cleared message text");
 hStatus->Text = "Cleared message";
 hTextSearchTextBlock->Text = "";
}

void ClientCLR::setUpFileListView()
{
 hFileListGrid->Margin = Thickness(20);
 hFileListTab->Content = hFileListGrid;
 RowDefinition^ hRow1Def = gcnew RowDefinition();
 hFileListGrid->RowDefinitions->Add(hRow1Def);
 Border^ hBorder1 = gcnew Border();
 hBorder1->BorderThickness = Thickness(1);
 hBorder1->BorderBrush = Brushes::Black;
 hFileListBox->SelectionMode = SelectionMode::Single;
 hBorder1->Child = hFileListBox;
 hFileListGrid->SetRow(hBorder1, 0);
 hFileListGrid->Children->Add(hBorder1);
 RowDefinition^ hRow2Def = gcnew RowDefinition();
 hRow2Def->Height = GridLength(75);
 hFileListGrid->RowDefinitions->Add(hRow2Def);
 StackPanel^ stackPanel = gcnew StackPanel();
 stackPanel->Orientation = Orientation::Horizontal;
 TextBlock^ path = gcnew TextBlock();
 path->Text = "Path on\nserver:";
 stackPanel->Children->Add(path);
 txtBoxDirListPath->Height = 30; txtBoxDirListPath->Width = 100;
 stackPanel->Children->Add(txtBoxDirListPath);
 TextBlock^ space = gcnew TextBlock(); space->Width = 30;
 stackPanel->Children->Add(space);
 TextBlock^ pattern = gcnew TextBlock();
 pattern->Text = "File Patterns\nseperated by \"|\" ";
 stackPanel->Children->Add(pattern);
 txtBoxDirListPattern->Height = 30;
 txtBoxDirListPattern->Width = 100;
 stackPanel->Children->Add(txtBoxDirListPattern);
 space = gcnew TextBlock(); space->Width = 30;
 stackPanel->Children->Add(space);
 hDirListButton->Content = "List files";
 hDirListButton->Height = 30; hDirListButton->Width = 100; hDirListButton->IsEnabled = false;
 stackPanel->Children->Add(hDirListButton);
 space = gcnew TextBlock(); space->Width = 30;
 stackPanel->Children->Add(space);
 hDownloadButton->Content = "Download";
 hDownloadButton->Height = 30; hDownloadButton->Width = 100;
 hDownloadButton->IsEnabled = false;
 stackPanel->Children->Add(hDownloadButton);
 hFileListGrid->SetRow(stackPanel, 1);
 hFileListGrid->Children->Add(stackPanel);
}

void ClientCLR::browseForFolder(Object^ sender, RoutedEventArgs^ args)
{
 std::cout << "\n  Browsing for folder";
 hFileListBox->Items->Clear();
 System::Windows::Forms::DialogResult result;
 result = hFolderBrowserDialog->ShowDialog();
 if (result == System::Windows::Forms::DialogResult::OK)
 {
  String^ path = hFolderBrowserDialog->SelectedPath;
  std::cout << "\n  opening folder \"" << toStdString(path) << "\"";
  array<String^>^ files = System::IO::Directory::GetFiles(path, L"*.*");
  for (int i = 0; i < files->Length; ++i)
   hFileListBox->Items->Add(files[i]);
  array<String^>^ dirs = System::IO::Directory::GetDirectories(path);
  for (int i = 0; i < dirs->Length; ++i)
   hFileListBox->Items->Add(L"<> " + dirs[i]);
 }
}

void ClientCLR::setUpConnectionViewConnect()
{
 hConnectGrid->Margin = Thickness(20);
 hConnectTab->Content = hConnectGrid;

 StackPanel^ stkpnl1 = gcnew StackPanel();
 stkpnl1->Orientation = Orientation::Horizontal;
 TextBlock^ tbIp = gcnew TextBlock();
 TextBlock^ tbPort = gcnew TextBlock();
 tbIp->Text = "Destination IP:";
 tbPort->Text = "Destination Port:";
 txtBoxIp->Width = 120;
 txtBoxIp->Height = 30;
 txtBoxPort->Width = 120;
 txtBoxPort->Height = 30;
 stkpnl1->Children->Add(tbIp);
 stkpnl1->Children->Add(txtBoxIp);
 stkpnl1->Children->Add(tbPort);
 stkpnl1->Children->Add(txtBoxPort);

 StackPanel^ stkpnl2 = gcnew StackPanel();
 stkpnl2->Orientation = Orientation::Vertical;
 hConnectButton->Content = "Connect";
 hConnectButton->IsEnabled = false;
 hConnectButton->Width = 120;
 hConnectButton->Height = 30;

 stkpnl2->Children->Add(hConnectButton);
 TextBlock^ hSpacer = gcnew TextBlock();
 hSpacer->Width = 30;
 stkpnl2->Children->Add(hSpacer);
 hCloseButton->Content = "Close";
 hCloseButton->IsEnabled = false;
 hCloseButton->Width = 120;
 hCloseButton->Height = 30;
 stkpnl2->Children->Add(hCloseButton);
 hSpacer = gcnew TextBlock();
 hSpacer->Width = 30;
 stkpnl1->Children->Add(hSpacer);
 stkpnl1->Children->Add(stkpnl2);
 RowDefinition^ hRow1Def = gcnew RowDefinition();
 hRow1Def->Height = GridLength(75);
 hConnectGrid->RowDefinitions->Add(hRow1Def);
 hConnectGrid->SetRow(stkpnl1, 1);
 hConnectGrid->Children->Add(stkpnl1);
}

void ClientCLR::setUpConnectionViewListen()
{
 StackPanel^ stkpnl1 = gcnew StackPanel();
 stkpnl1->Orientation = Orientation::Horizontal;
 TextBlock^ tbIp = gcnew TextBlock();
 TextBlock^ tbPort = gcnew TextBlock();
 tbIp->Text = "Listen IP:";
 tbPort->Text = "Listen Port:";
 txtBoxListenIp->Width = 120;
 txtBoxListenIp->Height = 30;
 txtBoxListenIp->Text = "127.0.0.1";
 txtBoxListenPort->Width = 120;
 txtBoxListenPort->Height = 30;
 txtBoxListenPort->Text = "9070";

 stkpnl1->Children->Add(tbIp);
 stkpnl1->Children->Add(txtBoxListenIp);
 stkpnl1->Children->Add(tbPort);
 stkpnl1->Children->Add(txtBoxListenPort);

 TextBlock^ hSpacer = gcnew TextBlock();
 hSpacer->Width = 30;
 stkpnl1->Children->Add(hSpacer);

 hListenButton->Width = 120;
 hListenButton->Height = 30;
 hListenButton->Content = "Listen";
 stkpnl1->Children->Add(hListenButton);

 RowDefinition^ hRow1Def = gcnew RowDefinition();
 hRow1Def->Height = GridLength(75);
 hConnectGrid->RowDefinitions->Add(hRow1Def);
 hConnectGrid->SetRow(stkpnl1, 0);
 hConnectGrid->Children->Add(stkpnl1);
}

void ClientCLR::setUpConnectionView()
{
 Console::Write("\n  setting up Connection view");
 setUpConnectionViewListen();
 setUpConnectionViewConnect();
}

void ClientCLR::setUpTextSearchViewControlProperty()
{
 hTextSearchGrid->Margin = Thickness(20);
 hTextSearchTab->Content = hTextSearchGrid;
 txtBoxTextSearchServerAddress->Width = 200;
 txtBoxTextSearchServerAddress->Height = 20;
 hButtonTextSearchServerAdd->Height = 20;
 hButtonTextSearchServerAdd->Content = "Add";
 hListBoxServersTextSearch->Height = 300;
 hButtonTextSearchServerRemove->Height = 20;
 hButtonTextSearchServerRemove->Content = "Remove";
 hButtonTextSearchServerClear->Height = 20;
 hButtonTextSearchServerClear->Content = "Clear";
 txtBoxTextSearchPath->Width = 200;
 txtBoxTextSearchPath->Height = 30;
 txtBoxTextSearchFilePattern->Width = 200;
 txtBoxTextSearchFilePattern->Height = 30;
 txtBoxTextSearchPattern->Width = 200;
 txtBoxTextSearchPattern->Height = 30;
 txtBoxTextSearchThreads->Width = 200;
 txtBoxTextSearchThreads->Height = 30;
 hButtonTextSearch->Width = 200;
 hButtonTextSearch->Height = 30;
 hButtonTextSearch->Content = "Text Search";
 hButtonTextSearch->IsEnabled = false;
}

void ClientCLR::setUpTextSearchView()
{
 setUpTextSearchViewControlProperty();
 array<TextBlock^>^ space = gcnew array<TextBlock^>(3);
 for (int i = 0; i < 3; ++i) {
  space[i] = gcnew TextBlock();
  space[i]->Width = 20; space[i]->Height = 20;
 }
 array<StackPanel^>^ stackPanel = gcnew array<StackPanel^>(5);
 for (int i = 0; i < 5; ++i){
  stackPanel[i] = gcnew StackPanel;
  stackPanel[i]->Orientation = Orientation::Horizontal;
 }
 stackPanel[0]->Orientation = Orientation::Vertical;
 TextBlock^ svrAddr = gcnew TextBlock();
 svrAddr->Text = "Server Address (IP:Port)";
 stackPanel[0]->Children->Add(svrAddr);
 stackPanel[2]->Children->Add(txtBoxTextSearchServerAddress);
 stackPanel[2]->Children->Add(space[2]);
 stackPanel[2]->Children->Add(hButtonTextSearchServerAdd);
 stackPanel[0]->Children->Add(stackPanel[2]);
 stackPanel[0]->Children->Add(hListBoxServersTextSearch);
 stackPanel[1]->Children->Add(hButtonTextSearchServerRemove);
 stackPanel[1]->Children->Add(space[1]);
 stackPanel[1]->Children->Add(hButtonTextSearchServerClear);
 stackPanel[0]->Children->Add(stackPanel[1]);
 TextBlock^ path = gcnew TextBlock(); path->Text = "Path";
 TextBlock^ file_pattern = gcnew TextBlock(); file_pattern->Text = "File Pattern\nPatterns seperated by \"|\"";
 TextBlock^ pattern = gcnew TextBlock(); pattern->Text = "Pattern(regex supported)";
 TextBlock^ threads = gcnew TextBlock(); threads->Text = "Thread number of text search";
 stackPanel[3]->Orientation = Orientation::Vertical;
 stackPanel[3]->Children->Add(path);
 stackPanel[3]->Children->Add(txtBoxTextSearchPath);
 stackPanel[3]->Children->Add(file_pattern);
 stackPanel[3]->Children->Add(txtBoxTextSearchFilePattern);
 stackPanel[3]->Children->Add(pattern);
 stackPanel[3]->Children->Add(txtBoxTextSearchPattern);
 stackPanel[3]->Children->Add(threads);
 stackPanel[3]->Children->Add(txtBoxTextSearchThreads);
 stackPanel[3]->Children->Add(space[0]);
 stackPanel[3]->Children->Add(hButtonTextSearch);
 ColumnDefinition^ hRow1Def = gcnew ColumnDefinition();
 hTextSearchGrid->ColumnDefinitions->Add(hRow1Def);
 hTextSearchGrid->SetColumn(stackPanel[0], 0); hTextSearchGrid->Children->Add(stackPanel[0]);
 ColumnDefinition^ hRow2Def = gcnew ColumnDefinition();
 hTextSearchGrid->ColumnDefinitions->Add(hRow2Def);
 hTextSearchGrid->SetColumn(stackPanel[3], 1); hTextSearchGrid->Children->Add(stackPanel[3]);
}

void ClientCLR::setUpTextSearchResultView()
{
 hTextSearchResultGrid->Margin = Thickness(20);
 hTextSearchResultTab->Content = hTextSearchResultGrid;
 Border^ hBorder1 = gcnew Border();
 hBorder1->BorderThickness = Thickness(1);
 hBorder1->BorderBrush = Brushes::Black;
 hBorder1->Child = hTextSearchTextBlock;
 hTextSearchTextBlock->Padding = Thickness(15);
 hTextSearchTextBlock->Text = "";
 hTextSearchTextBlock->FontFamily = gcnew Windows::Media::FontFamily("Tahoma");
 hTextSearchTextBlock->FontWeight = FontWeights::Bold;
 hTextSearchTextBlock->FontSize = 16;
 hScrollViewer1->VerticalScrollBarVisibility = ScrollBarVisibility::Auto;
 hScrollViewer1->Content = hBorder1;
 RowDefinition^ rd = gcnew RowDefinition();
 hTextSearchResultGrid->RowDefinitions->Add(rd);
 hTextSearchResultGrid->SetRow(hScrollViewer1, 0);
 hTextSearchResultGrid->Children->Add(hScrollViewer1);

 Border^ hBorder2 = gcnew Border();
 hBorder2->Width = 120;
 hBorder2->Height = 30;
 hBorder2->BorderThickness = Thickness(1);
 hBorder2->BorderBrush = Brushes::Black;
 hClearButton->Content = "Clear";
 hBorder2->Child = hClearButton;
 rd = gcnew RowDefinition();
 rd->Height = GridLength(35);
 hTextSearchResultGrid->RowDefinitions->Add(rd);
 hTextSearchResultGrid->SetRow(hBorder2, 1);
 hTextSearchResultGrid->Children->Add(hBorder2);
}

void ClientCLR::getMessage()
{
 MsgMgr msgmgr;
 while (true)
 {
  std::string msg = recvDispatcher->getMessage();
  System::Console::WriteLine(toSystemString(msg));
  msgmgr.ParseMessage(msg);
  std::string command = msgmgr.GetAttrbVal(ATTR_COMMAND);
  if (command == FEEDBACK_UPLOAD)
  {
   MessageBox::Show(toSystemString("Upload:" + msgmgr.GetAttrbVal(ATTR_FILENAME) + " " + msgmgr.GetAttrbVal(ATTR_UPLOAD_STATE)));
  }
  else if (command == FEEDBACK_FILELIST)
  {
   String^ body = toSystemString(msgmgr.GetBody());
   Action<String^>^ act = gcnew Action<String^>(this, &ClientCLR::UpdateFileListBox);
   Dispatcher->Invoke(act, body);
  }
  else if (command == SERVER_UPLOAD_FILE)
  {
   MessageBox::Show(toSystemString("Download:" + msgmgr.GetAttrbVal(ATTR_FILENAME) + " " + msgmgr.GetAttrbVal(ATTR_UPLOAD_STATE)));
  }
  else if (command == FEEDBACK_TEXTSEARCH)
  {
   int id = std::stoi(msgmgr.GetAttrbVal(ATTR_TEXT_SEARCH_ID));
   textSearchID[id]->Stop();
   MessageBox::Show("Finished Text Search on " + toSystemString(msgmgr.GetAttrbVal(ATTR_SRCIP) + ":" + msgmgr.GetAttrbVal(ATTR_SRCPORT)) +
    "\nElapsed time: " + textSearchID[id]->ElapsedMilliseconds / 1000.0 + "s");
   textSearchID->Remove(id);
   Action<String^>^ act = gcnew Action<String^>(this, &ClientCLR::UpdateTextSearchResult);
   Dispatcher->Invoke(act, toSystemString(msg));
  }
 }
}

void ClientCLR::UpdateTextSearchResult(String^ filelist)
{
 MsgMgr msgmgr;
 msgmgr.ParseMessage(toStdString(filelist));
 String^ ip = toSystemString(msgmgr.GetAttrbVal(ATTR_SRCIP));
 String^ port = toSystemString(msgmgr.GetAttrbVal(ATTR_SRCPORT));
 String^ time = toSystemString(msgmgr.GetAttrbVal(ATTR_SEARCH_TIME));
 hTextSearchTextBlock->Text = hTextSearchTextBlock->Text + "\nResult from server: " + ip + ":" + port + "\nTime spent on server:" + time + "\n";
 std::string filelist2 = toStdString(filelist);
 int start = 0;
 int end = filelist2.find("</File>");
 while (end != -1)
 {
  std::string temp = filelist2.substr(start, end - start);
  int start2 = temp.find("<File>");
  int end2 = temp.length() - 1;
  start2 = start2 + 6;
  while (temp[start2] == 10 || temp[start2] == 32)
   ++start2;
  while (temp[end2] == 10 || temp[end2] == 32)
   --end2;
  std::string result = temp.substr(start2, end2 - start2 + 1);
  hTextSearchTextBlock->Text = hTextSearchTextBlock->Text + toSystemString(result) + "\n";
  start = end + 7;
  end = filelist2.find("</File>", start);
 }
 hStatus->Text = "Text Search Result Received";
}

void ClientCLR::UpdateFileListBox(String^ filelist)
{
 hFileListBox->Items->Clear();
 std::string filelist2 = toStdString(filelist);
 int start = 0;
 int end = filelist2.find("</File>");
 while (end != -1)
 {
  std::string temp = filelist2.substr(start, end - start);
  int start2 = temp.find("<File>");
  int end2 = temp.length() - 1;
  start2 = start2 + 6;
  while (temp[start2] == 10 || temp[start2] == 32)
   ++start2;
  while (temp[end2] == 10 || temp[end2] == 32)
   --end2;
  std::string result = temp.substr(start2, end2 - start2 + 1);
  hFileListBox->Items->Add(toSystemString(result));
  start = end + 7;
  end = filelist2.find("</File>", start);
 }
 hStatus->Text = "File List Received";
}

void ClientCLR::OnLoaded(Object^ sender, RoutedEventArgs^ args)
{
 Console::Write("\n  Window loaded");
}
void ClientCLR::Unloading(Object^ sender, System::ComponentModel::CancelEventArgs^ args)
{
 Console::Write("\n  Window closing");
 if (this->sender != nullptr)
  this->sender->sendMessage(ATTR_COMMAND + ":" + QUIT);
 Thread::Sleep(200);
}

void ClientCLR::OnListenClick(Object^ sdr, RoutedEventArgs^ args)
{
 hListenButton->IsEnabled = false;
 hConnectButton->IsEnabled = true;
 hButtonTextSearch->IsEnabled = true;
 std::string ip = toStdString(txtBoxListenIp->Text);
 std::string port = toStdString(txtBoxListenPort->Text);
 ChannelFactory* factory = new ChannelFactory;
 sender = factory->CreateSender(ip, std::stoul(port));
 receiver = factory->CreateReceiver(std::stoul(port), ChannelFactory::IPV4);
 sendHandler = factory->CreateSendHandler(*sender);
 recvDispatcher = factory->CreateRecvDispatcher(*sender, *receiver);
 delete factory;

 recvThread = gcnew Thread(gcnew ThreadStart(this, &ClientCLR::getMessage));
 recvThread->Start();
}

void ClientCLR::OnConnectClick(Object^ sender, RoutedEventArgs^ args)
{
 auto IP = toStdString(txtBoxIp->Text);
 auto Port = toStdString(txtBoxPort->Text);
 if (IP == "" || Port == "")
 {
  MessageBox::Show("Invalid arguments");
  return;
 }
 hCloseButton->IsEnabled = true;
 hDirListButton->IsEnabled = true;
 hDownloadButton->IsEnabled = true;
 hUploadButton->IsEnabled = true;
 hConnectButton->IsEnabled = false;
 sendHandler->invoke(CONNECT, IP + ":" + Port);
 hStatus->Text = "Connected to " + txtBoxIp->Text + ":" + txtBoxPort->Text;
}

void ClientCLR::OnCloseClick(Object^ sender, RoutedEventArgs^ args)
{
 hCloseButton->IsEnabled = false;
 hDirListButton->IsEnabled = false;
 hDownloadButton->IsEnabled = false;
 hUploadButton->IsEnabled = false;
 hConnectButton->IsEnabled = true;
 sendHandler->invoke(CLOSE_CONNECTION, "");
 hStatus->Text = "Connection closed";
}

void ClientCLR::OnUploadClick(Object^ sender, RoutedEventArgs^ args)
{
 hOpenFileDialog->Filter = "All Files|*.*";
 if (hOpenFileDialog->ShowDialog() != Forms::DialogResult::OK)
 {
  return;
 }
 sendHandler->invoke(UPLOAD_FILE, toStdString(hOpenFileDialog->FileName));
 hStatus->Text = "Uploading " + hOpenFileDialog->FileName;
}

void ClientCLR::OnListFileClick(Object^ sender, RoutedEventArgs^ args)
{
 std::string path = toStdString(txtBoxDirListPath->Text);
 std::string patterns = toStdString(txtBoxDirListPattern->Text);
 MsgMgr msgmgr;
 msgmgr.AddAttrb(ATTR_PATH, path);
 msgmgr.AddAttrb(ATTR_PATTERN_FILE, patterns);
 sendHandler->invoke(FIND_FILES, msgmgr.CreateMessage());
 hStatus->Text = "Requesting File List";
}

void ClientCLR::OnDownloadClick(Object^ sender, RoutedEventArgs^ args)
{
 auto result = hFileListBox->SelectedItem;
 if (result->ToString() == "")
  MessageBox::Show("Please select files to download.");
 hStatus->Text = "Downloading";
 sendHandler->invoke(DOWNLOAD_FILE, toStdString(result->ToString()));
}

void ClientCLR::OnAddClick(Object^ sender, RoutedEventArgs^ args)
{
 if (txtBoxTextSearchServerAddress->Text == "")
  return;
 if (hListBoxServersTextSearch->Items->Contains(txtBoxTextSearchServerAddress->Text))
  return;
 hListBoxServersTextSearch->Items->Add(txtBoxTextSearchServerAddress->Text);
}

void ClientCLR::OnRemoveClick(Object^ sender, RoutedEventArgs^ args)
{
 hListBoxServersTextSearch->Items->RemoveAt(hListBoxServersTextSearch->SelectedIndex);
}

void ClientCLR::OnClearClick(Object^ sender, RoutedEventArgs^ args)
{
 hListBoxServersTextSearch->Items->Clear();
}

void ClientCLR::OnTextSearchClick(Object^ sdr, RoutedEventArgs^ args)
{
 std::string path = toStdString(txtBoxTextSearchPath->Text);
 std::string pattern = toStdString(txtBoxTextSearchPattern->Text);
 std::string file_pattern = toStdString(txtBoxTextSearchFilePattern->Text);
 std::string thread_cnt = toStdString(txtBoxTextSearchThreads->Text);
 MsgMgr msgmgr;
 msgmgr.AddAttrb(ATTR_COMMAND, SEARCH_TEXT);
 msgmgr.AddAttrb(ATTR_PATH, path);
 msgmgr.AddAttrb(ATTR_PATTERN_FILE, file_pattern);
 msgmgr.AddAttrb(ATTR_PATTERN_TEXT, pattern);
 msgmgr.AddAttrb(ATTR_THREAD_COUNT, thread_cnt);
 auto servers = hListBoxServersTextSearch->Items;
 int id = 0;
 for each(auto item in servers)
 {
  std::string server = toStdString(item->ToString());
  int index = server.find_last_of(":");
  std::string ip = server.substr(0, index);
  std::string port = server.substr(index + 1);
  msgmgr.AddAttrb(ATTR_DESTIP, ip);
  msgmgr.AddAttrb(ATTR_DESTPORT, port);
  msgmgr.AddAttrb(ATTR_TEXT_SEARCH_ID, std::to_string(id));
  System::Diagnostics::Stopwatch^ watch = System::Diagnostics::Stopwatch::StartNew();
  textSearchID[id++] = watch;
  sender->sendMessage(msgmgr.CreateMessage());
  msgmgr.RemoveAttrb(ATTR_DESTIP);
  msgmgr.RemoveAttrb(ATTR_DESTPORT);
  msgmgr.RemoveAttrb(ATTR_TEXT_SEARCH_ID);
 }
 if (hCloseButton->IsEnabled)
  OnCloseClick(sdr, args);
 hStatus->Text = "Doing Text Search";
}

[STAThread]

int main(array<System::String^>^ args)
{
 Console::WriteLine(L"\n Starting WPFCppCliDemo");

 Application^ app = gcnew Application();
 app->Run(gcnew ClientCLR());
 Console::WriteLine(L"\n\n");
}
